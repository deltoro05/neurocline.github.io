<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 23 Apr 2016 00:40:08 -0700</pubDate>
    <lastBuildDate>Sat, 23 Apr 2016 00:40:08 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Xcode</title>
        <description>&lt;p&gt;For better or for worse, Xcode versions are in rough lockstep with Mac OS X versions. Old versions
of Xcode won’t work on new Mac OS X releases, and new versions of Xcode won’t work on old Mac OS X
releases. This is because Xcode takes advantage of new Mac OS X features, and Apple is relentless
about dropping obsolete features from Mac OS X, thus breaking old versions of Xcode.&lt;/p&gt;

&lt;p&gt;Xcode 3.2 - min Mac OS X 10.6, still supported PPC&lt;/p&gt;

&lt;p&gt;Xcode 4.0 - min Mac OS X 10.6, min OSX SDK 10.6, min iOS SDK 4.3, drops PPC&lt;/p&gt;

&lt;p&gt;Xcode 4.2 - min Mac OS X 10.6, drops GCC support&lt;/p&gt;

&lt;p&gt;Xcode 4.3 - min Mac OS X 10.7&lt;/p&gt;

&lt;p&gt;Xcode 4.6.3 - min Mac OS X 10.7.5&lt;/p&gt;

&lt;p&gt;Xcode 5.0 - min Mac OS X 10.8 (?)&lt;/p&gt;

&lt;p&gt;Xcode 6.0 - min Mac OS X 10.9.4&lt;/p&gt;

&lt;p&gt;Xcode 6.2 - min Mac OS X 10.9.5&lt;/p&gt;

&lt;p&gt;Xcode 6.3 - min Mac OS X 10.10.0 (?)&lt;/p&gt;

&lt;p&gt;Xcode 7.0 - min Mac OS X 10.10.4&lt;/p&gt;

&lt;p&gt;Xcode 7.1 - min Mac OS X 10.10.5&lt;/p&gt;

&lt;p&gt;Xcode 7.3 - min Mac OS X 10.11&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/yamaya/2924292&quot;&gt;xcode-clang-vers gist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Xcode&quot;&gt;Xcode (Wikipedia)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/10335747/how-to-download-xcode-4-5-6-7-and-get-the-dmg-file/10335943#10335943&quot;&gt;Xcode downloads&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Apr 2016 13:07:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2016/04/22/xcode.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/04/22/xcode.html</guid>
        
        <category>programming</category>
        
        <category>Xcode</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;Time to use Read The Docs
- &lt;a href=&quot;https://readthedocs.org/&quot;&gt;Read the Docs&lt;/a&gt;
- &lt;a href=&quot;https://github.com/rtfd/readthedocs.org&quot;&gt;rtfd/readthedocs.org&lt;/a&gt; Read The Docs source code.
- &lt;a href=&quot;http://www.sphinx-doc.org/en/stable/&quot;&gt;Sphinx&lt;/a&gt;
- &lt;a href=&quot;http://www.sphinx-doc.org/en/stable/rest.html&quot;&gt;reStructuredText Primer&lt;/a&gt;
- &lt;a href=&quot;https://github.com/snide/sphinx_rtd_theme&quot;&gt;Read the Docs Sphinx Theme&lt;/a&gt;
- &lt;a href=&quot;http://read-the-docs.readthedocs.org/en/latest/install.html&quot;&gt;Installation&lt;/a&gt;. Get a local instance running.
- &lt;a href=&quot;http://stackoverflow.com/questions/19892310/hosting-a-read-the-docs-like-server-in-house&quot;&gt;Hosting a Read the Docs-like server in-house?&lt;/a&gt;
- &lt;a href=&quot;http://www.robg3d.com/2014/03/introducing-host-the-docs/&quot;&gt;Introducing Host The Docs&lt;/a&gt;. Lightweight doc hosting.
- &lt;a href=&quot;https://github.com/rgalanakis/hostthedocs&quot;&gt;rgalanakis/hostthedocs&lt;/a&gt;. Source for Host The Docs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://amznlabs.github.io/ion-docs/index.html&quot;&gt;Amazon Ion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/amznlabs/ion-java&quot;&gt;Amazon Ion Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zhaozhencn/PushRTMPStreamSync&quot;&gt;zhaozhencn/PushRTMPStreamSync&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Apr 2016 00:09:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2016/04/22/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/04/22/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Xcode - xcworkspace and xcodeproj - part 2</title>
        <description>&lt;p&gt;This is an update of the previous post &lt;a href=&quot;http://neurocline.github.io/dev/2016/04/16/xcode-xcworkspace-and-xcodeproj.html&quot;&gt;Xcode - xcworkspace and xcodeproj&lt;/a&gt;. I imagine that when I’m done, I’ll have a mini-book.&lt;/p&gt;

&lt;p&gt;In the examples below, I used Xcode 6.1.1 to create a command-line tool:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xplore-6.png&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I used all defaults, and a project name of &lt;code&gt;xplore&lt;/code&gt;. I refer to this in places as “using the Xcode wizard”.&lt;/p&gt;

&lt;h1 id=&quot;project-with-embedded-workspace&quot;&gt;Project with embedded workspace&lt;/h1&gt;

&lt;p&gt;If you create a project from Xcode instead of a workspace (File -&amp;gt; New -&amp;gt; Project), you still get
a workspace, it’s just embedded inside your project file. Here’s the project visually:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xplore-1.png&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On disk, the project looks like this (ignoring irrelevant files):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;xplore.xcodeproj/
├── project.pbxproj
└── project.xcworkspace
    └── contents.xcworkspacedata&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;contents.xcworkspacedata&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Workspace&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;version =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;self:xplore.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Workspace&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the project location is &lt;code&gt;self:xplore.xcodeproj&lt;/code&gt;. I’m guessing that &lt;code&gt;self&lt;/code&gt; in this context
means the directory containing the opened project file. In this case, we’re literally
pointing to ourself, but this keeps things sane for Xcode, I imagine.&lt;/p&gt;

&lt;p&gt;This was the default until Xcode 4 - the workspace file existed, but was hidden from sight. With
Xcode 4, the workspace file became a user-visible item so that groups of projects could be more
easily navigated and built.&lt;/p&gt;

&lt;h1 id=&quot;project-with-external-workspace&quot;&gt;Project with external workspace&lt;/h1&gt;

&lt;p&gt;If you create a workspace (File -&amp;gt; New -&amp;gt; Workspace), then you have a separate external workspace file.
Unlike like with, say, Visual Studio, you aren’t prompted to create a project. But when you now go to
create a project, you’ll have a prompt to add it to a currently open workspace:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xplore-2.png&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Visually, there’s little to distinguish workspace+project from workspace-inside-project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xplore-3.png&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t know why the embedded workspace has ‘?’ marks next to items, and the separate workspace
has ‘A’ characters.&lt;/p&gt;

&lt;p&gt;On disk, we now have a named workspace visible in the Finder:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;xplore.xcworkspace/
└── contents.xcworkspacedata&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;contents.xcworkspacedata&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Workspace&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;version =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group:xplore.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Workspace&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the location is now &lt;code&gt;group:xplore.xcodeproj&lt;/code&gt;. This time, our base is the directory containing
the opened workspace file.&lt;/p&gt;

&lt;h1 id=&quot;project-file-walkthrough&quot;&gt;Project file walkthrough&lt;/h1&gt;

&lt;p&gt;The project file &lt;code&gt;xplore.xcodeproj&lt;/code&gt; is identical, whether it is attached to an external
workspace or hosting its own embedded workspace. Let’s walk through it a bit.&lt;/p&gt;

&lt;p&gt;This is the on-disk layout, ignoring non-important files:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;xplore.xcodeproj
└── project.pbxproj&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The project file itself is the &lt;code&gt;project.pbxproj&lt;/code&gt; file inside the xplore.xcodeproj package.&lt;/p&gt;

&lt;p&gt;This is the top-level view of a project file, ignoring the contents of the &lt;code&gt;objects&lt;/code&gt; key:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;// !&lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;UTF8*&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;archiveVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;objectVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 46&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
...
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;rootObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 999A68361CC86ECD0001FC48 /* Project object */&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is using the text version of NeXt/Mac OS X plist files; this format is now obsolete except
for Xcode, and I think Xcode 7 is now switching to XML, which is a pity, because the text version
is straightforward to read. Plist files have numbers, strings, uuids (which are really just strings of
hexadecimal characters), lists and dictionaries.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;archiveVersion&lt;/code&gt; is always 1, and &lt;code&gt;classes&lt;/code&gt; is always (?) empty.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;objectVersion&lt;/code&gt; indicates the project format. As you can see, this project was made with Xcode 3.2
compatibility:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;39: something really old, when the project files were called .xcode&lt;/li&gt;
  &lt;li&gt;42: Xcode 2.4&lt;/li&gt;
  &lt;li&gt;44: Xcode 3.0&lt;/li&gt;
  &lt;li&gt;45: Xcode 3.1 compatible&lt;/li&gt;
  &lt;li&gt;46: Xcode 3.2 compatible&lt;/li&gt;
  &lt;li&gt;47: Xcode 6.3 compatible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;objects&lt;/code&gt; is a dictionary containing all the objects in the project, as &lt;code&gt;key&lt;/code&gt; = &lt;code&gt;value&lt;/code&gt;, where &lt;code&gt;value&lt;/code&gt;
can be one of the aforementioned number, string, uuid, list or dictionary. The keys in our dictionary
are always uuids. There doesn’t appear to be any rule as to the length of the uuids, I’ve seen both
24-character (12-byte) and 48-character (24-byte) uuids in Xcode projects. I’ve even see 47-character
uuids work (a bug in many versions of Mac Premake up through at least 5.0.0-alpha8). Xcode seems to
be forgiving, as long as the uuids don’t collide.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rootObject&lt;/code&gt; points to a &lt;code&gt;PBXProject&lt;/code&gt; object that is the root for this project. There’s only one
&lt;code&gt;PBXProject&lt;/code&gt; object in our project file, and this is typical.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* Begin PBXProject section */
        999A68361CC86ECD0001FC48 /* Project object */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXProject&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;LastUpgradeCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0610&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;ORGANIZATIONNAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Blizzard Entertainment&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;TargetAttributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;999A683D1CC86ECD0001FC48&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;CreatedOnToolsVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6.1.1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;buildConfigurationList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 999A68391CC86ECD0001FC48 /* Build configuration list &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; PBXProject &lt;span class=&quot;s2&quot;&gt;&amp;quot;xplore&amp;quot;&lt;/span&gt; */&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;compatibilityVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Xcode 3.2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;developmentRegion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; English&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;hasScannedForEncodings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;knownRegions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                en,
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;mainGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 999A68351CC86ECD0001FC48&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;productRefGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 999A683F1CC86ECD0001FC48 /* Products */&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;projectDirPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;projectRoot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                999A683D1CC86ECD0001FC48 /* xplore */,
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/* End PBXProject section */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;mainGroup&lt;/code&gt; is the &lt;code&gt;PBXGroup&lt;/code&gt; that is the root of the displayed items. Don’t confuse this with build
instructions; this is purely for visual looks.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* Begin PBXGroup section */
        &lt;span class=&quot;nv&quot;&gt;999A68351CC86ECD0001FC48&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXGroup&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                999A68401CC86ECD0001FC48 /* xplore */,
                999A683F1CC86ECD0001FC48 /* Products */,
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Groups can contain files and more groups. The main group contains two more groups:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;...
        999A683F1CC86ECD0001FC48 /* Products */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXGroup&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                999A683E1CC86ECD0001FC48 /* xplore */,
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Products&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        999A68401CC86ECD0001FC48 /* xplore */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXGroup&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                999A68411CC86ECD0001FC48 /* main.cpp */,
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; xplore&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/* End PBXGroup section */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each of these groups contain files - or rather, &lt;code&gt;PBXFileReference&lt;/code&gt; objects, which actually hold the
information about files:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* Begin PBXFileReference section */
        999A683E1CC86ECD0001FC48 /* xplore */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXFileReference&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;explicitFileType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;compiled.mach-o.executable&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;includeInIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; xplore&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; BUILT_PRODUCTS_DIR&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        999A68411CC86ECD0001FC48 /* main.cpp */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXFileReference&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;lastKnownFileType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sourcecode.cpp.cpp&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; main.cpp&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/* End PBXFileReference section */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For some reason, this is the one dictionary that Xcode puts into a single-line flattened form,
so for readability, I’ve shown the &lt;code&gt;PBXFileReference&lt;/code&gt; items in indented form, instead of what’s in the
Xcode project file. All other items are displayed exactly as they are in the project file.&lt;/p&gt;

&lt;p&gt;Since Xcode likes to put helpful comments in the project file, we can see that this matches the GUI display:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xplore-3.png&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you were to rearrange the order of the items in &lt;code&gt;mainGroup&lt;/code&gt;, then the GUI output would change.&lt;/p&gt;

&lt;p&gt;Going back to the &lt;code&gt;PBXProject&lt;/code&gt; object, note that there is one other group that gets top billing, Products:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;productRefGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 999A683F1CC86ECD0001FC48 /* Products */&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In Xcode parlance, products are the things that are built. Products are built by targets, and configurations
are orthogonal groups of build settings that can be applied to any number of targets or projects.&lt;/p&gt;

&lt;p&gt;I assume that Products gets top billing in the &lt;code&gt;PBXProject&lt;/code&gt; object so that the various actions in
Xcode know what to operate on.&lt;/p&gt;

&lt;p&gt;The two build-related items in the &lt;code&gt;PBXProject&lt;/code&gt; are &lt;code&gt;buildConfigurationList&lt;/code&gt;, which points to the
project configurations available, and &lt;code&gt;targets&lt;/code&gt;, which is the list of build targets themselves.&lt;/p&gt;

&lt;p&gt;In this simple project, we have one build target&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* Begin PBXProject section */
        999A68361CC86ECD0001FC48 /* Project object */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
...
            &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                999A683D1CC86ECD0001FC48 /* xplore */,
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/* End PBXProject section */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This points to a &lt;code&gt;PBXNativeTarget&lt;/code&gt; object, which describes how to build a native Mac OS X binary:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* Begin PBXNativeTarget section */
        999A683D1CC86ECD0001FC48 /* xplore */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXNativeTarget&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;buildConfigurationList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 999A68451CC86ECD0001FC48 /* Build configuration list &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; PBXNativeTarget &lt;span class=&quot;s2&quot;&gt;&amp;quot;xplore&amp;quot;&lt;/span&gt; */&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;buildPhases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                999A683A1CC86ECD0001FC48 /* Sources */,
                999A683B1CC86ECD0001FC48 /* Frameworks */,
                999A683C1CC86ECD0001FC48 /* CopyFiles */,
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;buildRules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; xplore&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;productName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; xplore&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;productReference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 999A683E1CC86ECD0001FC48 /* xplore */&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;productType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;com.apple.product-type.tool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/* End PBXNativeTarget section */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once again, we have a reference &lt;code&gt;productReference&lt;/code&gt; to the Products group, presumably because that’s
how Xcode finds where to put the built target.&lt;/p&gt;

&lt;p&gt;The actual binary type is noted by the &lt;code&gt;productType&lt;/code&gt; key: its value declares this to be a command-line
tool, e.g. &lt;code&gt;com.apple.product-type.tool&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that the target also has a &lt;code&gt;buildConfigurationList&lt;/code&gt;. In this case, this points to configurations
for the target, which are distinct from configurations for the project. So let’s look at configurations
for a bit.&lt;/p&gt;

&lt;p&gt;The project configurations are in a &lt;code&gt;XCConfigurationList&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* Begin XCConfigurationList section */
        999A68391CC86ECD0001FC48 /* Build configuration list &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; PBXProject &lt;span class=&quot;s2&quot;&gt;&amp;quot;xplore&amp;quot;&lt;/span&gt; */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; XCConfigurationList&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;buildConfigurations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                999A68431CC86ECD0001FC48 /* Debug */,
                999A68441CC86ECD0001FC48 /* Release */,
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;defaultConfigurationIsVisible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;defaultConfigurationName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Release&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Xcode defaults to having a Debug configuration and a Release configuration. While these are pretty
common, there is no standard configuration. Do not count on all projects having Debug and Release
configs.&lt;/p&gt;

&lt;p&gt;Xcode’s project wizard creates a pretty comprehensive Debug and Release configuration for you.
And in point of fact, you’ll find out that a lot of these settings can be omitted, because Xcode
defaults are pretty reasonable. This is a matter of style. Note that defining everything possible
is many hundreds of settings; you might get tired after a bit.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* Begin XCBuildConfiguration section */
        999A68431CC86ECD0001FC48 /* Debug */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; XCBuildConfiguration&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;buildSettings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;ALWAYS_SEARCH_USER_PATHS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; NO&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_CXX_LANGUAGE_STANDARD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;gnu++0x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_CXX_LIBRARY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;libc++&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_ENABLE_MODULES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_ENABLE_OBJC_ARC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_WARN_BOOL_CONVERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_WARN_CONSTANT_CONVERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_WARN_DIRECT_OBJC_ISA_USAGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES_ERROR&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_WARN_EMPTY_BODY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_WARN_ENUM_CONVERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_WARN_INT_CONVERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_WARN_OBJC_ROOT_CLASS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES_ERROR&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_WARN_UNREACHABLE_CODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;CLANG_WARN__DUPLICATE_METHOD_MATCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;COPY_PHASE_STRIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; NO&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;ENABLE_STRICT_OBJC_MSGSEND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;GCC_C_LANGUAGE_STANDARD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; gnu99&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;GCC_DYNAMIC_NO_PIC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; NO&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;GCC_OPTIMIZATION_LEVEL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;GCC_PREPROCESSOR_DEFINITIONS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&amp;quot;DEBUG=1&amp;quot;&lt;/span&gt;,
                    &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(inherited)&amp;quot;&lt;/span&gt;,
                &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;GCC_SYMBOLS_PRIVATE_EXTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; NO&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;GCC_WARN_64_TO_32_BIT_CONVERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;GCC_WARN_ABOUT_RETURN_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES_ERROR&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;GCC_WARN_UNDECLARED_SELECTOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;GCC_WARN_UNINITIALIZED_AUTOS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES_AGGRESSIVE&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;GCC_WARN_UNUSED_FUNCTION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;GCC_WARN_UNUSED_VARIABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;MACOSX_DEPLOYMENT_TARGET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 10.9&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;MTL_ENABLE_DEBUG_INFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;ONLY_ACTIVE_ARCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;SDKROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; macosx&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Debug&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By comparison, target configurations are much leaner, and are usually just about settings
related to the target itself. This is the &lt;code&gt;XCConfigurationList&lt;/code&gt; for target settings&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;...
        999A68451CC86ECD0001FC48 /* Build configuration list &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; PBXNativeTarget &lt;span class=&quot;s2&quot;&gt;&amp;quot;xplore&amp;quot;&lt;/span&gt; */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; XCConfigurationList&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;buildConfigurations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                999A68461CC86ECD0001FC48 /* Debug */,
                999A68471CC86ECD0001FC48 /* Release */,
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;defaultConfigurationIsVisible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/* End XCConfigurationList section */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here is the Debug target configuration:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;999A68461CC86ECD0001FC48 /* Debug */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; XCBuildConfiguration&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;buildSettings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;PRODUCT_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(TARGET_NAME)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Debug&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The variable &lt;code&gt;$(TARGET_NAME)&lt;/code&gt; contains the value from the &lt;code&gt;name&lt;/code&gt; key in &lt;code&gt;PBXNativeTarget&lt;/code&gt;, and this
in turn is creating an environment variable that is passed to the compiler when it runs. In the GUI
configuration editor for target, it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xplore-4.png&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And I have turned on two settings in the GUI, Show Setting Names and Show Definitions, to see
the underlying names instead of “human-readable” ones:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xplore-5.png&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Returning to the &lt;code&gt;PBXNativeTarget&lt;/code&gt; object, the most important part from the point of actually
doing stuff is the &lt;code&gt;buildPhases&lt;/code&gt; key, which is a list of build phases.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* Begin PBXNativeTarget section */
        999A683D1CC86ECD0001FC48 /* xplore */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
...
            &lt;span class=&quot;nv&quot;&gt;buildPhases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                999A683A1CC86ECD0001FC48 /* Sources */,
                999A683B1CC86ECD0001FC48 /* Frameworks */,
                999A683C1CC86ECD0001FC48 /* CopyFiles */,
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
...
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/* End PBXNativeTarget section */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These are all magic singleton objects. There are a number of possible phases, not all projects
have all phases. Here are the possible phases I know about&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PBXAppleScriptBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXCopyFilesBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXFileReference&lt;/li&gt;
  &lt;li&gt;PBXFrameworksBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXHeadersBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXResourcesBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXShellScriptBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXSourcesBuildPhase&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The two most important ones are &lt;code&gt;PBXSourcesBuildPhase&lt;/code&gt; for building your own sources, and then
&lt;code&gt;PBXFrameworksBuildPhase&lt;/code&gt; for linking in external libraries and frameworks. In our Xcode wizard
generated project, we also have a &lt;code&gt;PBXCopyFilesBuildPhase&lt;/code&gt;, although this is a legacy of how
Unix command-line tools are built (it copies man files into &lt;code&gt;/usr/share/man/man1/&lt;/code&gt;, but in vain).
We’ll ignore a Copy Files phase for now.&lt;/p&gt;

&lt;p&gt;If you want to see this in the GUI, select a target (in our case, xplore) and click on the
Build Phases tab. Since we have no files to copy, Copy Files says “0 items”, and since we have
no frameworks or libraries to link against yet, Link Binary With Libraries also says “0 items”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xplore-7.png&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since this is a small project, our Sources Build phase is short&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* Begin PBXSourcesBuildPhase section */
        999A683A1CC86ECD0001FC48 /* Sources */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXSourcesBuildPhase&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;buildActionMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2147483647&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                999A68421CC86ECD0001FC48 /* main.cpp in Sources */,
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;runOnlyForDeploymentPostprocessing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/* End PBXSourcesBuildPhase section */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We have one file to build, indicated with a &lt;code&gt;PBXBuildFile&lt;/code&gt; object in the &lt;code&gt;files&lt;/code&gt; list in the
&lt;code&gt;PBXSourcesBuildPhase&lt;/code&gt; object.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* Begin PBXBuildFile section */
        999A68421CC86ECD0001FC48 /* main.cpp in Sources */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXBuildFile&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 999A68411CC86ECD0001FC48 /* main.cpp */&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/* End PBXBuildFile section */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This in turn points to a &lt;code&gt;PBXFileReference&lt;/code&gt; object. Xcode’s indirection is a little annoying,
but keeps duplication and duplication-related error to a minimum. In this specific case, I’m not sure
what is gained, because the build file item has no extra annotations on it, but maybe other kinds
of objects have some build-specific annotation that goes here.&lt;/p&gt;

&lt;p&gt;The Xcode wizard added a Build Frameworks phase for us as a courtesy, but there’s nothing in it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* Begin PBXFrameworksBuildPhase section */
        999A683B1CC86ECD0001FC48 /* Frameworks */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXFrameworksBuildPhase&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;buildActionMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2147483647&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;runOnlyForDeploymentPostprocessing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/* End PBXFrameworksBuildPhase section */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And, that’s the entire wizard-generated project file.&lt;/p&gt;

&lt;h1 id=&quot;adding-a-library-to-our-project&quot;&gt;Adding a library to our project&lt;/h1&gt;

&lt;p&gt;Let’s add a static library to our workspace. This is File -&amp;gt; New -&amp;gt; Project, and choosing static
library:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xplore-8.png&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will name it xlib, add it to our workspace, and put it in the top group.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xplore-10.png&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s look at the workspace. We see a new project added (it’s in a folder because Xcode likes
to do things that way, but we could move it around and edit the workspace to match):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Workspace&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;version =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group:xplore.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group:xlib/xlib.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Workspace&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, we have a new xlib.xcodeproj that will build a library (assuming we add sources
to it), but there are no changes to the xplore.xcodeproj/project.pbxproj file. And if we put code
into our static library and built, we would find out that this library is not being linked to from
our main command-line binary.&lt;/p&gt;

&lt;p&gt;So we add xlib into the Build Frameworks phase:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xplore-11.png&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, if we diff the project before and after adding this library to the Build Frameworks phase,
we see a handful of important changes to &lt;code&gt;xplore.xcodeproj/project.pbxproj&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a new &lt;code&gt;PBXBuildFile&lt;/code&gt; entry to link against libxlib.a&lt;/li&gt;
  &lt;li&gt;a new &lt;code&gt;PBXFileReference&lt;/code&gt; object pointing to the file libxlib.a&lt;/li&gt;
  &lt;li&gt;an &lt;code&gt;files&lt;/code&gt; entry in the &lt;code&gt;PBXFrameworksBuildPhase&lt;/code&gt; object&lt;/li&gt;
  &lt;li&gt;a libxlib.a entry added to the top &lt;code&gt;PBXGroup&lt;/code&gt; (which is a weird place to put it)&lt;/li&gt;
  &lt;li&gt;a library search path added to the &lt;code&gt;XCBuildConfiguration&lt;/code&gt; for the target&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 20 Apr 2016 19:21:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2016/04/20/xcode-xcworkspace-and-xcodeproj-part2.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/04/20/xcode-xcworkspace-and-xcodeproj-part2.html</guid>
        
        <category>programming</category>
        
        <category>Xcode</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/vurtun/nuklear&quot;&gt;Nuklear&lt;/a&gt;. “This is a minimal state immediate mode graphical user interface toolkit written in ANSI C and licensed under public domain.” Or to be specific, a 20,000 line header file that has a lot of a UI toolkit in it. Caught my eye because the last gallery picture was showing a Diablo II-styled dialog box.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nccgroup.trust/globalassets/our-research/us/whitepapers/2016/april/ncc_group_understanding_hardening_linux_containers-10pdf/&quot;&gt;Understanding and Hardening Linux Containers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.alexkras.com/19-git-tips-for-everyday-use/&quot;&gt;19 Tips For Everyday Git Use&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hex.pm/&quot;&gt;hex&lt;/a&gt;. The package manager for the Erlang ecosystem.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/marioballano/emudore&quot;&gt;emudore, a Commodore 64 emulator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nikitablack.github.io/2016/04/12/Generic-C-delegates.html&quot;&gt;Generic C++ delegates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.facebook.com/posts/215466732167400/wangle-an-asynchronous-c-networking-and-rpc-library/&quot;&gt;Wangle — an asynchronous C++ networking and RPC library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/folly/tree/master/folly/io/async&quot;&gt;folly/io/async: An object-oriented wrapper around libevent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://libevent.org/&quot;&gt;libevent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/proxygen&quot;&gt;Proxygen: Facebook’s C++ HTTP Libraries&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/fbthrift&quot;&gt;FBThrift: Facebook’s branch of apache thrift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.facebook.com/posts/1661982097368498&quot;&gt;Futures for C++11 at Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://deplinenoise.wordpress.com/2014/02/23/using-c11-capturing-lambdas-w-vanilla-c-api-functions/&quot;&gt;Using C++11 Capturing Lambdas w/ Vanilla C API Functions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/cpp/comments/4flb8z/fighting_through_a_cmake_hell/&quot;&gt;Fighting through a CMake hell!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mesonbuild/meson/wiki/Wrap%20dependency%20system%20manual&quot;&gt;Wrap dependency system manual&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mesonbuild.com/dependencies.html&quot;&gt;The Meson Build System&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://waf.io/&quot;&gt;Waf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cmake.org/cmake/help/v3.5/manual/cmake-buildsystem.7.html&quot;&gt;cmake-buildsystem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://purplekarrot.net/blog/cmake-introduction-and-best-practices.html&quot;&gt;CMake introduction and best practices&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Apr 2016 19:21:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2016/04/20/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/04/20/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Xcode - xcworkspace and xcodeproj</title>
        <description>&lt;p&gt;Starting with Xcode 4 and through at least Xcode 6, the internals of the Xcode project have been
consistent. The only evolution has been to add new object types to the xcodeproj file.&lt;/p&gt;

&lt;p&gt;There are two objects - the workspace (.xcworkspace) and the project (.xcodeproject). As of
Xcode 4, the workspace can now be a visible separate object.&lt;/p&gt;

&lt;h1 id=&quot;xcworkspace-external&quot;&gt;*.xcworkspace (external)&lt;/h1&gt;

&lt;p&gt;An Xcode workspace always exists, and may be external to an .xcodeproj, or embedded within one. We
will defer talking about embedded .xcworkspace directories for a bit.&lt;/p&gt;

&lt;p&gt;Xcode workspaces are directories with the .xcworkspace extension
that the Mac OS X desktop presents as &lt;a href=&quot;https://en.wikipedia.org/wiki/Package_(OS_X)&quot;&gt;packages&lt;/a&gt;.
In the package directory, the important file is contents.xcworkspacedata. A workspace is just a list of
contained projects; there is no other metadata.&lt;/p&gt;

&lt;p&gt;The simplest possible .xcworkspace has an on-disk structure like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;empty.xcworkspace/
└── contents.xcworkspacedata&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the &lt;code&gt;contents.xcworkspacedata&lt;/code&gt; file, containing the actual workspace data, looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Workspace&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;version =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This workspace has nothing in it, but Xcode will open it up. Of course, once you open it up, Xcode
will likely generate other metadata like an &lt;code&gt;xcshareddata/&lt;/code&gt; directory containing source control
information, and an &lt;code&gt;xcuserdata/&lt;/code&gt; directory with user interface settings (window positions and
so on). That metadata isn’t used for building, so we’ll ignore it here.&lt;/p&gt;

&lt;p&gt;A better example is from cppget, which has an Xcode workspace (albeit currently generated with
Premake and not hand-made). The current directory structure for this package is as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cppget.xcworkspace/
├── contents.xcworkspacedata
├── xcshareddata/
│   └── cppget.xccheckout
└── xcuserdata/
    └── bfitz.xcuserdatad/
        ├── UserInterfaceState.xcuserstate
        ├── WorkspaceSettings.xcsettings
        └── xcdebugger/
            └── Breakpoints_v2.xcbkptlist&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the contents of the workspace file, &lt;code&gt;cppget.xcworkspace/contents.xcworkspacedata&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Workspace&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;version =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group:cppget.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group:../vendor/__pkg__/cjson/project/cjson.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group:../vendor/__pkg__/popt/project/popt.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group:../vendor/__pkg__/zlib/project/zlib.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group:../vendor/__pkg__/minizip/project/minizip.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group:../vendor/__pkg__/curl/project/curl.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group:../vendor/__pkg__/unittest++/project/unittest++.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Workspace&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The document root object is &lt;code&gt;&amp;lt;Workspace&amp;gt;&lt;/code&gt;. The root object has a &lt;code&gt;version&lt;/code&gt; attribute
(always observed to be 1.0, indicating that the workspace file format hasn’t been changing),
and then an array of child nodes of type &lt;code&gt;&amp;lt;FileRef&amp;gt;&lt;/code&gt; and/or &lt;code&gt;&amp;lt;Group&amp;gt;&lt;/code&gt;.
Each &lt;code&gt;FileRef&lt;/code&gt; node has a single attribute, which is the location of the contained item.
The value of the attribute is a string with either a “self:” prefix or a “group:” prefix (the
self prefix is used when the .xcworkspace is embedded, see below). In the
case of the “group” prefix, this auto-creates a group containing just this item in the workspace.
Groups can contain Groups or FileRefs, but FileRefs are just leaf nodes.&lt;/p&gt;

&lt;p&gt;In the example above, the source code structure looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cppget/
├── project/
│   └── cppget.xcworkspace/
└── vendor/
    └── __pkg__/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;explaining the relative paths (getting to &lt;code&gt;vendor&lt;/code&gt; from &lt;code&gt;project&lt;/code&gt; requires &lt;code&gt;../vendor&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I say “item” because you can put anything in an .xcworkspace. Normally, you put projects into
the workspace, but you can also put individual files, or directories. These will only be used for
browsing and search; to build, you need an .xcodeproj.&lt;/p&gt;

&lt;p&gt;There is no idea of “main” project file. In this case, there is a main project file (cppget.xcodeproj)
that builds an executable, and then 6 additional projects that build libraries (each in the form of a
C/C++ package). When you open this workspace in Xcode, it in turn reads information from each project
referenced in the workspace file. All the data displayed in the GUI comes from each .xcodeproj,
the workspace itself contains no metadata.&lt;/p&gt;

&lt;p&gt;There are other files in a typical .xcworkspace bundle. Usually, these are user-specific files that
hold settings. We’ll defer covering those to some other time, as none of them alter the meaning
of the project files themselves.&lt;/p&gt;

&lt;h2 id=&quot;adding-a-project-to-a-workspace&quot;&gt;Adding a project to a workspace&lt;/h2&gt;

&lt;p&gt;Because a workspace just collects paths to projects, adding a project to a workspace is
very simple - just add a FileEntry node pointing to the project.&lt;/p&gt;

&lt;p&gt;From C++, we would:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;read the XML with our preferred XML parser&lt;/li&gt;
  &lt;li&gt;look to see if there is already a FileRef referring to our project
    &lt;ul&gt;
      &lt;li&gt;if yes, done&lt;/li&gt;
      &lt;li&gt;if not, add a new node&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that we have no “update” ability; either we find the exact path to our new project already
in the workspace, or we add it. This means you need to take some care to have canonical paths.&lt;/p&gt;

&lt;p&gt;The node we are adding follows the form&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group:RELATIVEPATH&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;e.g. the only data is the value for the &lt;code&gt;location&lt;/code&gt; attribute, and the attribute value is prefixed
with either &lt;code&gt;group:&lt;/code&gt; or &lt;code&gt;self:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, for example, assuming you were using &lt;a href=&quot;http://rapidxml.sourceforge.net/&quot;&gt;RapidXML&lt;/a&gt;,
your code might look like this. I have parsed the workspace into a data structure that has
pulled FileRefs out into a vector for easy manipulation, but then the XML itself has to be
manipulated to add a new FileRef.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddProjectToXcodeWorkspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projectPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;XCWorkspace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadXCWorkspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;xcode.workspace&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projectPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// already in the workspace&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projectPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Insert into XML. Add to end of root node, which is Workspace&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocate_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rapidxml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;FileRef&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;group:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projectPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocate_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocate_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fileref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteXCWorkspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;xcode.workspace&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Perhaps a different XML library would have cleaner syntax. It’s a tradeoff.&lt;/p&gt;

&lt;h1 id=&quot;xcodeproj&quot;&gt;*.xcodeproj&lt;/h1&gt;

&lt;p&gt;Like the workspace, an Xcode project is a bundle containing one or more files. The most important
and only required file is the &lt;code&gt;project.pbxproj&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The simplest possible project looks like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;empty.xcodeproj/
└── project.pbxproj&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;project.pbxproj&lt;/code&gt; file is an Xcode-specific file format using the text plist format, which came
from NeXt and is now only used by legacy programs - and Xcode. Or so the internet claims.
Also interestingly, Xcode by default is reading and writing the ASCII
plist format, but can also read the XML plist format. But everyone seems to be creating the text
version, so we’ll stick with that (because the XML plist format is pretty hard to read).&lt;/p&gt;

&lt;p&gt;For a bigger example, let’s look at the .xcodeproj from cppget:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cppget.xcodeproj/
├── project.pbxproj
└── xcuserdata/
    └── bfitz.xcuserdatad/
        └── xcschemes/
            ├── cppget.xcscheme
            └── xcschememanagement.plist&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As with .xcworkspace directories, Xcode puts configuration data inside the project directory, which
we will ignore, because it doesn’t bear directly on workspaces and projects at the build level.&lt;/p&gt;

&lt;p&gt;The root of an Xcode project file is a dictionary. Looking at &lt;code&gt;cppget.xcodeproj/project.pbxproj&lt;/code&gt;,
we see this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;// !&lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;UTF8*&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;archiveVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;objectVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 46&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    ... objects here
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;rootObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 08FB7793FE84155DC02AAC07 /* Project object */&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;archiveVersion&lt;/code&gt; has always been 1.  And &lt;code&gt;classes&lt;/code&gt; is usually empty (always?).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;objectVersion&lt;/code&gt; indicates the project format::&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;39: something really old, when the project files were called .xcode&lt;/li&gt;
  &lt;li&gt;42: Xcode 2.4&lt;/li&gt;
  &lt;li&gt;44: Xcode 3.0&lt;/li&gt;
  &lt;li&gt;45: Xcode 3.1 compatible&lt;/li&gt;
  &lt;li&gt;46: Xcode 3.2 compatible&lt;/li&gt;
  &lt;li&gt;47: Xcode 6.3 compatible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most important key is &lt;code&gt;rootObject&lt;/code&gt;, which tells us which object represents the project. The entire
project file is a tree, with &lt;code&gt;rootObject&lt;/code&gt; at the top. The value of rootObject is an Xcode object
identifier that is an index into the &lt;code&gt;objects&lt;/code&gt; dictionary, which is a PBXProject object.&lt;/p&gt;

&lt;h2 id=&quot;xcode-object-identifiers&quot;&gt;Xcode object identifiers&lt;/h2&gt;

&lt;p&gt;Objects have a 12-byte or 24-byte identifier, written as 24 or 48 hexadecimal characters; we’ll call
them GUIDs here, although this does not imply similarity to other things people call GUIDs. Object
GUIDs need to be unique inside a project file, and also need to be unique among the set of project
files that are opened at the same time in Xcode. This means an effort should be taken to make them
unique across all projects. I don’t know how true that needs to be, because most UUIDs are only used
locally to the project that they are found in.&lt;/p&gt;

&lt;p&gt;There’s an interesting competing need that Premake satisfies but the Xcode algorithm does not, and that
is that if you regenerate a project, it would be nice to have the same GUIDs, so that diffs are minimized
(e.g. when checking in to source control).&lt;/p&gt;

&lt;p&gt;Premake uses a simple algorithm that is completely deterministic and relies on “paths” being unique.
Each element that gets a GUID has a sequence of strings that creates a virtual path, and this path is
hashed with a variant of the DJB algorithm. For example, creating a target ID uses the path
[projectname, configname, “target”]; this whole thing is turned into a string and hashed to get a
UUID. Since this is deterministic, regenerating the project will create the same UUID. The assumption
is that things that are named the same are the same thing. See uses of &lt;code&gt;xcode.newid&lt;/code&gt; in
&lt;a href=&quot;https://github.com/premake/premake-xcode&quot;&gt;premake/premake-xcode&lt;/a&gt;,
and refer to
&lt;a href=&quot;https://github.com/premake/premake-core/blob/master/src/host/string_hash.c&quot;&gt;premake-core/src/host/string_hash.c&lt;/a&gt;
for the low-level C code.&lt;/p&gt;

&lt;p&gt;Xcode uses the algorithm linked here: &lt;a href=&quot;https://pewpewthespells.com/blog/pbxproj_identifiers.html&quot;&gt;PBXProj Identifiers&lt;/a&gt;. This basically creates a memorized per-user structure that used with current time each time a
new identifer is created. This code was apparently reverse-engineered from DevToolsCore.framework.
This is safer, but requires some extra work if you want to minimize change on project regeneration.&lt;/p&gt;

&lt;h2 id=&quot;xcode-objects&quot;&gt;Xcode objects&lt;/h2&gt;

&lt;p&gt;All objects in the &lt;code&gt;objects&lt;/code&gt; directory have an &lt;code&gt;isa&lt;/code&gt; that indicates the type of object. As of Xcode 3.2,
there are the following object kinds&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PBXAppleScriptBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXBuildFile&lt;/li&gt;
  &lt;li&gt;PBXContainerItemProxy&lt;/li&gt;
  &lt;li&gt;PBXCopyFilesBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXFileReference&lt;/li&gt;
  &lt;li&gt;PBXFrameworksBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXHeadersBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXGroup&lt;/li&gt;
  &lt;li&gt;PBXNativeTarget&lt;/li&gt;
  &lt;li&gt;PBXProject&lt;/li&gt;
  &lt;li&gt;PBXReferenceProxy&lt;/li&gt;
  &lt;li&gt;PBXResourcesBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXShellScriptBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXSourcesBuildPhase&lt;/li&gt;
  &lt;li&gt;PBXTargetDependency&lt;/li&gt;
  &lt;li&gt;PBXVariantGroup&lt;/li&gt;
  &lt;li&gt;XCBuildConfiguration&lt;/li&gt;
  &lt;li&gt;XCConfigurationList&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pbxproject&quot;&gt;PBXProject&lt;/h2&gt;

&lt;p&gt;The root object points to an instance of PBXProject. Typically, there is just one in an .xcodeproj
file. The one for cppget looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;08FB7793FE84155DC02AAC07 /* Project object */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXProject&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;buildConfigurationList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1DEB928908733DD80010E9CD&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;compatibilityVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Xcode 3.2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;hasScannedForEncodings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;mainGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ED4223A33B50CE509E91A9E3 /* cppget */&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;projectDirPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;projectReferences&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        ... references here
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;projectRoot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        9864FFB2FFF6A69F568155F2 /* cppget */,
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;buildConfigurationList&lt;/code&gt; key points to a XCConfigurationList object, which is an array
of XCBuildConfiguration objects. Many projects have a Debug and Release configuration, but
there are no mandatory configurations; projects can declare ones specific to their needs.
See below: there are two sets of config, one for projects, and the other for targets. This
is distinguished in the Xcode GUI but can be a subtle difference, since many settings are
shared.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;mainGroup&lt;/code&gt; key points to a PBXGroup object, which is the list of files that are built
for this project. As seen below, this is a list of individual items as well as other groups.
A group is just a decorative container, but Xcode will use standard names for some groups
like Products and Frameworks and Projects. Every file that contributes to the build will
be traced from &lt;code&gt;mainGroup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;targets&lt;/code&gt; key points to a list of targets that this project creates. These are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PBXNativeTarget: a build target that makes a binary (library or executable)&lt;/li&gt;
  &lt;li&gt;PBXAggregateTarget: a build target that aggregates several others&lt;/li&gt;
  &lt;li&gt;PBXLegacyTarget: (not supported any more?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pbxgroup&quot;&gt;PBXGroup&lt;/h2&gt;

&lt;p&gt;A PBXGroup object is a list of zero or more:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PBXFileReference: a group can contain a reference to a file; this can be a source file, a framework, a build artifact (like a binary), or even another project.&lt;/li&gt;
  &lt;li&gt;PBXReferenceProxy: a group can contain a reference to something from outside the project; this is usually an object built by a dependent project.&lt;/li&gt;
  &lt;li&gt;PBXGroup: a group can contain another group, and this shows up as a sub-folder in the UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;EAEC10A24F22830F77FBC6E2 /* Products */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXGroup&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        ... references here
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Products&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This group has the name Products, has its source tree as the group itself, and then has zero or more children.
Typically groups are not empty.&lt;/p&gt;

&lt;h2 id=&quot;pbxfilereference&quot;&gt;PBXFilereference&lt;/h2&gt;

&lt;p&gt;All physical items are identified by PBXFileReference objects.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;sourceTree&lt;/code&gt; entry is the location where this object can be found. Typically, this is &lt;code&gt;&amp;lt;group&amp;gt;&lt;/code&gt;, meaning
that the location is inside the group containing this PBXFileReference (or the project itself). Sometimes
the &lt;code&gt;sourceTree&lt;/code&gt; will be a variable like &lt;code&gt;BUILT_PRODUCTS_DIR&lt;/code&gt;, which is either defined in the project itself
or externally (say as a default by Xcode).&lt;/p&gt;

&lt;p&gt;The majority of entries will be source code, with a &lt;code&gt;lastKnownFileType&lt;/code&gt; indicating the file type that Xcode
believes the file has. This is a hierarchy, so all source code tags start with &lt;code&gt;sourcecode.&lt;/code&gt;; C++ files
begin with &lt;code&gt;sourcecode.cpp.&lt;/code&gt;, and so on. So a C++ source file would be &lt;code&gt;sourcecode.cpp.cpp&lt;/code&gt;, and a C
header file would be &lt;code&gt;sourcecode.c.h&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;0E6510F6A5C575A340791736&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXFileReference&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;lastKnownFileType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sourcecode.cpp.cpp&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; main.cpp&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ../src/main.cpp&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some entries will indicate built objects, like an executable. These have an &lt;code&gt;explicitFileType&lt;/code&gt; entry with a
value such as &lt;code&gt;compiled.mach-o.executable&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;5F42214CB908A5D9E0E93F8C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXFileReference&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;explicitFileType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;compiled.mach-o.executable&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;includeInIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; cppget&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; cppget&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; BUILT_PRODUCTS_DIR&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some entries will indicate external items. These have a &lt;code&gt;lastKnowFileType&lt;/code&gt; of &lt;code&gt;&quot;wrapper.pb-project&quot;&lt;/code&gt;, and a &lt;code&gt;path&lt;/code&gt;
pointing at the project itself, located relative to &lt;code&gt;sourceTree&lt;/code&gt;. In this case a &lt;code&gt;sourceTree&lt;/code&gt; of &lt;code&gt;SOURCE_ROOT&lt;/code&gt;
indicates a variable set in Xcode pointing to the workspace or project.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;2A74773383797DE0775EFD73&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXFileReference&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;lastKnownFileType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;wrapper.pb-project&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cjson.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ../packages/__pkg__/cjson/project/cjson.xcodeproj&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SOURCE_ROOT&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some entries indicate Mac OS X frameworks, either installed by the system (like LDAP.framework), or custom
to the project. In this case, &lt;code&gt;lastKnownFileType&lt;/code&gt; is &lt;code&gt;wrapper.framework&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; points to the path for
the framework relative to &lt;code&gt;sourceTree&lt;/code&gt;. In the example below, the source tree is &lt;code&gt;SDKROOT&lt;/code&gt;, which is
predefined by Xcode to point to the system SDKs.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;50F336C2F6C717AFAF740D02&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXFileReference&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;lastKnownFileType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; wrapper.framework&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; LDAP.framework&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; System/Library/Frameworks/LDAP.framework&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SDKROOT&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;pbxnativetarget&quot;&gt;PBXNativeTarget&lt;/h2&gt;

&lt;p&gt;A PBXNativeTarget objects describes how to build a native target. This is the various build phases,
the output name&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;9864FFB2FFF6A69F568155F2 /* cppget */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXNativeTarget&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;buildConfigurationList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 571A991BE942DF281F6C975B&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;buildPhases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        ... zero or more PBXBuildPhase
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;buildRules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        ... zero or more PBXTargetDependency entries
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; cppget&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;productInstallPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(HOME)/bin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;productName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; cppget&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;productReference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5F42214CB908A5D9E0E93F8C /* cppget */&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;productType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;com.apple.product-type.tool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, this is an executable binary, as indicated by &lt;code&gt;productReference&lt;/code&gt; pointing
to a PBXFileReference that is a &lt;code&gt;compiled.mach-o.executable&lt;/code&gt;, but also by &lt;code&gt;productType&lt;/code&gt;
being “command line tool”, &lt;code&gt;com.apple.product-type.tool&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;5F42214CB908A5D9E0E93F8C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXFileReference&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;explicitFileType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;compiled.mach-o.executable&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;includeInIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; cppget&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; cppget&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; BUILT_PRODUCTS_DIR&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that a PBXNativeTarget has its own XCConfigurationList; these are named the same
as the project configurations, but contain target-specific information. See below for
the cascade order for config.&lt;/p&gt;

&lt;p&gt;For example, the debug configuration has this as its target config:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;41922E615426EFEE2E938CA1 /* Debug */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; XCBuildConfiguration&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;buildSettings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;PRODUCT_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; cppget&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Debug&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;pbxbuildphase&quot;&gt;PBXBuildPhase&lt;/h2&gt;

&lt;p&gt;There are at least these 7 kinds of build phases&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PBXAppleScriptBuildPhase: run an AppleScript&lt;/li&gt;
  &lt;li&gt;PBXCopyFilesBuildPhase: copy files&lt;/li&gt;
  &lt;li&gt;PBXFrameworksBuildPhase: link frameworks&lt;/li&gt;
  &lt;li&gt;PBXHeadersBuildPhase: build precompiled headers&lt;/li&gt;
  &lt;li&gt;PBXResourcesBuildPhase: build resources&lt;/li&gt;
  &lt;li&gt;PBXShellScriptBuildPhase: run an sh shell script&lt;/li&gt;
  &lt;li&gt;PBXSourcesBuildPhase: build sources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of these, the most interesting to us is PBXSourcesBuildPhase.&lt;/p&gt;

&lt;h2 id=&quot;pbxsourcesbuildphase&quot;&gt;PBXSourcesBuildPhase&lt;/h2&gt;

&lt;p&gt;Without a PBXSourcesBuildPhase, an Xcode project is just an expensive container.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;4273EAB3D49C30C00AC5E8F3 /* Sources */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXSourcesBuildPhase&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;buildActionMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2147483647&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        ... zero or more PBXBuildFile entries
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;runOnlyForDeploymentPostprocessing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is just a list of PBXBuildFile entries, with a note as to whether this is done
in all builds or just for deployment post-processing (e.g. a PBXCopyFilesBuildPhase
would typically have this set).&lt;/p&gt;

&lt;h2 id=&quot;pbxbuildfile&quot;&gt;PBXBuildFile&lt;/h2&gt;

&lt;p&gt;This is the heart of building something in Xcode. There are several distinct kinds of
file builds.&lt;/p&gt;

&lt;p&gt;First is source code. This just points to a PBXFileReference object that contains the
information actually needed to build it. The indirection is no doubt useful to Apple,
since the file entry is also used in a PBXGroup for display purposes.
For convenience, we show the PBXBuildFile entry and its associated PBXFileReference entry.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* PBXBuildFile */
&lt;span class=&quot;nv&quot;&gt;36E0BEAEF615B5FB417FCCEE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXBuildFile&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0E6510F6A5C575A340791736&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

/* PBXFileReference */
&lt;span class=&quot;nv&quot;&gt;0E6510F6A5C575A340791736&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXFileReference&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;lastKnownFileType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sourcecode.cpp.cpp&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Slurp.cpp&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ../src/Slurp.cpp&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not everything is a source code file. We also link static libraries built from elsewhere.
Note in this case that the reference is to a PBXReferenceProxy, indicating that this
file is from a dependent project, which is itself pointed to by a PBXContainerItemProxy,
which finally ends up at a PBXFileReference.&lt;/p&gt;

&lt;p&gt;I don’t know what &lt;code&gt;remoteGlobalIDString&lt;/code&gt; is, I can’t find that GUID in any project in
my hierarchy. Premake just assigns a value to it based on the hash of the path name (its
idea of the hierarchy to this point).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* PBXBuildFile */
&lt;span class=&quot;nv&quot;&gt;FADCF8DBA93E5EC82C820F1B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXBuildFile&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 131E5623D4E73570AF0F6463&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

/* PBXReferenceProxy */
&lt;span class=&quot;nv&quot;&gt;131E5623D4E73570AF0F6463&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXReferenceProxy&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;fileType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; archive.ar&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; libzlib.a&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;remoteRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 89541513EE81084016813B53 /* PBXContainerItemProxy */&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; BUILT_PRODUCTS_DIR&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

/* PBXContainerItemProxy */
&lt;span class=&quot;nv&quot;&gt;89541513EE81084016813B53&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXContainerItemProxy&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;containerPortal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; C48570AFF3172E7CF2D39EEF&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;proxyType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;remoteGlobalIDString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0E765FC0A32BB52D9353D600&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;remoteInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; libzlib.a&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

/* PBXFileReference */
&lt;span class=&quot;nv&quot;&gt;C48570AFF3172E7CF2D39EEF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXFileReference&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;lastKnownFileType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;wrapper.pb-project&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;zlib.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ../packages/__pkg__/zlib/project/zlib.xcodeproj&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SOURCE_ROOT&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Frameworks are semi-magic libraries with versioning and header files used with the
libraries. For the build phase, this is linking a framework, so it just ends up directly
at the PBXFileReference, no indirection needed.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/* PBXBuildFile */
&lt;span class=&quot;nv&quot;&gt;F8E8DBA2B7DE2E6FF44F49E2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXBuildFile&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 8D6BC6AAF7BB96D78F7B2CEA&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

/* PBXFileReference */
&lt;span class=&quot;nv&quot;&gt;8D6BC6AAF7BB96D78F7B2CEA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PBXFileReference&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;lastKnownFileType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; wrapper.framework&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Cocoa.framework&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; System/Library/Frameworks/Cocoa.framework&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;sourceTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SDKROOT&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;xcconfigurationlist&quot;&gt;XCConfigurationList&lt;/h2&gt;

&lt;p&gt;An XCConfigurationList object is just a list of XCBuildConfiguration objects.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;1DEB928908733DD80010E9CD /* Build configuration list &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; PBXProject &lt;span class=&quot;s2&quot;&gt;&amp;quot;cppget&amp;quot;&lt;/span&gt; */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; XCConfigurationList&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;buildConfigurations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        B3315B92708358DFD7FBE9D2 /* Debug */,
        395E624C9324E6D9BB05808C /* Release */,
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;defaultConfigurationIsVisible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;defaultConfigurationName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Debug&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;defaultConfigurationName&lt;/code&gt; key indicates which configuration, by name, is the one to
pick as the default when a project is opened for the first time.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;defaultConfigurationIsVisible&lt;/code&gt; key, if set to non-zero, shows the default configuration
information in the UI.&lt;/p&gt;

&lt;h2 id=&quot;xcbuildconfiguration&quot;&gt;XCBuildConfiguration&lt;/h2&gt;

&lt;p&gt;An XCBuildConfiguration object contains the settings that describe the configuration. At its
minimum, a build configuration looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;B3315B92708358DFD7FBE9D2 /* Debug */ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; XCBuildConfiguration&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;buildSettings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;ONLY_ACTIVE_ARCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Debug&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is an example where a name needs to be unique, because, for example, the UI will look up
a configuration by name and not by UUID. Although, it must be doing some disambiguation,
because in a typical project there are two distinct XCConfigurationList objects, one for
the project object, and one for the PBXNativeTarget object.&lt;/p&gt;

&lt;p&gt;Any settings not specified here come from Xcode defaults. There is a cascade for configuration.
Inheritance is performed in the following order (lowest to highest precedence):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;platform defaults&lt;/li&gt;
  &lt;li&gt;project&lt;/li&gt;
  &lt;li&gt;xcconfig file for project&lt;/li&gt;
  &lt;li&gt;target&lt;/li&gt;
  &lt;li&gt;xcconfig file for target&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Value assignment is performed in the following order (lowest to highest precedence):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;platform defaults&lt;/li&gt;
  &lt;li&gt;xcconfig for project file&lt;/li&gt;
  &lt;li&gt;project&lt;/li&gt;
  &lt;li&gt;xcconfig for target&lt;/li&gt;
  &lt;li&gt;target&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The distinction is due to handling of inheritance. TBD: explain.&lt;/p&gt;

&lt;h1 id=&quot;xcworkspace-internal&quot;&gt;*.xcworkspace (internal)&lt;/h1&gt;

&lt;p&gt;It is possible to just have an .xcodeproj visible to the desktop, and have a .xcworkspace directory
inside the .xcodeproj directory. In this case, the workspace is always called &lt;code&gt;project.xcworkspace&lt;/code&gt;
and is at the root directory of the project. This is what you get if you use the Xcode wizard to
create a new project first, instead of creating a workspace and adding projects to it.&lt;/p&gt;

&lt;p&gt;The simplest possible arrangement is to have the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;one.xcodeproj/
├── project.pbxproj
└── project.xcworkspace/
    └── contents.xcworkspacedata&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;project.xcworkspace/contents.xcworkspacedata&lt;/code&gt; look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Workspace&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;version =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileRef&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;location =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;self:one.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileRef&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Workspace&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;self&lt;/code&gt; tag points to the top level of the &lt;code&gt;one.xcodeproj&lt;/code&gt; directory. The &lt;code&gt;project.pbxproj&lt;/code&gt; is
as detailed above.&lt;/p&gt;

&lt;h1 id=&quot;to-do&quot;&gt;To-do&lt;/h1&gt;

&lt;p&gt;Write a DTD for &lt;code&gt;contents.xcworkspacedata&lt;/code&gt; files. And maybe a grammar; are DTDs comprehensive
enough that they can serve as prescriptive grammars? Looks like not really. Or maybe an XML Schema?&lt;/p&gt;

&lt;p&gt;Compile a list of more Xcode versions matched up againts &lt;code&gt;objectVersion&lt;/code&gt;. What was before objectVersion 45?&lt;/p&gt;

&lt;p&gt;A few Xcode projects to test a xcworkspace parser against:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mattt/MsgPackSerialization/blob/master/MsgPackSerialization.xcworkspace/contents.xcworkspacedata&quot;&gt;https://github.com/mattt/MsgPackSerialization/blob/master/MsgPackSerialization.xcworkspace/contents.xcworkspacedata&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MSOpenTech/orc-for-ios/blob/master/orc.xcworkspace/contents.xcworkspacedata&quot;&gt;https://github.com/MSOpenTech/orc-for-ios/blob/master/orc.xcworkspace/contents.xcworkspacedata&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/seatgeek/SGAPI/blob/master/SGAPI.xcworkspace/contents.xcworkspacedata&quot;&gt;https://github.com/seatgeek/SGAPI/blob/master/SGAPI.xcworkspace/contents.xcworkspacedata&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://opensource.apple.com//source/libutil/libutil-30/libutil.xcodeproj/project.xcworkspace/contents.xcworkspacedata&quot;&gt;http://opensource.apple.com//source/libutil/libutil-30/libutil.xcodeproj/project.xcworkspace/contents.xcworkspacedata&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/StefanLage/Location-Generator/blob/master/Location%20Generator.xcodeproj/project.xcworkspace/contents.xcworkspacedata&quot;&gt;https://github.com/StefanLage/Location-Generator/blob/master/Location%20Generator.xcodeproj/project.xcworkspace/contents.xcworkspacedata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few Xcode projects to test a xcodeproj parser against:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jacobsimeon/Pygments/blob/master/Pygment.xcodeproj/project.pbxproj&quot;&gt;https://github.com/jacobsimeon/Pygments/blob/master/Pygment.xcodeproj/project.pbxproj&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;There is no formal documentation. Others have done their share of reverse engineering the project format,
for their needs. Premake and CMake generate project files, CocoaPods is a package manager for Mac OS/iOS
developers, and so on. Here is a collection of what other people have written.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mokacoding.com/blog/xcode-projects-and-workspaces/&quot;&gt;A dive into Xcode projects and workspaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.monobjc.net/xcode-project-file-format.html&quot;&gt;Xcode Project File Format&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A series of articles on the Xcode project format:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://danwright.info/blog/2010/10/xcode-pbxproject-files/&quot;&gt;A brief look at the Xcode project format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://danwright.info/blog/2010/10/xcode-pbxproject-files-2/&quot;&gt;More on the Xcode project format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://danwright.info/blog/2010/10/xcode-pbxproject-files-3/&quot;&gt;Xcode project object UUIDs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://danwright.info/blog/2012/10/&quot;&gt;Xcode build configurations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://danwright.info/blog/2013/01/&quot;&gt;Xcode project files (bsxtools)&lt;/a&gt; - points to Github repo &lt;a href=&quot;https://github.com/danwr/bsxtools&quot;&gt;danwr/bsxtools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.openoffice.org/xml/xml_specification.pdf&quot;&gt;OpenOffice.org XML File Format 1.0&lt;/a&gt;. An example of a complex XML file format.&lt;/p&gt;

&lt;p&gt;A number of projects that can manipulate Xcode projects&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rayh/xcoder&quot;&gt;XCoder&lt;/a&gt;. A no-longer-maintained Ruby project to manipulate Xcode
projects. Lots of comments in the source, though.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rubydoc.info/gems/xcodeproj&quot;&gt;Xcodeproj&lt;/a&gt;. This is the library used by CocoaPods to
create static libraries from scratch for iOS and OSX. Github is &lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj&quot;&gt;https://github.com/CocoaPods/Xcodeproj&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alunny/node-xcode&quot;&gt;node-xcode&lt;/a&gt;. Includes a PEG grammar.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kronenthaler/mod-pbxproj&quot;&gt;kronenthaler/mod-pbxproj&lt;/a&gt;. Python.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/appsquickly/XcodeEditor&quot;&gt;appsquickly/XcodeEditor&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;. This is a package manager for Swift and Objective-C projects. Source
code is on Github at &lt;a href=&quot;https://github.com/CocoaPods/CocoaPods&quot;&gt;CocoaPods/CocoaPods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/OldStylePlists/OldStylePLists.html&quot;&gt;Old-Style ASCII Property Lists&lt;/a&gt;. Except this doesn’t seem to match observed project.pbxproj
files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pewpewthespells.com/blog/buildsettings.html&quot;&gt;Xcode Build Settings Reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pewpewthespells.com/blog/xcconfig_guide.html&quot;&gt;The Unofficial Guide to xcconfig files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Workspace.html&quot;&gt;Xcode Workspace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/legacy/library/documentation/DeveloperTools/Conceptual/XcodeBuildSystem/Xcode_Build_System.pdf&quot;&gt;Xcode Build System Guide (legacy)&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Apr 2016 20:00:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2016/04/16/xcode-xcworkspace-and-xcodeproj.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/04/16/xcode-xcworkspace-and-xcodeproj.html</guid>
        
        <category>programming</category>
        
        <category>Xcode</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;C++ streams are great in theory.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/cpp/comments/4eu1k3/what_would_iostreams_look_like_without/&quot;&gt;What would iostreams look like without inheritance? (What would a “properly designed” iostreams look like?)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4187.html&quot;&gt;C++ Ostream Buffers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cppformat.github.io/latest/index.html&quot;&gt;C++ Format&lt;/a&gt;: “C++ Format (cppformat) is an open-source formatting library for C++.”. Also see Github repo &lt;a href=&quot;https://github.com/cppformat/cppformat&quot;&gt;cppformat/cppformat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/seanmiddleditch/formatxx&quot;&gt;seanmiddleditch/formatxx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://caca.zoy.org/wiki/libcaca&quot;&gt;libcaca&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/thelink2012/any&quot;&gt;Any&lt;/a&gt;. “This is a implementation of N4562 std::experimental::any (merged into C++17) for C++11 compilers.”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jyt.io/&quot;&gt;Jyt&lt;/a&gt;. “Jyt is a just-in-time compiler for C++”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/microsoft/cpprestsdk&quot;&gt;Microsoft/cpprestsdk&lt;/a&gt;. “The C++ REST SDK is a Microsoft project for cloud-based client-server communication in native code using a modern asynchronous C++ API design. This project aims to help C++ developers connect to and interact with services.”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://whoshuu.github.io/cpr/&quot;&gt;Curl for People&lt;/a&gt;. “C++ Requests is a simple wrapper around libcurl inspired by the excellent Python Requests project.”. Also see Github at: &lt;a href=&quot;https://github.com/whoshuu/cpr&quot;&gt;whoshuu/cpr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://think-async.com/Urdl/doc/html/index.html&quot;&gt;Urdl&lt;/a&gt;. “Urdl is a cross-platform C++ library for downloading web content using a URL. It provides an easy-to-use extension to standard C++ iostreams and an asynchronous interface for use with Boost.Asio.”. Also see Github at: &lt;a href=&quot;https://github.com/chriskohlhoff/urdl&quot;&gt;chriskohlhoff/urdl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/google/gumbo-parser&quot;&gt;google/gumbo-parser&lt;/a&gt;. Gumbo is an HTML5 parsing library written in pure C99 with no outside dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lazytiger/gumbo-query&quot;&gt;lazytiger/gumbo-query&lt;/a&gt;. “c++ library to provide jQuery style api for gumbo library”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pugixml.org/&quot;&gt;pugixml&lt;/a&gt;. “Light-weight, simple and fast XML parser for C++ with XPath support”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.sigurdhsson.org/2016/02/deploying-cpp-documentation/&quot;&gt;Deploying C++ documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/michaeljones/breathe&quot;&gt;michaeljones/breathe&lt;/a&gt;. “ReStructuredText and Sphinx bridge to Doxygen &lt;a href=&quot;http://breathe.readthedocs.org/&quot;&gt;http://breathe.readthedocs.org/&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jessevdk/cldoc&quot;&gt;jessevdk/cldoc&lt;/a&gt;. “clang based documentation generator for C and C++”.&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Apr 2016 04:28:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2016/04/16/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/04/16/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/lunixbochs/usercorn&quot;&gt;Usercorn&lt;/a&gt;. User-space system emulator, backed by Unicorn.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.unicorn-engine.org/&quot;&gt;Unicorn&lt;/a&gt;. The ultimate CPU emulator. Unicorn is a lightweight multi-platform, multi-architecture CPU emulator framework.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.capstone-engine.org/&quot;&gt;Capstone&lt;/a&gt;. The Ultimate Disassembler. Capstone is a lightweight multi-platform, multi-architecture disassembly framework.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mikegerwitz.com/2016/04/GNU-kWindows&quot;&gt;GNU/kWindows&lt;/a&gt;. I find this line of thinking somewhat farcical.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/martanne/vis&quot;&gt;vis&lt;/a&gt;. A vim-like text editor. “80% of vim’s features in 1% of the code”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.musl-libc.org/&quot;&gt;musl&lt;/a&gt;. A libc (C library as described in ISO C and POSIX standards) to replace glibc; MIT license. Designed for static linking. “A new standard library to power a new generation of Linux-based devices”. &lt;a href=&quot;http://www.etalabs.net/compare_libcs.html&quot;&gt;Comparison&lt;/a&gt; of muscl to uClibc, dietlibc and glibc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.gnu.org/software/ncurses/&quot;&gt;ncurses&lt;/a&gt;. Now under the GNU project, but still MIT-X11 license, whatever that means: &lt;a href=&quot;http://invisible-island.net/ncurses/ncurses-license.html&quot;&gt;ncurses-license&lt;/a&gt;. Somewhat disparaging to Eric Raymond.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://imgur.com/gallery/vqUQ5&quot;&gt;Fake O’Reilly book covers&lt;/a&gt;. Funny. I should print some of these onto real books.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.leonerd.org.uk/code/libtickit/&quot;&gt;libtickit&lt;/a&gt;. Terminal Interface Construction Kit, apparently supplanting &lt;a href=&quot;http://www.leonerd.org.uk/code/libtermkey/&quot;&gt;libtermkey&lt;/a&gt;, so it is presumably still MIT license.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.inf.puc-rio.br/~roberto/lpeg/&quot;&gt;LPeg&lt;/a&gt;. Parsing Expression Grammars For Lua.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/graph-commons/analyzing-the-npm-dependency-network-e2cf318c1d0d#.c0355ll1g&quot;&gt;Analyzing the NPM dependency network&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/anvaka/pm&quot;&gt;Software Galaxies&lt;/a&gt;. Visualizations of major software package managers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://thebookofshaders.com/&quot;&gt;The Book of Shaders&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rg3.github.io/youtube-dl/&quot;&gt;youtube-dl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sec.gov/Archives/edgar/data/1018724/000119312516530910/d168744dex991.htm&quot;&gt;Amazon 2015 shareholder letter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://events.linuxfoundation.org/sites/events/files/slides/elc-2016.pdf&quot;&gt;Porting Linux to a new processor architecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Dekken/maiken&quot;&gt;maiken&lt;/a&gt;. Cross platform build tool for C/C++/Obj-C/C#/CUDA/opencl. Also see &lt;a href=&quot;https://raw.githubusercontent.com/Dekken/maiken/master/README.noformat&quot;&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/vcblog/2016/04/06/clangc2-we-need-your-advice/&quot;&gt;Clang/C2: We need your advice!&lt;/a&gt;. Is Clang/C2 real yet?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://clang.llvm.org/doxygen/group__CINDEX.html&quot;&gt;libclang&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/papers/ghc-shake/ghc-shake.pdf&quot;&gt;Non-recursive Make Considered Harmful&lt;/a&gt;. A paper about a recursive make system implemented as a new version of the Haskell build system.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/commandline/2016/04/06/bash-on-ubuntu-on-windows-download-now-3/&quot;&gt;Bash on Ubuntu on Windows&lt;/a&gt;. Available now. Windows 10.&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Apr 2016 08:46:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2016/04/09/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/04/09/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Rules for cross-platform programming</title>
        <description>&lt;p&gt;Writing reusable code is in general a good thing to do, and the number one lesson there is about
managing dependencies. Writing cross-platform code has a different set of challenges, and is best
considered as a super-set of the reusable code problem.&lt;/p&gt;

&lt;p&gt;This is a “part 1 of N” series”. Consider this the notes for that book you’ve always wished existed.&lt;/p&gt;

&lt;h1 id=&quot;use-utf-8-as-your-text-format&quot;&gt;Use UTF-8 as your text format&lt;/h1&gt;

&lt;p&gt;Unicode has grown into its original arrogant name of “Universal character set”. Of all the encodings
of Unicode, UTF-8 is the most practical. Use UTF-8 as your program’s character set, keep all your
strings in UTF-8. This includes any of your own data you read and write.&lt;/p&gt;

&lt;p&gt;Convert to the platform character set/encoding on input and output. When you get a string from an
operating system function, convert it to UTF-8. When you need to output a string, convert it to
what the platform needs.&lt;/p&gt;

&lt;p&gt;By doing this, you’ll find that all your special cases are kept at the boundaries of your code. You’ll
also ensure that you only have N conversions (where N is the number of distinct operating system
encodings that you support), and not creep into N^2.&lt;/p&gt;

&lt;p&gt;This task is actually fairly easy on modern Linux and Mac OS X, which both use UTF-8 as their
platform character set (or can be told to do so). The best current way to write Windows programs is
as UCS16-LE (their “Unicode” setting is really 16-bit UCS stored as little-endian characters). It’s
best to write a set of wrappers to convert to/from “native” (your format), and have that be passthrough
functions when running on a platform that uses UTF-8.&lt;/p&gt;

&lt;p&gt;At some point soon, I’ll create a package that does this, that follows the other dictum of “carefully
manage dependencies”. There are larger projects like iconv and icu that can be bent to this task, but
they lack the easy helper functions we would need to make this transparent in our code.&lt;/p&gt;

&lt;h1 id=&quot;a-file-names-is-the-sequence-of-characters-the-os-gave-you&quot;&gt;A file names is the sequence of characters the OS gave you&lt;/h1&gt;

&lt;p&gt;Despite appearances, file names and the paths constructed from them aren’t really text. The end
user thinks of names this way, of course, because file names by and large are meant for use by
people. But a file name is really a sequence of octets that a filesystem has matched up with
an file entry. If you change any of the bytes in the file name, then you will find that you can no longer
find that file entry, and then the user will think the file is missing.&lt;/p&gt;

&lt;p&gt;Unfortunately, while we can usually preserve meaning in round-trips between encodings, it is all too easy
to change byte sequences. Consider Mac OS X filenames - these are UTF-8 strings stored in a mostly but
not completely decomposed form (&lt;a href=&quot;https://developer.apple.com/library/mac/qa/qa1173/_index.html&quot;&gt;Text Encodings in VFS&lt;/a&gt;).
And while that is possible to manage, many filesystems don’t actually specify the name encoding, so it’s
quite likely for you to mangle filenames by making incorrect assumptions.&lt;/p&gt;

&lt;p&gt;The best approach is to never alter filenames, but to leave them as octet strings. This means several
things. First, you’ll manipulate paths via path functions, and not as strings. Second, if you need to
output a string, you’ll make your best guess as to the encoding and convert it as you need.&lt;/p&gt;

&lt;p&gt;This is a little awkward, but means that your code will be robust across encodings. It does mean that you
have a challenge if you need to record paths in config files or databases. But since paths are only relevant
to the filesystem they came from, I suggest that you record the paths as the original byte sequences.&lt;/p&gt;

&lt;p&gt;Some times programs can dictate the names that are used for filenames, but this is very rare, and not worth
considering.&lt;/p&gt;

&lt;p&gt;When I say that file names are tied to file systems, I mean specifically that. If you copy a file to another
file system, it now potentially has two different sets of octets it is known by, depending on the limitations
of each filesystem. It is the name that the copy is created under that is the name on the destination
filesystem. Most of the time, the octets for the source file and the octets for the destination file are
the same. This is not guaranteed, so do not rely on it.&lt;/p&gt;

&lt;p&gt;Well-known filenames are a different matter. Not all filenames are discovered, some are predetermined. However,
that doesn’t make your life any easier. As long as there can be user-defined filenames, it’s best to treat
all filenames by the same rule.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Apr 2016 09:04:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2016/04/03/rules-for-cross-platform-programming.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/04/03/rules-for-cross-platform-programming.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.vagrantup.com/docs/&quot;&gt;VAGRANT DOCUMENTATION&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://atlas.hashicorp.com/boxes/search&quot;&gt;Discover Vagrant Boxes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.osteel.me/posts/2015/01/25/how-to-use-vagrant-on-windows.html&quot;&gt;How to use Vagrant on Windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unbreakable cryptography is both easy and hard. Unbreakable - given a long stream of random bits,
XOR it with your data. The result is unbreakable - if you have random bits, and both sides need
the same random bits. But if you want to communicate with a known person, and you expect that both
sides can keep their bitpad secret, then your communication will look like noise, and be unbreakable.
This is why authorities trying to backdoor crypto algorithms have different motives than the stated - they
don’t want to catch terrorists this way, they want to read all communications, for no other reason than
to prop up the current regime, whatever that is.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://openfortress.org/cryptodoc/random/&quot;&gt;How To Generate Truly Random Bits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;ftp://ftp.ietf.org/rfc/rfc1750.txt&quot;&gt;Randomness Recommendations for Security&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://world.std.com/~reinhold/truenoise.html&quot;&gt;Random Noise Sources from Diceware.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.maximintegrated.com/en/app-notes/index.mvp/id/3469&quot;&gt;Building a Low-Cost White-Noise Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cryogenius.com/hardware/rng/&quot;&gt;Hardware Random Number Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://scruss.com/blog/2013/06/07/well-that-was-unexpected-the-raspberry-pis-hardware-random-number-generator/&quot;&gt;“WELL, THAT WAS UNEXPECTED…”: THE RASPBERRY PI’S HARDWARE RANDOM NUMBER GENERATOR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://scruss.com/blog/2013/06/08/artisanal-hardware-random-number-generator/&quot;&gt;ARTISANAL HARDWARE RANDOM NUMBER GENERATOR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://robseward.com/itp/adv_tech/random_generator/&quot;&gt;Build your own True Random Number Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://robseward.com/misc/RNG2/&quot;&gt;Make your own True Random Number Generator 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://electronicdesign.com/learning-resources/understanding-intels-ivy-bridge-random-number-generator&quot;&gt;Understanding Intel’s Ivy Bridge Random Number Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.instructables.com/id/A-Raspberry-Pi-based-Truly-Random-Number-Generator/&quot;&gt;A Raspberry Pi-based Truly Random Number Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/endolith/2568571&quot;&gt;Arduino hardware true random number generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.instructables.com/id/Arduino-True-Random-Number-Generator/&quot;&gt;Arduino True Random Number Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.johngustafson.net/presentations/Multicore2016-JLG.pdf&quot;&gt;A Radical Approach to Computation with Real Numbers&lt;/a&gt;. “Unums version 2.0”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://iovisor.github.io/bcc/&quot;&gt;BCC: Dynamic Tracing Tools for Linux&lt;/a&gt;. Built on top of BPF, requires Linux 4.1 or higher.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.eecs.berkeley.edu/~rcs/research/interactive_latency.html&quot;&gt;Latency Numbers Every Programmer Should Know&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Apr 2016 01:24:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2016/04/02/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/04/02/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2007689/is-there-a-standard-file-extension-for-msbuild-files&quot;&gt;Is there a standard file extension for MSBuild files?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/465087/Introduction-to-MSBuild-Part&quot;&gt;ntroduction to MSBuild - Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://matroska.org/technical/specs/rfc/index.html&quot;&gt;EBML RFC (Draft)&lt;/a&gt;. Also see &lt;a href=&quot;https://github.com/Matroska-Org/libebml&quot;&gt;Matroska-Org/libebml&lt;/a&gt; for C++ EBML parser with LGPL license.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/prep/standards/html_node/Configuration.html&quot;&gt;How Configuration Should Work&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/prep/standards/html_node/Directory-Variables.html&quot;&gt;Variables for Installation Directories&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tldp.org/LDP/LG/current/smith.html&quot;&gt;configure; make; make install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tldp.org/HOWTO/Software-Building-HOWTO-3.html&quot;&gt;Using Make&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://robots.thoughtbot.com/the-magic-behind-configure-make-make-install&quot;&gt;The magic behind configure, make, make install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.snake.net/software/imake-stuff/imake-faq.html&quot;&gt;imake Frequently Asked Questions&lt;/a&gt;. Except I think imake is dead.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Build_System&quot;&gt;GNU Build System&lt;/a&gt;. Mainly for the picture.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://inti.sourceforge.net/tutorial/libinti/autotoolsproject.html&quot;&gt;Building a GNU Autotools Project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codecoffee.com/tipsforlinux/articles/27.html&quot;&gt;Understanding software Installation (configure, make, make install)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chen3feng/typhoon-blade/&quot;&gt;chen3feng/typhoon-blade&lt;/a&gt;. Build system inspired by Google paper. Also see projects that blade can build at &lt;a href=&quot;https://github.com/chjp2046/thirdparty&quot;&gt;chjp2046/thirdparty&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/antirez/linenoise&quot;&gt;antirez/linenoise&lt;/a&gt;. A BSD licensed readline replacement. Halleluja!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;ggreer/the_silver_searcher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/stedolan/jq&quot;&gt;stedolan/jq&lt;/a&gt;. Command-line JSON processor http://stedolan.github.io/jq/&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://libevent.org/&quot;&gt;libevent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/libuv/libuv&quot;&gt;libuv/libuv&lt;/a&gt;. Also see &lt;a href=&quot;http://nikhilm.github.io/uvbook/introduction.html&quot;&gt;An Introduction to libuv&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.kegel.com/c10k.html&quot;&gt;The C10K problem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wishstudio/flinux&quot;&gt;wishstudio/flinux&lt;/a&gt;. Foreign LINUX is a dynamic binary translator and a Linux system call interface emulator for the Windows platform.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nanomsg/nanomsg&quot;&gt;nanomsg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nodejs/http-parser&quot;&gt;nodejs/http-parser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/clibs/clib&quot;&gt;clibs/clib&lt;/a&gt;. Package manager for the C programming language. The Wiki has a list of &lt;a href=&quot;https://github.com/clibs/clib/wiki/Packages&quot;&gt;Packages&lt;/a&gt;. See &lt;a href=&quot;https://medium.com/@tjholowaychuk/introducing-clib-b32e6e769cb3#.t6bd5p3qo&quot;&gt;Introducing Clib&lt;/a&gt; for an introductory article. See older article &lt;a href=&quot;https://blog.ashworth.in/the-advent-of-clib-the-c-package-manager/&quot;&gt;The Advent of Clib: the C Package Manager&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/vmg/sundown&quot;&gt;https://github.com/vmg/sundown&lt;/a&gt;. Markdown processing library in C. See original &lt;a href=&quot;http://fossil.instinctive.eu/libsoldout/index&quot;&gt;upskirt/libsoldout&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Mar 2016 17:43:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2016/03/28/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/03/28/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

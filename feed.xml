<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world's questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 05 Jun 2017 19:24:13 -0700</pubDate>
    <lastBuildDate>Mon, 05 Jun 2017 19:24:13 -0700</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.loc.gov/preservation/digital/formats/fdd/browse_list.shtml&quot;&gt;Sustainability of Digital Formats: Planning for Library of Congress Collections&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MBOX is the de-facto standard for archiving email.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.loc.gov/preservation/digital/formats/fdd/fdd000383.shtml&quot;&gt;LOC: MBOX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/rfc/rfc4155.txt&quot;&gt;RFC 4155&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qmail.org/qmail-manual-html/man5/mbox.html&quot;&gt;qmail mbox description&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.loc.gov/thesignal/2013/07/the-what-of-email-archiving/&quot;&gt;The “What” of Email Archiving&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Git grafts is old but still exists&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://git.wiki.kernel.org/index.php/GraftPoint&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ben.straubnet.net/post/939181602/git-grafting-repositories&quot;&gt;Git: Grafting repositories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.atlassian.com/blog/2015/08/grafting-earlier-history-with-git/&quot;&gt;Collating repositories or grafting earlier history with Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6800692/how-do-git-grafts-and-replace-differ-are-grafts-now-deprecated&quot;&gt;How do git grafts and replace differ? (Are grafts now deprecated?)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git replace&lt;/code&gt; is the newer mechanism, and can be pushed to others (grafts are local-only)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://git-scm.com/docs/git-replace&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git filter-branch&lt;/code&gt; will flatten any entries in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/info/grafts&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;refs/replace/&lt;/code&gt;, making them permanent.
This is a useful technique to join history together.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.atlassian.com/blog/2015/05/the-power-of-git-subtree/&quot;&gt;The power of Git subtree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In particular, &lt;code class=&quot;highlighter-rouge&quot;&gt;git subtree&lt;/code&gt; is distinct from subtree merges. I’m now more enlightened, although I need to experiment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://makingsoftware.wordpress.com/2013/02/16/using-git-subtrees-for-repository-separation/&quot;&gt;Using Git subtrees for repository separation&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 22 May 2017 14:45:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/05/22/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/05/22/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Autotools must die</title>
        <description>&lt;p&gt;I want to kill Autotools in the best way - automatically replace every usage
of it with something much better. So I probably need to understand it first
(although the final approach is to use machine learning for cases like this).&lt;/p&gt;

&lt;p&gt;Let’s be clear up front - things like configure are an archaic leftover of
an older time where systems actively fought with each other to be different, or
were poorly assembled and had no active help for building software. The world
has changed, and we should continue to move towards a world where we don’t need
a system that finds where header files are, or if certain tools are installed.
That’s absurd. Use packages to declare dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/automake/manual/html_node/index.html&quot;&gt;automake&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/automake/manual/html_node/Basic-Installation.html&quot;&gt;Basic Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/automake/manual/html_node/Creating-amhello.html#Creating-amhello&quot;&gt;amehllo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/automake/manual/html_node/General-Operation.html&quot;&gt;General Operation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://inti.sourceforge.net/tutorial/libinti/autotoolsproject.html&quot;&gt;Building a GNU Autotools Project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GNU mandates that &lt;code class=&quot;highlighter-rouge&quot;&gt;AUTHORS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NEWS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ChangeLog&lt;/code&gt; files exist in the top level, and Automake will report an error if they are missing. This is pretty heavy-handed. Oh, but
there is an option to disable it; I think it should off by default and enabled for those
strict folks. But this definitely says “Autotools is for making GNU projects; we guess you can
use this, if you must”.&lt;/p&gt;

&lt;p&gt;It looks like this is the development flow:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aclocal
$ automake --add-missing
$ autoconf
$ ./autogen.sh
$ ./configure
$ make
$ make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aclocal&lt;/code&gt; creates &lt;code class=&quot;highlighter-rouge&quot;&gt;aclocal.m4&lt;/code&gt;.&lt;code class=&quot;highlighter-rouge&quot;&gt;automake&lt;/code&gt; creates &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile.in&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;configure&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Files created by hand: &lt;code class=&quot;highlighter-rouge&quot;&gt;configure.ac&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile.am&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Questions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;some docs reference &lt;code class=&quot;highlighter-rouge&quot;&gt;aclocal&lt;/code&gt;, is this still a thing?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/automake/manual/html_node/VPATH-Builds.html&quot;&gt;VPATH builds&lt;/a&gt;. I call this “building software grows up”.&lt;/p&gt;

&lt;p&gt;Ugg, Autotools gets it backwards - it calls the machine on which you build the “build platform”,
and it calls the machine on which the compiled program runs the “host platform”. This is
backwards from “host platform” being the machine on which you build and the “target platform”
being the machine that you run the compiled program on. I guess it’s all relative, and so
we should all agree. Maybe the answer is to just drop the phrase “host platform”, since it
does sound a little vague.&lt;/p&gt;

&lt;p&gt;GNU does specify three options&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--build
--target
--host
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;--build&lt;/code&gt; is the system on which the package is built (and why can’t this be
auto-determined?), &lt;code class=&quot;highlighter-rouge&quot;&gt;--target&lt;/code&gt; is the system that built tools will run on, and then
&lt;code class=&quot;highlighter-rouge&quot;&gt;--host&lt;/code&gt; is the system on which final output runs. This is useful in the edge case
where the build process creates a cross-compiler, e.g. we are on system A, the
intermediate tools (like GCC) run on system B, and the final output is intended for
system C. I’m sure there are real-world cases for this.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 May 2017 10:30:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/05/19/autools-must-die.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/05/19/autools-must-die.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.buckaroo.pm/&quot;&gt;Buckaroo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://buckbuild.com/&quot;&gt;Buck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/lessons-learned-from-porting-300-projects-to-buck-build-ff6463b65142&quot;&gt;Lessons Learned from Porting 300 C/C++ Projects to Buck buckbuild&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/7-reasons-to-use-buck-build-5b44d7413585&quot;&gt;7 Reasons to Use Buck Build&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.codereviewhub.com/&quot;&gt;CodeReviewHub.com&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 18 May 2017 20:45:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/05/18/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/05/18/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Standard libraries</title>
        <description>&lt;p&gt;Before the modern era, C evolved an ecosystem that turned into the POSIX standards
and the C Standard Library. However, this was an incomplete solution, in that there
was a specification, but every vendor had to implement their own versions. The
infinite varieity of what was actually available to any one person
directly led to the abomination that is autoconf. Still, it was all we had, until
the 1990s.&lt;/p&gt;

&lt;p&gt;There are many reasons for the success of new languages, but in the past 10 years,
it seems clear that some of the success is due to the libraries that are easily
accessible to programmers in that language.&lt;/p&gt;

&lt;p&gt;This started with TeX, actually, which is not something you think of as a programming
language, even though it is technically (Turing-complete, that is). TeX was
successful for two reasons. First, it was designed and written by Donald Knuth;
he really revolutionized the writing of scientific papers. The story I’ve often heard
told is that TeX was written to make writing the next volumes of The Art and Science
of Computer Programming easier.&lt;/p&gt;

&lt;p&gt;But TeX also had CTAN, the Comprehensive TeX Network. This meant that TeX users could
share libraries of TeX code. This really helped TeX’s growth in popularity. But it
also had another side-effect; it helped Perl.&lt;/p&gt;

&lt;p&gt;Perl has CPAN, and without CPAN, even with being the first “language of Internet plumbing”,
Perl probably would have stayed a niche language. And CPAN was directly inspired by CTAN.
With CPAN, Perl entered a long virtuous cycle; new users wrote in Perl because there was
a large library that could be easily accessed, and that library continued to grow and grow.
Perl has since faded due to the lack of the language itself.&lt;/p&gt;

&lt;p&gt;However, there’s a lesson here that has been mis-learned. It is not package archives
that make languages successful. It’s not having an ecosystem; it’s what’s in the ecosystem.&lt;/p&gt;

&lt;p&gt;It’s existing code that you can use to solve your problem. And that means it has to be usable
code.&lt;/p&gt;

&lt;p&gt;What Python got right more than most others is that their core code is pretty comprehensive,
and is constantly argued over and refined by a group of people who are good at APIs.
By contrast, the libraries added to the C++ standard come to the committee largely baked,
and thus retain lots of rough edges; and are few in number compared to what Python has.&lt;/p&gt;

&lt;h2 id=&quot;c-standard-library&quot;&gt;C Standard Library&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/C_standard_library&quot;&gt;C standard library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www-s.acm.illinois.edu/webmonkeys/book/c_guide/&quot;&gt;The C Library Reference Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;posix&quot;&gt;POSIX&lt;/h2&gt;

&lt;p&gt;At first, POSIX just meant this: IEEE Std 1003.1-1988. I didn’t know this, but Richard
Stallman named it (it was going to be IEEE-IX). POSIX started as a standardization for
Unix.&lt;/p&gt;

&lt;p&gt;POSIX and C are joined at the hip, so this could be thought of as the C libraries.&lt;/p&gt;

&lt;p&gt;Mostly the lessons from POSIX are “don’t do it that way”, except that this is the
single most widely used set of interfaces in the programming world; many later system
provide POSIX compatibility of one form or another. For example, many low-level networking
libraries in newer languages just transliterate POSIX networking calls into their own
language.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.opengroup.org/austin/&quot;&gt;Austin Group&lt;/a&gt; as the home of the POSIX standards.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/&quot;&gt;IEEE Std 1003.1™-2008, 2016 Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;java&quot;&gt;Java&lt;/h2&gt;

&lt;p&gt;I guess I have to.&lt;/p&gt;

&lt;h2 id=&quot;perl&quot;&gt;Perl&lt;/h2&gt;

&lt;p&gt;Evidently Perl 6 is a thing.&lt;/p&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;p&gt;The gold standard?&lt;/p&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;

&lt;p&gt;The Ruby Standard Library lacks coherent documentation. There’s a lot there, but
it’s somewhat scattered - almost like having docstrings.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ruby-doc.org/&quot;&gt;Help and documentation for the Ruby programming language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That said, there are interesting patterns in their libraries, and the Core library
(that built in, doesn’t need a &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; to access) is surprisingly large.&lt;/p&gt;

&lt;p&gt;The Standard Library has very oddball modules in it; some don’t seem like they
should be standard (e.g. Abbrev, LUSolv, Etc, Win32OLE). There’s also what looks like crap: see
extmk, un.&lt;/p&gt;

&lt;p&gt;The balance between what’s in the Standard Library and what’s a standalone gem (their
name for a package) is not as clear as in other languages. It could just be a
representation of the relative effort spent in Ruby vs other languages.&lt;/p&gt;

&lt;h2 id=&quot;go&quot;&gt;Go&lt;/h2&gt;

&lt;p&gt;New package manager?&lt;/p&gt;

&lt;h2 id=&quot;rust&quot;&gt;Rust&lt;/h2&gt;

&lt;p&gt;Need to learn. May be best of breed?&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.modulecounts.com/&quot;&gt;Module Counts&lt;/a&gt; tracks libraries in popular package
repositories. This is a proxy for languages, since many languages have a single
popular repository.&lt;/p&gt;

&lt;p&gt;Package repositories by language:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C#
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.nuget.org/&quot;&gt;nuget&lt;/a&gt; has 80K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Clojure
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://clojars.org/&quot;&gt;Clojars&lt;/a&gt; has 19K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;D
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://code.dlang.org/&quot;&gt;DUB&lt;/a&gt; has 1K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Erlang
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://hex.pm/&quot;&gt;Hex&lt;/a&gt; has 4K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Go
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://gopm.io/&quot;&gt;Gopm Registry&lt;/a&gt; has 19K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Haskell
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://hackage.haskell.org/&quot;&gt;Hackage&lt;/a&gt; has 11K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Java
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://search.maven.org/&quot;&gt;Maven Central&lt;/a&gt; has 188K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Javascript
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; has 455K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Perl
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.cpan.org/&quot;&gt;CPAN&lt;/a&gt; has 35K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PHP
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt; has 140K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Python
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi&quot;&gt;PyPI&lt;/a&gt; has 108K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;R
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://cran.r-project.org/&quot;&gt;CRAN&lt;/a&gt; has 10K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ruby
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt; has 132K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rust
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://crates.io/&quot;&gt;Cargo&lt;/a&gt; has 9K packages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 18 May 2017 14:50:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/05/18/standard-libraries.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/05/18/standard-libraries.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://familywhitfield.co.uk/wordpress/2007/07/07/a-simple-perforce-backup-script-for-the-home/&quot;&gt;A simple Perforce backup script for the home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.tsunanet.net/2012/10/perforce-killed-my-productivity-again.html&quot;&gt;Perforce killed my productivity. Again.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.hep.by/gnu/rcs/Concepts.html&quot;&gt;RCS - Concepts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://search.cpan.org/~bennie/Rcs-Parser-0.08/lib/Rcs/Parser.pm&quot;&gt;Rcs-Parser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/27426592/in-the-rcs-file-format-in-a-cvs-repo-what-does-x-y-0-2-as-a-revision-indicate&quot;&gt;In the RCS file format in a CVS repo, what does x.y.0.2 as a revision indicate?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.gsp.com/cgi-bin/man.cgi?topic=rcsfile&quot;&gt;rcsfile - format of RCS file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/rcs/manual/html_node/File-format.html&quot;&gt;rcs - File format&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.tsunanet.net/2017/05/getting-cash-without-selling-stocks.html&quot;&gt;Getting cash without selling stocks&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 16 May 2017 17:50:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/05/16/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/05/16/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Patterns for network operations</title>
        <description>&lt;p&gt;This is a grandiose topic, so I’ll focus on a subset. What’s the best way to do HTTP operations?
As a reminder, these are GET, PUT, POST, DELETE, and PATCH.&lt;/p&gt;

&lt;p&gt;These are request/response operations; you send a request to the server and it gives you
a response. Let’s assume we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;class HttpConnection&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;conn&lt;/code&gt; is an instance of
that class:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The interval between sending the request and getting the response is a very long
time in computer terms; even on a local machine, it can take hundreds of microseconds, and over
larger distances like thousands of miles, it can take tens of milliseconds.&lt;/p&gt;

&lt;p&gt;A blocking approach is trivial to code and reason about, but does not produce satisfactory results,
especially given that non-responses require a timeout, and this timeout could be a hundred seconds.
Parallel blocking calls can be made via the use of threads, but that only works well when each
network operation is independent of the others.&lt;/p&gt;

&lt;p&gt;First, we rewrite the code in terms of sending a request and getting a response. Both of these
are blocking calls:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, let’s turn both of these into non-blocking operations.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As written, this is still blocking. But now we can do other things while waiting for our calls
to finish. We might have an event loop we can tickle:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, it’s not as simple as that; how do we know what to do with our response?&lt;/p&gt;
</description>
        <pubDate>Tue, 09 May 2017 15:30:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/05/09/patterns-for-network-operation.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/05/09/patterns-for-network-operation.html</guid>
        
        <category>C++</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;Jai is a programming language being developed by Jonathan Blow.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.quora.com/What-do-game-programmers-think-about-Jai&quot;&gt;What do game programmers think about Jai?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/BSVino/JaiPrimer/blob/master/JaiPrimer.md&quot;&gt;Jai language primer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=10346985&quot;&gt;JAI Primer Hacker News thread&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://inductive.no/jai/&quot;&gt;Jai Programming Language – Resources and Information&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=UTqZNujQOlA&amp;amp;feature=youtu.be&amp;amp;t=43m57s&quot;&gt;Demo of compile-time execution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/cs-biggest-mistake/228701625&quot;&gt;C’s Biggest Mistake&lt;/a&gt;. 2009 article by Walter Bright.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1tAX5ZJzluilhoYKjra-uHbMCZraaQkqIHl3RIQ8mVkM/htmlview?sle=true#gid=0&quot;&gt;Authentication Techniques for APIs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.apnic.net/2017/05/09/bbr-new-kid-tcp-block/&quot;&gt;BBR, the new kid on the TCP block&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://michaelfairley.com/blog/i-made-a-game-in-rust/&quot;&gt;I Made a Game in Rust&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.facebook.com/posts/1978007565818999/a-novel-approach-to-neural-machine-translation/&quot;&gt;A novel approach to neural machine translation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svn2github.com/about/&quot;&gt;svn2github&lt;/a&gt;. A service that mirrors Subversion repos to Github.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 May 2017 13:15:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/05/09/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/05/09/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Auto-registering code in C++</title>
        <description>&lt;p&gt;It is possible to automatically stitch code together without explicit lines to do so, by
using global objects and their constructors. This is a technique used by unit test frameworks,
among others.&lt;/p&gt;

&lt;p&gt;What does this look like?&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectOne&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ObjectOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectOne_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will declare a class and create a global instance of it. At runtime, before main, all the constructors
for global objects are called, including &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectOne::ObjectOne()&lt;/code&gt;. Of course, this constructor does nothing,
but it does run (usually - see linker issues).&lt;/p&gt;

&lt;p&gt;We want to do something specific. Assume we have a base class &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Object::Register&lt;/code&gt;
function that adds this object to some list. We’re going to make this a static function.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ObjectOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectOne_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, when we run, this will call &lt;code class=&quot;highlighter-rouge&quot;&gt;Register&lt;/code&gt; with our &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; pointer. We would like to have
this insert into a list of Objects. We can do this without allocation if we use an
intrusive linked list where the pointers are part of each (statically allocated) object.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ObjectOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectOne_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, it’s not enough to just build a list. We want to use it. In particular, we
want to call a &lt;code class=&quot;highlighter-rouge&quot;&gt;Run()&lt;/code&gt; method on each object in the list.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RunAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ObjectOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* do something */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectOne_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RunAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is a lot of scaffolding to do nothing. But we have a building block that doesn’t allocate
before main, adds all our objects into a list (in a compiler-specific order), and then lets
us iterate the list at some point.&lt;/p&gt;

&lt;p&gt;We can hide some of the boilerplate with macros. Instead of declaring each new class to
register a &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; function, we have a macro create and register the object for us, and we just
supply the body of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define OBJECT(name) \
class Object ## name : public Object \
{ \
public: \
    Object ## name () { Register(this); } \
    void Run(); \
} Object ## name ## instance; \
void Object ## name :: Run()
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello from one&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The idea is that the macro and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; class are in some header file that we include, and
then our task is just to write &lt;code class=&quot;highlighter-rouge&quot;&gt;OBJECT&lt;/code&gt; bodies. We have to give each one a unique name, but this
is no different than the need to give each global function a unique name.&lt;/p&gt;

&lt;p&gt;This is a factory of sorts. What if we want more than one factory? Well, we can parameterize
the factory itself, and pass that to the &lt;code class=&quot;highlighter-rouge&quot;&gt;OBJECT&lt;/code&gt; macro, either as a parameter, or by nesting
&lt;code class=&quot;highlighter-rouge&quot;&gt;OBJECT&lt;/code&gt;s inside a scope we create.&lt;/p&gt;

&lt;p&gt;And we can continue to elaborate. We can provide sort orders - once all the objects are
registered, we could re-sort however we want. We could have multiple lists either as explicit
separate factories, or with parameters in the objects and passed to the &lt;code class=&quot;highlighter-rouge&quot;&gt;RunAll&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Keep it simple. Don’t add functionality you won’t need.&lt;/p&gt;

&lt;p&gt;TBD - add note about linker challenges when doing this.&lt;/p&gt;
</description>
        <pubDate>Wed, 03 May 2017 16:06:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/05/03/auto-register-code-cplusplus.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/05/03/auto-register-code-cplusplus.html</guid>
        
        <category>C++</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Command-line standard</title>
        <description>&lt;p&gt;I need a good command-line parsing library that I can use in C++ programs. There aren’t any - good
ones, that is. What is a good command-line parser? It’s easy to integrate, easy to use, and supports
both trivial use cases (a handful of options) and huge use cases (Git, with its hundreds of sub-commands).&lt;/p&gt;

&lt;p&gt;More importantly, there is a lot of variation in how people make command-lines, and a lot of inconsistency.
What would a standard look like?&lt;/p&gt;

&lt;p&gt;Command lines exist even for non-command-line environments. Services can have command lines defined
for them, GUIs might have command-lines passed to them at launch, and so on. There is some unspecified
tokenization happening that breaks up a string of characters into a list of values. These values are
then interpreted as zero or more command-line arguments, which have meaning to the specific program
that is being executed.&lt;/p&gt;

&lt;h1 id=&quot;positional-parameters&quot;&gt;Positional parameters&lt;/h1&gt;

&lt;p&gt;Positional parameters are referenced by their position on the command-line. It is typical but
not required that positional parameters are mandatory.&lt;/p&gt;

&lt;h2 id=&quot;no-parameters&quot;&gt;No parameters&lt;/h2&gt;

&lt;p&gt;The most trivial command-line invocation looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pwd
/Users/bfitz/projects
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command has no parameters. It’s still a command-line, and there are useful command-line
programs with no parameters. This is very easy to code towards - do nothing with the command-line.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int, char**)
{
	do_work();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;one-parameter&quot;&gt;One parameter&lt;/h2&gt;

&lt;p&gt;Going one step up in complexity, we have command-lines with a single mandatory parameter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd z
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command has a single parameter, which for the &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; command is the new desired working
directory. This is easy to handle - just grab the first and single item on the command line
(remembering that the 0th entry in &lt;code class=&quot;highlighter-rouge&quot;&gt;argv&lt;/code&gt; is the name of the program itself):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int, char* argv[])
{
	do_work(argv[1]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;multiple-parameters&quot;&gt;Multiple parameters&lt;/h2&gt;

&lt;p&gt;Generalizing this past one, we talk about the general case as having positional parameters,
because each parameter is in a specific position: first, second, third etc. In fact, the
POSIX standard passes the commandline as individual arguments to your C &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; function via
an array of positional parameters.&lt;/p&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; (copy-file) function, we copy the file referenced by first positional parameter to the location
specified by the second positional parameter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cp results.txt results-backup.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which would look like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int, char* argv[])
{
    char* srcfile = argv[1];
    char* dstfile = argv[2];
	copy_file(srcfile, dstfile);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;naming-positional-parameters&quot;&gt;Naming positional parameters&lt;/h2&gt;

&lt;p&gt;Conceptually, we can assign names to our positional parameters. We did this in our same program above,
but it’s nice to let the user know what the positional parameters mean, in whatever documentation we
provide. One of the most useful forms of documentation is command-line help. Command-line help for
the simplified cp command might look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usage: cp source_file target_file

copy the contents of source_file to target_file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We call them positional parameters because the user must supply them in the order that the program
is expecting. These don’t need to be mandatory, but if we do provide them, we have to start from the
first parameter and go to the last parameter we supply.&lt;/p&gt;

&lt;p&gt;Unfortunately for us, some commands allow for overloaded command lines, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; command
is a good example. It has two forms, the one shown above, and another that copies a list of files
to a target directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cp first.txt second.txt backup
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This would copy the two files &lt;code class=&quot;highlighter-rouge&quot;&gt;first.txt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;second.txt&lt;/code&gt; to similarly-named files in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;backup&lt;/code&gt; directory. In this case, the second parameter does not have the logical name target_file.
Instead, our definition looks like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usage: cp source_file ... target_directory
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where we have two or more source files that we copy into a target directory. If we think about
this as a grammar, we might have&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp ::= 'cp' singlefile|multifile
singlefile ::= source_file target_file
multifile ::= sourcelist target_directory
sourcelist ::= source_file source_file+
source_file ::= string
target_file ::= string
target_directory ::= string
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, this is awkward for people to read, even if it is precise enough for a program to use.
And we still have multiple parameters named source_file. I don’t have a way to label this yet.&lt;/p&gt;

&lt;h1 id=&quot;named-parameters&quot;&gt;Named parameters&lt;/h1&gt;

&lt;p&gt;Named parameters are referenced by their name, not by their position. For the most part,
named parameters can be presented in any order, although there are some command line patterns
that have a semi-ordering of parameters. It is typical that named parameters are optional,
but it is possible that some named parameters are mandatory.&lt;/p&gt;

&lt;p&gt;It is very common for these to be called options, because the first use of named parameters
was to add options to commands that contained positional parameters.&lt;/p&gt;

&lt;p&gt;Almost universally, named parameters begin with a &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; character, and in fact we typically
refer to the named parameter by eliding the beginning &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; prefix.&lt;/p&gt;

&lt;p&gt;Named parameters might have no argument, one argument, or multiple arguments. When a named
parameter has no arguments, it is typically treated as a boolean, where if present, the
boolean is true, and if not present, the boolean is false.&lt;/p&gt;

&lt;p&gt;The GNU system introduced a convention for short versus long names. Originally, “options”
were single-character names that could be bundled together, e.g the following two lines are
equivalent.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar -x -v -c -f backup.tar
tar -xvcf backup.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As command-lines became more complex, single-character options fell into disrepute; most named
parameters are multi-character. The GNU extension was to mandate the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; as a prefix,
to prevent confusion with bundled single-character options.&lt;/p&gt;

&lt;h3 id=&quot;named-parameters-with-no-arguments&quot;&gt;Named parameters with no arguments&lt;/h3&gt;

&lt;p&gt;Consider the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git --version
git version 2.12.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The git command is complex, but among its many options is &lt;code class=&quot;highlighter-rouge&quot;&gt;--version&lt;/code&gt;, which prints the git
version. It has no arguments, and in this form, needs no parameters.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Apr 2017 15:06:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/04/27/command-line-standard.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/04/27/command-line-standard.html</guid>
        
        <category>command-line</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Bootstrapping</title>
        <description>&lt;p&gt;Git for Windows is at 2.12.2(2). Why is it so far behind? Git 2.1 was released in August 2014. Maybe
just stop developing on Windows, or do all source control on Unix/Mac?&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;py&lt;/code&gt; and shebang lines to handle multiple versions of Python on the same computer. Install
Python 3.6 first into path, then Python 2.7 second without modifying path.&lt;/p&gt;

&lt;p&gt;Probably should install “for all users” for most programs. I installed Python 3.6&lt;/p&gt;

&lt;p&gt;I just installed Ruby again just to install Jekyll which I want to switch away from.&lt;/p&gt;

&lt;p&gt;This is also my chance to play with boot-from-VHD on Windows 10.&lt;/p&gt;

&lt;p&gt;My Windows dev box pattern is this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Dev&lt;/code&gt; is where dev tools go: this includes Python, Visual Studio, etc.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Dev\bin&lt;/code&gt; contains standalone binaries, so it’s in the path&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\projects&lt;/code&gt; is where I put source code
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\projects\github&lt;/code&gt; for forks from Github&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\projects\go&lt;/code&gt; for my &lt;code class=&quot;highlighter-rouge&quot;&gt;GOPATH&lt;/code&gt; (because Go wants all source in one tree)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t tend to put things in &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\User\&amp;lt;user&amp;gt;&lt;/code&gt;, but maybe I should, since that’s the natural
place on Unix? The reason I don’t is that Microsoft already fills it with a lot of crap, although
that seems to have gone down with Windows 10.&lt;/p&gt;

&lt;p&gt;There REALLY REALLY needs to be a universal package manager for Windows. I’m not sure Chocolatey
is it. But I should try it, because it has 4000 packages now. Except it’s in the process of going
commercial, and so (given Windows) that means companies as clients. Also, I notice that Chocolatey
packages tend to be really old - their &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; package is over 2 years old. Still…&lt;/p&gt;

&lt;p&gt;Cool, Chocolatey has a script to refresh environment variables in a running cmd window; I copied this
and saved it as their name &lt;code class=&quot;highlighter-rouge&quot;&gt;RefreshEnv.cmd&lt;/code&gt;. Works great!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/171588/is-there-a-command-to-refresh-environment-variables-from-the-command-prompt-in-w&quot;&gt;Is there a command to refresh environment variables from the command prompt in Windows?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Go, my &lt;code class=&quot;highlighter-rouge&quot;&gt;%GOPATH&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\projects\go&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I installed perl again, because I needed it a month ago, but I should figure out why. I’d love to
do without Perl and Ruby, and just use C++, Python and Go - and move more to Go and less to Python.&lt;/p&gt;

&lt;p&gt;Is it my imagination, or is a new computer always fast? This reinforces the desire to do boot-from-VHD
so I can have a clean system every month.&lt;/p&gt;

&lt;p&gt;Subversion… sigh. Passwords… sigh.&lt;/p&gt;

&lt;p&gt;7-zip.&lt;/p&gt;

&lt;p&gt;Perforce.&lt;/p&gt;

&lt;p&gt;Firefox.&lt;/p&gt;

&lt;p&gt;WinDirStat.&lt;/p&gt;

&lt;p&gt;WinPCap.&lt;/p&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/windows/#installation&quot;&gt;Jekyll on Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://labs.sverrirs.com/jekyll/&quot;&gt;Jekyll 3 on Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 18 Apr 2017 11:30:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/04/18/Bootstrapping.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/04/18/Bootstrapping.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world's questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 28 Feb 2017 13:51:57 -0800</pubDate>
    <lastBuildDate>Tue, 28 Feb 2017 13:51:57 -0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://sacha.me/articles/jekyll-rouge/&quot;&gt;Syntax Highlighting in Jekyll With Rouge&lt;/a&gt;. Switch to GFM.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lowleveldesign/wtrace&quot;&gt;wtrace&lt;/a&gt;. Uses ETW.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@tonywangcn/how-to-build-a-scaleable-crawler-to-crawl-million-pages-with-a-single-machine-in-just-2-hours-ab3e238d1c22#.97tw3lgs6&quot;&gt;How to build a scaleable crawler to crawl million pages with a single machine in just 2 hours&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://probablydance.com/2017/02/26/i-wrote-the-fastest-hashtable/&quot;&gt;I Wrote The Fastest Hashtable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://idea.popcount.org/2017-02-20-epoll-is-fundamentally-broken-12/&quot;&gt;Epoll is fundamentally broken&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jotaen.net/e7ywT/deploying-static-website-to-aws/&quot;&gt;Fast, Cheap And Automated: Deploying Static Websites To AWS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://benchmarksgame.alioth.debian.org/&quot;&gt;The Computer Language Benchmarks Game&lt;/a&gt;. I don’t know how to get to specific ones like &lt;a href=&quot;http://benchmarksgame.alioth.debian.org/u64q/performance.php?test=knucleotide&quot;&gt;k-nucleotide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rystsov.info/2017/02/15/simple-consensus.html&quot;&gt;In search of a simple consensus algorithm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/transceptor-technology/pyleri&quot;&gt;pyleri&lt;/a&gt;. Python left-right parser.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://treefrogframework.github.io/cpi/&quot;&gt;cpi: tiny C++ interpreter&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Feb 2017 11:00:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2017/02/28/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/02/28/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Clustering</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cluster_analysis&quot;&gt;Cluster Analysis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hdbscan.readthedocs.io/en/latest/comparing_clustering_algorithms.html&quot;&gt;Comparing Python Clustering Algorithms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ims.uni-stuttgart.de/institut/mitarbeiter/schulte/theses/phd/algorithm.pdf&quot;&gt;Clustering Algorithms and Evaluations&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Feb 2017 10:00:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2017/02/28/clustering.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/02/28/clustering.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;It looks like Gnuplot is still in CVS. This is the first live project I’ve come across
that is still in CVS.&lt;/p&gt;

&lt;p&gt;https://sourceforge.net/p/gnuplot/code/?source=navbar&lt;/p&gt;

&lt;p&gt;Some bits about Python object-oriented code, because I’m a beginner.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;Python’s super() considered super!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/&quot;&gt;Improve Your Python: Python Classes and Object Oriented Programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods&quot;&gt;Understanding Python super() with &lt;strong&gt;init&lt;/strong&gt;() methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fuhm.net/super-harmful/&quot;&gt;Python’s Super is nifty, but you can’t use it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amyboyle.ninja/Python-Inheritance&quot;&gt;Multiple Inheritance Minefield&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dylan added things to the computing landscape. One of them was the C3 superclass linearization
algorithm, and is also called Method Resolution Order (MRO). Python started using it in 2.3.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/C3_linearization&quot;&gt;C3 linearization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/download/releases/2.3/mro/&quot;&gt;The Python 2.3 Method Resolution Order&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://python-history.blogspot.com/2010/06/method-resolution-order.html&quot;&gt;Method Resolution Order&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.19.3910&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;A Monotonic Superclass Linearization for Dylan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 19 Feb 2017 19:00:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2017/02/19/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/02/19/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Dependencies</title>
        <description>&lt;p&gt;Dependencies are one of the main pain points when working on a large code base.&lt;/p&gt;

&lt;p&gt;You can make a monolithic codebase where you write everything from scratch. This is
a daunting task and I don’t think anyone does this any more, even when they have
their own hardware. The amount of code and the depth of some of the code is so
big that even Google or Microsoft can’t really afford to do this.&lt;/p&gt;

&lt;p&gt;So we use code we didn’t write to extend our own code.&lt;/p&gt;

&lt;p&gt;INSERT STUFF HERE&lt;/p&gt;

&lt;p&gt;It’s our program, so we should make all policy decisions at the top level. But we also
don’t want to modify package code in order to use it, and we don’t want heavy
configuration required to use code.&lt;/p&gt;

&lt;p&gt;The crudest form of policy is “use this package/don’t use this package”. Since it
is our program, nothing forces us to use a specific package. But we really want to
use packages, because we want to make and ship our program in a reasonable amount
of time.&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Feb 2017 11:36:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2017/02/18/dependencies.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/02/18/dependencies.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Converting Subversion to Git</title>
        <description>&lt;p&gt;Several groups have converted their large Subversion repository to Git. The largest I
know about is KDE, and they ended up writing a new program &lt;code class=&quot;highlighter-rouge&quot;&gt;svntogit&lt;/code&gt; to do that.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/svn-all-fast-export/svn2git&quot;&gt;svn2git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://techbase.kde.org/Projects/MoveToGit/UsingSvn2Git&quot;&gt;UsingSvn2Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The KDE Subversion repository is still accessible at&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;svn://anonsvn.kde.org/home/kde&quot;&gt;svn://anonsvn.kde.org/home/kde&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://websvn.kde.org&quot;&gt;https://websvn.kde.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other people have used their tool&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jeffgeerling.com/blogs/jeff-geerling/switching-svn-repository-svn2git&quot;&gt;Switching an SVN repository to Git with KDE’s Svn2Git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some people persevere with &lt;code class=&quot;highlighter-rouge&quot;&gt;git-svn&lt;/code&gt;, bundled with Git.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://john.albin.net/git/convert-subversion-to-git&quot;&gt;Converting a Subversion repository to Git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was writing my own partly because of pathologies in in-house repos that choked everything
I found, and partly because I have bigger plans.&lt;/p&gt;

&lt;h2 id=&quot;large-subversion-repos&quot;&gt;Large Subversion repos&lt;/h2&gt;

&lt;p&gt;The Apache Software Foundation puts all projects into a single common repo. As of this writing,
it has 1,783,493 revisions:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://svn.apache.org/repos/asf&quot;&gt;https://svn.apache.org/repos/asf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;KDE used to be in Subversion, and small pieces stil live there (just localization at
this point, I think). As of this writing, it has 1,482,977 revisions:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;svn://anonsvn.kde.org/home/kde&quot;&gt;svn://anonsvn.kde.org/home/kde&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GCC is in Subversion, although I think they are trying to switch to Git. As of this writing,
it has 245,564 revisions:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;svn://gcc.gnu.org/svn/gcc&quot;&gt;svn://gcc.gnu.org/svn/gcc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SourceForge still uses Subversion for project repos.&lt;/p&gt;

&lt;h2 id=&quot;random-notes&quot;&gt;Random notes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=7648237&quot;&gt;Facebook’s git repo is 54GB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/geerlingguy/ansible-vagrant-examples&quot;&gt;geerlingguy/ansible-vagrant-examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gcc.gnu.org/svn.html&quot;&gt;GCC: Anonymous read-only SVN access&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://scholarslab.org/research-and-development/adventures-in-converting-subversion-to-git/&quot;&gt;Adventures in Converting Subversion to Git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/svn.html&quot;&gt;My Experiences With Subversion&lt;/a&gt; - this is
really about a CVS -&amp;gt; Subversion conversion.&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Feb 2017 11:36:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2017/02/18/converting-subversion-to-git.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/02/18/converting-subversion-to-git.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Hosting repositories</title>
        <description>&lt;h2 id=&quot;public-access&quot;&gt;Public access&lt;/h2&gt;

&lt;p&gt;So, who hosts repositories for public access?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Github: https://github.com&lt;/li&gt;
  &lt;li&gt;Bitbucket: https://bitbucket.org&lt;/li&gt;
  &lt;li&gt;CodePlex: http://www.codeplex.com/&lt;/li&gt;
  &lt;li&gt;SourceForge: https://sourceforge.net/&lt;/li&gt;
  &lt;li&gt;LaunchPad: https://launchpad.net/&lt;/li&gt;
  &lt;li&gt;Savannah: http://savannah.gnu.org/&lt;/li&gt;
  &lt;li&gt;Gna: http://gna.org/&lt;/li&gt;
  &lt;li&gt;Gitlab: http://gitlab.com&lt;/li&gt;
  &lt;li&gt;Apache Software Foundation: https://www.apache.org/dev/version-control.html&lt;/li&gt;
  &lt;li&gt;repo.or.cz: http://repo.or.cz/&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;codeplex&quot;&gt;CodePlex&lt;/h3&gt;

&lt;p&gt;Slow to browse, and the UI is a little lame by modern standards. I think it’s mostly
dead, because the last blog post on the site is from October 13 2013. I didn’t find
any “we are going away” post but they must be going away. And I see people still using it,
so hmm.&lt;/p&gt;

&lt;p&gt;CodePlex has Subversion repositories on it, e.g. https://vstortoise.svn.codeplex.com/svn.
But I think you have to guess where they are, you can’t just easily browse just
Subversion repositories. Don’t think there’s an API either.&lt;/p&gt;

&lt;h3 id=&quot;sourceforge&quot;&gt;Sourceforge&lt;/h3&gt;

&lt;p&gt;Still around, and getting disreputable. Sourceforge I think is only Subversion,
e.g. svn checkout https://svn.code.sf.net/p/doublecmd/code/trunk doublecmd-code&lt;/p&gt;

&lt;h2 id=&quot;from-the-past&quot;&gt;From the past&lt;/h2&gt;

&lt;p&gt;These are the big players of the past that shut down (largely because Github won). Some
still run in read-only mode:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google Code: https://code.google.com (archived at https://code.google.com/archive/)&lt;/li&gt;
  &lt;li&gt;Gitorious: https://gitorious.org/ (migrating to Gitlab)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hosted-providers&quot;&gt;Hosted providers&lt;/h2&gt;

&lt;p&gt;There are also hosted providers that will host your repositories, but I don’t think there
is public access&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assembla: https://assembla.com&lt;/li&gt;
  &lt;li&gt;ProjectLocker: https://www.projectlocker.com/&lt;/li&gt;
  &lt;li&gt;XP-Dev.com: https://xp-dev.com/&lt;/li&gt;
  &lt;li&gt;SVNRepository.com: http://svnrepository.com/&lt;/li&gt;
  &lt;li&gt;SlikSVN: https://sliksvn.com&lt;/li&gt;
  &lt;li&gt;CloudForge: http://www.cloudforge.com/&lt;/li&gt;
  &lt;li&gt;Codebase: https://www.codebasehq.com/&lt;/li&gt;
  &lt;li&gt;repositoryhosting.com: http://repositoryhosting.com/&lt;/li&gt;
  &lt;li&gt;Unfuddle: https://unfuddle.com/&lt;/li&gt;
  &lt;li&gt;Beanstalk: http://beanstalkapp.com/&lt;/li&gt;
  &lt;li&gt;Deveo: https://deveo.com/&lt;/li&gt;
  &lt;li&gt;FogBugz Dev hub: https://www.fogcreek.com/fogbugz/devhub&lt;/li&gt;
  &lt;li&gt;Planio: https://plan.io/subversion-hosting-and-git-hosting/&lt;/li&gt;
  &lt;li&gt;RhodeCode: https://rhodecode.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-i-was-reading&quot;&gt;What I was reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cvsync.org/&quot;&gt;CVSync&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/file/file&quot;&gt;file/file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.catb.org/~esr/cvs-fast-export/cvssync.html&quot;&gt;cvssync&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.embecosm.com/appnotes/ean11/ean11-howto-cvs-git-1.0.html&quot;&gt;Howto: CVS to Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/akavel/cvsclone&quot;&gt;akavel/cvsclone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://survs.com/report/nz2odu1spl&quot;&gt;Git User’s Survey 2016&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yaml.org/&quot;&gt;YAML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://snapcraft.io/&quot;&gt;snapcraft&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/snapcore/snapd&quot;&gt;snapcore/snapd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cs.gettysburg.edu/~tneller/modelai/2013/cfr/index.html&quot;&gt;An Introduction to Counterfactual Regret Minimization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bookadvice.co/military-reading-list.html&quot;&gt;Military Reading List&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://landing.google.com/sre/book/&quot;&gt;Google SRE book&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pagetable.com/?p=46&quot;&gt;Create your own Version of Microsoft BASIC for 6502&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.txbobsc.com/scsc/scdocumentor/&quot;&gt;S-C DocuMentor: Applesoft&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/visualstudioalm/2017/02/03/announcing-gvfs-git-virtual-file-system/&quot;&gt;Announcing GVFS (Git Virtual File System)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 03 Feb 2017 16:12:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2017/02/03/hosting-repositories.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/02/03/hosting-repositories.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/andrewchambers/c&quot;&gt;andrewchambers/c&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/m/#!msg/boring-crypto/48qa1kWignU/o8GGp2K1DAAJ&quot;&gt;boringc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cr.yp.to/talks/2015.04.16/slides-djb-20150416-a4.pdf&quot;&gt;The death of optimizing compilers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.regehr.org/archives/1453&quot;&gt;A Tourist’s Guide to the LLVM Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mattwarren.org/2016/12/12/Research-papers-in-the-.NET-source/&quot;&gt;Research papers in the .NET source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://aiimpacts.org/concrete-ai-tasks-for-forecasting/&quot;&gt;Concrete AI tasks for forecasting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.filfre.net/2017/01/a-time-of-endings-part-3-mediagenic-or-the-patent-from-hell/&quot;&gt;A Time of Endings, Part 3: Mediagenic (or, The Patent from Hell)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.upupgrow.com/blog/2017/1/5/the-art-of-pitching-how-i-got-published-in-the-atlantic&quot;&gt;The Art of Pitching: How I Got Published in The Atlantic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/brilee/MuGo&quot;&gt;MuGo: A minimalist Go engine modeled after AlphaGo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.to/ben/which-editoride-do-you-use-and-why&quot;&gt;Which editor/IDE do you use and why?&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Jan 2017 07:56:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2017/01/06/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/01/06/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://jeremykun.com/2015/04/06/markov-chain-monte-carlo-without-all-the-bullshit/&quot;&gt;Markov Chain Monte Carlo Without all the Bullshit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jeremykun.com/2014/02/12/simulating-a-biased-coin-with-a-fair-coin/&quot;&gt;Simulating a Biased Coin with a Fair Coin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/book-No-Solutions-Aug-21-2014.pdf&quot;&gt;Foundations of Data Science&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mcmchandbook.net/HandbookChapter1.pdf&quot;&gt;Introduction to Markov Chain Monte Carlo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stats.stackexchange.com/questions/165/how-would-you-explain-markov-chain-monte-carlo-mcmc-to-a-layperson&quot;&gt;How would you explain Markov Chain Monte Carlo (MCMC) to a layperson?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mlwhiz.com/blog/2015/08/19/MCMC_Algorithms_Beta_Distribution/&quot;&gt;My Tryst With MCMC Algorithms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mlwhiz.com/blog/2015/08/21/MCMC_Algorithms_Cryptography/&quot;&gt;Behold the power of MCMC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twiecki.github.io/blog/2015/11/10/mcmc-sampling/&quot;&gt;MCMC sampling for dummies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.cornell.edu/selman/cs475/lectures/intro-mcmc-lukas.pdf&quot;&gt;Introduction to Markov Chain Monte Carlo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.princeton.edu/courses/archive/spr06/cos598C/papers/AndrieuFreitasDoucetJordan2003.pdf&quot;&gt;An Introduction to MCMC for Machine Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=h1NOS_wxgGg&quot;&gt;Markov Chain Monte Carlo and the Metropolis Algorithm (video)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vTUwEu53uzs&quot;&gt;A Beginner’s Guide to MCMC (video)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=uSAE1-wfIKU&quot;&gt;Introduction to Bayesian Methods (video)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.stats.ox.ac.uk/~cholmes/Courses/BDA/bda_mcmc.pdf&quot;&gt;Markov Chain Monte Carlo and Applied Bayesian Statistics: a short course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3619958/&quot;&gt;Markov Chain Monte Carlo: an introduction for epidemiologists&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stats.stackexchange.com/questions/214724/how-do-abc-and-mcmc-differ-in-their-applications&quot;&gt;How do ABC and MCMC differ in their applications?&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Jan 2017 10:46:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2017/01/03/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/01/03/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Compiling C++</title>
        <description>&lt;p&gt;This is a continuation of my last post.&lt;/p&gt;

&lt;p&gt;The C++ standard lists 9 phases of translation. Some are trivial, some are massive (phase 7 is “compile
after preprocessing”).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Map physical source file characters to the basic source character set&lt;/li&gt;
  &lt;li&gt;Splice lines together as needed&lt;/li&gt;
  &lt;li&gt;Break text into sequences of preprocessing tokens&lt;/li&gt;
  &lt;li&gt;Evaluate preprocessing directives and expand macros&lt;/li&gt;
  &lt;li&gt;Convert character and string literals from source character set to execution character set&lt;/li&gt;
  &lt;li&gt;Concatenate adjacent string literals&lt;/li&gt;
  &lt;li&gt;Compile: convert preprocessing tokens to tokens and compile into translation units&lt;/li&gt;
  &lt;li&gt;Combine translation units and instantiation units (for templates)&lt;/li&gt;
  &lt;li&gt;Resolve external references and produce final program image&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;phase-1---map-to-basic-source-character-set&quot;&gt;Phase 1 - map to basic source character set&lt;/h1&gt;

&lt;p&gt;This can be a no-op in compilers if the physical source file characters are identical to the basic
source character set. In modern compilers, there may be some text to text translation, especially
for handling newline characters.&lt;/p&gt;

&lt;p&gt;Without loss of generality, we could state that the basic source character set is UTF-8 and that
newline characters are linefeeds, e.g. 0x0A. We would translate our input file to match this.&lt;/p&gt;

&lt;p&gt;As a reminder, this is the basic character set:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
0 1 2 3 4 5 6 7 8 9
_ { } [ ] # ( ) &amp;lt; &amp;gt; % : ; . ? * + - / ^ &amp;amp; | ~ ! = , \ &quot; ’
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is augmented with universal-character-name characters for any character outside this range.
In theory, this means the use of escapes like &lt;code class=&quot;highlighter-rouge&quot;&gt;\u00F6&lt;/code&gt; instead of direct Unicode characters like
&lt;code class=&quot;highlighter-rouge&quot;&gt;ö&lt;/code&gt;. However, the “as-if” rule applies here: the standard states that “an implementation may use
any internal encoding, so long as…” it works out the same.&lt;/p&gt;

&lt;p&gt;This also includes conversion of trigraphs, if trigraphs are supported. Trigraph support is not required
as of C++14 and is slated to be removed in C++17. No one should be using trigraphs.&lt;/p&gt;

&lt;p&gt;Raw string literals: Trigraph and universal character translations would be reversed in phase 3. It is
ignored here because identifying raw string literals is done in the preprocessor tokenization phase.&lt;/p&gt;

&lt;h1 id=&quot;phase-2---splice-lines-together&quot;&gt;Phase 2 - splice lines together&lt;/h1&gt;

&lt;p&gt;The C++ standard says that lines ending in backlash &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; are joined together with the following line
to create a single logical line. The main reason for this is for long string literals and for long
preprocessor directives. The preprocessor is line-based in that a preprocessor directive must be on
a single logical line. By splicing lines together before interpreting directives, we can make macros
that are more readable than they would be otherwise.&lt;/p&gt;

&lt;h1 id=&quot;phase-3---decompose-file-into-preprocessor-tokens&quot;&gt;Phase 3 - decompose file into preprocessor tokens&lt;/h1&gt;

&lt;p&gt;This phase is an “as-if” phase. A compiler could elect to work with the text itself instead of the
preprocessor tokens. However, there are some subtleties that make it a lot easier to talk about the
process as if there were tokens.&lt;/p&gt;

&lt;p&gt;Raw string literals are an interesting exception. If the start of a raw-string literal is detected,
then the universal-character-name translation in phase 1 and the line-splicing in phase 2 are reverted,
and the raw string is the shortest sequence of characters that match the raw string pattern. This
means for example that a raw string defined as such:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char* s = R&quot;(my\
string)&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;would be the literal characters &lt;code class=&quot;highlighter-rouge&quot;&gt;my\&amp;lt;newline&amp;gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, does this mean that it’s the newline from the physical file? While the standard reads as ambiguous,
I’m pretty sure this has to be a newline character - if the execution character set is UTF-8, then
the string would be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;74 68 69 73 5c 0a 73 74 72 69 6e 67 00
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;regardless of the type of newline in the physical file.&lt;/p&gt;

&lt;p&gt;Another exception is the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;:&lt;/code&gt; digraph; if the sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;::&lt;/code&gt; is followed by anything other than &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;, then
this is treated as the token &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and not the digraph &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;:&lt;/code&gt;. This is a little hard to puzzle out. The string &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;::&amp;gt;&lt;/code&gt;
would be digraphs for &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;, so that part makes sense, e.g a declaration such as &lt;code class=&quot;highlighter-rouge&quot;&gt;int main(int argc, char* argv[])&lt;/code&gt;.
But it’s a little harder to see what &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;:::&lt;/code&gt; would mean.&lt;/p&gt;

&lt;p&gt;Personally, I think compilers should refuse to implement the punctuation diagraphs, and it look like MSVC
does not support them (and maybe never did). I’m neutral on the keyword “diagraphs” like &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt; etc.
I feel like those are too much like trying to pretend C++ is a different language. I also notice that
MSVC doesn’t directly support them, only through a header file &lt;iso646.h&gt; where it creates macros for them...
so not really digraphs. Just say no to digraphs.&lt;/iso646.h&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Jan 2017 03:27:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2017/01/03/compiling-c++.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/01/03/compiling-c++.html</guid>
        
        <category>C++</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Using Hugo for a blog</title>
        <description>&lt;p&gt;Near the end of 2012, I started a blog using Wordpress. At the end of 2014, it fell prey to a
hack that inserted hundreds of thousands of spam comments. I’d already been dissatisfied with
Wordpress as being awkward to write in, so I spent no effort to fix it.&lt;/p&gt;

&lt;p&gt;In May 2015, I started a new blog using Jekyll. This was somewhat better than using Wordpress;
it went backwards on features, but was a lot easier to write new blog posts, and was a lot faster.
Well, at first. Once I had a hundred blog posts, I noticed Jekyll getting slower and slower, to the
point now that it takes 30 seconds to rebuild. That’s annoying. Plus, I hate Liquid, and I’m not
really a Ruby fan.&lt;/p&gt;

&lt;p&gt;So, after months of light agonizing, I’m going to switch to Hugo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Big plus is that it’s written in Go, which means it’s almost as good as writing it in C++, both
speed-wise and the likelihood that I would ever actually add a feature to it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/spf13/hugo&quot;&gt;Hugo source - Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hugo has a Jekyll site importer which I’ll be trying out, but I’m not too worried about that part
(and someday I’ll import all the content from my older Wordpress blog):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gohugo.io/tutorials/migrate-from-jekyll/&quot;&gt;Migrate to Hugo from Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a showcase of Hugo blogs that I imagine I’ll pick through to find an initial template that
I like - while I’m picky on look&amp;amp;feel, it’s not to the point where I want to spend a lot of time
writing CSS myself.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gohugo.io/showcase/&quot;&gt;Hugo Site Showcase&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That said, I’ve been enjoying using Sphinx and reStructuredText for writing documentation, and
I’m not really a blogger as in “writing to be read”, instead I write to remember or as reference.
I’m ok with using multiple systems, I think.&lt;/p&gt;

&lt;p&gt;I expect that whatever I do, I’ll use Disqus to have blog comments. Those are always useful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am also considering using Netlify.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot;&gt;Netlify&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, Netlify has this cool list of static site generators&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.staticgen.com/&quot;&gt;StaticGen - Top Open-Source Static Site Generators&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Honorable mention - I toyed with the idea of Nikola, because it was at least written in Python.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://getnikola.com/&quot;&gt;Nikola&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another honorable mention is Forestry, which purports to create a CMS from your Jekyll or Hugo blog.
I don’t think I need a CMS, but we’ll see. However, this does sound useful for non-technical people.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 03:39:00 -0800</pubDate>
        <link>http://neurocline.github.io/blog/2017/01/02/using-hugo.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/blog/2017/01/02/using-hugo.html</guid>
        
        <category>hugo</category>
        
        <category>blog</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>

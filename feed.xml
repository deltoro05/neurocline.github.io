<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world's questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 09 May 2017 17:58:53 -0700</pubDate>
    <lastBuildDate>Tue, 09 May 2017 17:58:53 -0700</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Patterns for network operations</title>
        <description>&lt;p&gt;This is a grandiose topic, so I’ll focus on a subset. What’s the best way to do HTTP operations?
As a reminder, these are GET, PUT, POST, DELETE, and PATCH.&lt;/p&gt;

&lt;p&gt;These are request/response operations; you send a request to the server and it gives you
a response. Let’s assume we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;class HttpConnection&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;conn&lt;/code&gt; is an instance of
that class:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The interval between sending the request and getting the response is a very long
time in computer terms; even on a local machine, it can take hundreds of microseconds, and over
larger distances like thousands of miles, it can take tens of milliseconds.&lt;/p&gt;

&lt;p&gt;A blocking approach is trivial to code and reason about, but does not produce satisfactory results,
especially given that non-responses require a timeout, and this timeout could be a hundred seconds.
Parallel blocking calls can be made via the use of threads, but that only works well when each
network operation is independent of the others.&lt;/p&gt;

&lt;p&gt;First, we rewrite the code in terms of sending a request and getting a response. Both of these
are blocking calls:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, let’s turn both of these into non-blocking operations.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As written, this is still blocking. But now we can do other things while waiting for our calls
to finish. We might have an event loop we can tickle:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, it’s not as simple as that; how do we know what to do with our response?&lt;/p&gt;
</description>
        <pubDate>Tue, 09 May 2017 15:30:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/05/09/patterns-for-network-operation.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/05/09/patterns-for-network-operation.html</guid>
        
        <category>C++</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;Jai is a programming language being developed by Jonathan Blow.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.quora.com/What-do-game-programmers-think-about-Jai&quot;&gt;What do game programmers think about Jai?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/BSVino/JaiPrimer/blob/master/JaiPrimer.md&quot;&gt;Jai language primer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=10346985&quot;&gt;JAI Primer Hacker News thread&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://inductive.no/jai/&quot;&gt;Jai Programming Language – Resources and Information&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=UTqZNujQOlA&amp;amp;feature=youtu.be&amp;amp;t=43m57s&quot;&gt;Demo of compile-time execution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/cs-biggest-mistake/228701625&quot;&gt;C’s Biggest Mistake&lt;/a&gt;. 2009 article by Walter Bright.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1tAX5ZJzluilhoYKjra-uHbMCZraaQkqIHl3RIQ8mVkM/htmlview?sle=true#gid=0&quot;&gt;Authentication Techniques for APIs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.apnic.net/2017/05/09/bbr-new-kid-tcp-block/&quot;&gt;BBR, the new kid on the TCP block&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://michaelfairley.com/blog/i-made-a-game-in-rust/&quot;&gt;I Made a Game in Rust&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.facebook.com/posts/1978007565818999/a-novel-approach-to-neural-machine-translation/&quot;&gt;A novel approach to neural machine translation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svn2github.com/about/&quot;&gt;svn2github&lt;/a&gt;. A service that mirrors Subversion repos to Github.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 May 2017 13:15:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/05/09/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/05/09/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Auto-registering code in C++</title>
        <description>&lt;p&gt;It is possible to automatically stitch code together without explicit lines to do so, by
using global objects and their constructors. This is a technique used by unit test frameworks,
among others.&lt;/p&gt;

&lt;p&gt;What does this look like?&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectOne&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ObjectOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectOne_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will declare a class and create a global instance of it. At runtime, before main, all the constructors
for global objects are called, including &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectOne::ObjectOne()&lt;/code&gt;. Of course, this constructor does nothing,
but it does run (usually - see linker issues).&lt;/p&gt;

&lt;p&gt;We want to do something specific. Assume we have a base class &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Object::Register&lt;/code&gt;
function that adds this object to some list. We’re going to make this a static function.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ObjectOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectOne_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, when we run, this will call &lt;code class=&quot;highlighter-rouge&quot;&gt;Register&lt;/code&gt; with our &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; pointer. We would like to have
this insert into a list of Objects. We can do this without allocation if we use an
intrusive linked list where the pointers are part of each (statically allocated) object.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ObjectOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectOne_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, it’s not enough to just build a list. We want to use it. In particular, we
want to call a &lt;code class=&quot;highlighter-rouge&quot;&gt;Run()&lt;/code&gt; method on each object in the list.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RunAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ObjectOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* do something */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectOne_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RunAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is a lot of scaffolding to do nothing. But we have a building block that doesn’t allocate
before main, adds all our objects into a list (in a compiler-specific order), and then lets
us iterate the list at some point.&lt;/p&gt;

&lt;p&gt;We can hide some of the boilerplate with macros. Instead of declaring each new class to
register a &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; function, we have a macro create and register the object for us, and we just
supply the body of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define OBJECT(name) \
class Object ## name : public Object \
{ \
public: \
    Object ## name () { Register(this); } \
    void Run(); \
} Object ## name ## instance; \
void Object ## name :: Run()
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello from one&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The idea is that the macro and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; class are in some header file that we include, and
then our task is just to write &lt;code class=&quot;highlighter-rouge&quot;&gt;OBJECT&lt;/code&gt; bodies. We have to give each one a unique name, but this
is no different than the need to give each global function a unique name.&lt;/p&gt;

&lt;p&gt;This is a factory of sorts. What if we want more than one factory? Well, we can parameterize
the factory itself, and pass that to the &lt;code class=&quot;highlighter-rouge&quot;&gt;OBJECT&lt;/code&gt; macro, either as a parameter, or by nesting
&lt;code class=&quot;highlighter-rouge&quot;&gt;OBJECT&lt;/code&gt;s inside a scope we create.&lt;/p&gt;

&lt;p&gt;And we can continue to elaborate. We can provide sort orders - once all the objects are
registered, we could re-sort however we want. We could have multiple lists either as explicit
separate factories, or with parameters in the objects and passed to the &lt;code class=&quot;highlighter-rouge&quot;&gt;RunAll&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Keep it simple. Don’t add functionality you won’t need.&lt;/p&gt;

&lt;p&gt;TBD - add note about linker challenges when doing this.&lt;/p&gt;
</description>
        <pubDate>Wed, 03 May 2017 16:06:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/05/03/auto-register-code-cplusplus.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/05/03/auto-register-code-cplusplus.html</guid>
        
        <category>C++</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Command-line standard</title>
        <description>&lt;p&gt;I need a good command-line parsing library that I can use in C++ programs. There aren’t any - good
ones, that is. What is a good command-line parser? It’s easy to integrate, easy to use, and supports
both trivial use cases (a handful of options) and huge use cases (Git, with its hundreds of sub-commands).&lt;/p&gt;

&lt;p&gt;More importantly, there is a lot of variation in how people make command-lines, and a lot of inconsistency.
What would a standard look like?&lt;/p&gt;

&lt;p&gt;Command lines exist even for non-command-line environments. Services can have command lines defined
for them, GUIs might have command-lines passed to them at launch, and so on. There is some unspecified
tokenization happening that breaks up a string of characters into a list of values. These values are
then interpreted as zero or more command-line arguments, which have meaning to the specific program
that is being executed.&lt;/p&gt;

&lt;h1 id=&quot;positional-parameters&quot;&gt;Positional parameters&lt;/h1&gt;

&lt;p&gt;Positional parameters are referenced by their position on the command-line. It is typical but
not required that positional parameters are mandatory.&lt;/p&gt;

&lt;h2 id=&quot;no-parameters&quot;&gt;No parameters&lt;/h2&gt;

&lt;p&gt;The most trivial command-line invocation looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pwd
/Users/bfitz/projects
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command has no parameters. It’s still a command-line, and there are useful command-line
programs with no parameters. This is very easy to code towards - do nothing with the command-line.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int, char**)
{
	do_work();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;one-parameter&quot;&gt;One parameter&lt;/h2&gt;

&lt;p&gt;Going one step up in complexity, we have command-lines with a single mandatory parameter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd z
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command has a single parameter, which for the &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; command is the new desired working
directory. This is easy to handle - just grab the first and single item on the command line
(remembering that the 0th entry in &lt;code class=&quot;highlighter-rouge&quot;&gt;argv&lt;/code&gt; is the name of the program itself):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int, char* argv[])
{
	do_work(argv[1]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;multiple-parameters&quot;&gt;Multiple parameters&lt;/h2&gt;

&lt;p&gt;Generalizing this past one, we talk about the general case as having positional parameters,
because each parameter is in a specific position: first, second, third etc. In fact, the
POSIX standard passes the commandline as individual arguments to your C &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; function via
an array of positional parameters.&lt;/p&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; (copy-file) function, we copy the file referenced by first positional parameter to the location
specified by the second positional parameter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cp results.txt results-backup.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which would look like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int, char* argv[])
{
    char* srcfile = argv[1];
    char* dstfile = argv[2];
	copy_file(srcfile, dstfile);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;naming-positional-parameters&quot;&gt;Naming positional parameters&lt;/h2&gt;

&lt;p&gt;Conceptually, we can assign names to our positional parameters. We did this in our same program above,
but it’s nice to let the user know what the positional parameters mean, in whatever documentation we
provide. One of the most useful forms of documentation is command-line help. Command-line help for
the simplified cp command might look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usage: cp source_file target_file

copy the contents of source_file to target_file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We call them positional parameters because the user must supply them in the order that the program
is expecting. These don’t need to be mandatory, but if we do provide them, we have to start from the
first parameter and go to the last parameter we supply.&lt;/p&gt;

&lt;p&gt;Unfortunately for us, some commands allow for overloaded command lines, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; command
is a good example. It has two forms, the one shown above, and another that copies a list of files
to a target directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cp first.txt second.txt backup
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This would copy the two files &lt;code class=&quot;highlighter-rouge&quot;&gt;first.txt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;second.txt&lt;/code&gt; to similarly-named files in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;backup&lt;/code&gt; directory. In this case, the second parameter does not have the logical name target_file.
Instead, our definition looks like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usage: cp source_file ... target_directory
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where we have two or more source files that we copy into a target directory. If we think about
this as a grammar, we might have&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp ::= 'cp' singlefile|multifile
singlefile ::= source_file target_file
multifile ::= sourcelist target_directory
sourcelist ::= source_file source_file+
source_file ::= string
target_file ::= string
target_directory ::= string
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, this is awkward for people to read, even if it is precise enough for a program to use.
And we still have multiple parameters named source_file. I don’t have a way to label this yet.&lt;/p&gt;

&lt;h1 id=&quot;named-parameters&quot;&gt;Named parameters&lt;/h1&gt;

&lt;p&gt;Named parameters are referenced by their name, not by their position. For the most part,
named parameters can be presented in any order, although there are some command line patterns
that have a semi-ordering of parameters. It is typical that named parameters are optional,
but it is possible that some named parameters are mandatory.&lt;/p&gt;

&lt;p&gt;It is very common for these to be called options, because the first use of named parameters
was to add options to commands that contained positional parameters.&lt;/p&gt;

&lt;p&gt;Almost universally, named parameters begin with a &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; character, and in fact we typically
refer to the named parameter by eliding the beginning &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; prefix.&lt;/p&gt;

&lt;p&gt;Named parameters might have no argument, one argument, or multiple arguments. When a named
parameter has no arguments, it is typically treated as a boolean, where if present, the
boolean is true, and if not present, the boolean is false.&lt;/p&gt;

&lt;p&gt;The GNU system introduced a convention for short versus long names. Originally, “options”
were single-character names that could be bundled together, e.g the following two lines are
equivalent.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar -x -v -c -f backup.tar
tar -xvcf backup.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As command-lines became more complex, single-character options fell into disrepute; most named
parameters are multi-character. The GNU extension was to mandate the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; as a prefix,
to prevent confusion with bundled single-character options.&lt;/p&gt;

&lt;h3 id=&quot;named-parameters-with-no-arguments&quot;&gt;Named parameters with no arguments&lt;/h3&gt;

&lt;p&gt;Consider the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git --version
git version 2.12.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The git command is complex, but among its many options is &lt;code class=&quot;highlighter-rouge&quot;&gt;--version&lt;/code&gt;, which prints the git
version. It has no arguments, and in this form, needs no parameters.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Apr 2017 15:06:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/04/27/command-line-standard.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/04/27/command-line-standard.html</guid>
        
        <category>command-line</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Bootstrapping</title>
        <description>&lt;p&gt;Git for Windows is at 2.12.2(2). Why is it so far behind? Git 2.1 was released in August 2014. Maybe
just stop developing on Windows, or do all source control on Unix/Mac?&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;py&lt;/code&gt; and shebang lines to handle multiple versions of Python on the same computer. Install
Python 3.6 first into path, then Python 2.7 second without modifying path.&lt;/p&gt;

&lt;p&gt;Probably should install “for all users” for most programs. I installed Python 3.6&lt;/p&gt;

&lt;p&gt;I just installed Ruby again just to install Jekyll which I want to switch away from.&lt;/p&gt;

&lt;p&gt;This is also my chance to play with boot-from-VHD on Windows 10.&lt;/p&gt;

&lt;p&gt;My Windows dev box pattern is this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Dev&lt;/code&gt; is where dev tools go: this includes Python, Visual Studio, etc.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Dev\bin&lt;/code&gt; contains standalone binaries, so it’s in the path&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\projects&lt;/code&gt; is where I put source code
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\projects\github&lt;/code&gt; for forks from Github&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\projects\go&lt;/code&gt; for my &lt;code class=&quot;highlighter-rouge&quot;&gt;GOPATH&lt;/code&gt; (because Go wants all source in one tree)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t tend to put things in &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\User\&amp;lt;user&amp;gt;&lt;/code&gt;, but maybe I should, since that’s the natural
place on Unix? The reason I don’t is that Microsoft already fills it with a lot of crap, although
that seems to have gone down with Windows 10.&lt;/p&gt;

&lt;p&gt;There REALLY REALLY needs to be a universal package manager for Windows. I’m not sure Chocolatey
is it. But I should try it, because it has 4000 packages now. Except it’s in the process of going
commercial, and so (given Windows) that means companies as clients. Also, I notice that Chocolatey
packages tend to be really old - their &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; package is over 2 years old. Still…&lt;/p&gt;

&lt;p&gt;Cool, Chocolatey has a script to refresh environment variables in a running cmd window; I copied this
and saved it as their name &lt;code class=&quot;highlighter-rouge&quot;&gt;RefreshEnv.cmd&lt;/code&gt;. Works great!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/171588/is-there-a-command-to-refresh-environment-variables-from-the-command-prompt-in-w&quot;&gt;Is there a command to refresh environment variables from the command prompt in Windows?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Go, my &lt;code class=&quot;highlighter-rouge&quot;&gt;%GOPATH&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\projects\go&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I installed perl again, because I needed it a month ago, but I should figure out why. I’d love to
do without Perl and Ruby, and just use C++, Python and Go - and move more to Go and less to Python.&lt;/p&gt;

&lt;p&gt;Is it my imagination, or is a new computer always fast? This reinforces the desire to do boot-from-VHD
so I can have a clean system every month.&lt;/p&gt;

&lt;p&gt;Subversion… sigh. Passwords… sigh.&lt;/p&gt;

&lt;p&gt;7-zip.&lt;/p&gt;

&lt;p&gt;Perforce.&lt;/p&gt;

&lt;p&gt;Firefox.&lt;/p&gt;

&lt;p&gt;WinDirStat.&lt;/p&gt;

&lt;p&gt;WinPCap.&lt;/p&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/windows/#installation&quot;&gt;Jekyll on Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://labs.sverrirs.com/jekyll/&quot;&gt;Jekyll 3 on Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 18 Apr 2017 11:30:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/04/18/Bootstrapping.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/04/18/Bootstrapping.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.dezyre.com/article/top-10-machine-learning-algorithms/202&quot;&gt;Top 10 Machine Learning Algorithms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Statistical_classification&quot;&gt;Statistical classification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.princeton.edu/~schapire/talks/picasso-minicourse.pdf&quot;&gt;Machine Learning Algorithms for Classification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/ml-foundations/lecture/fJqcS/examples-of-classification-tasks&quot;&gt;Coursera Lecture 40 - Examples of classification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://machinelearningmastery.com/a-tour-of-machine-learning-algorithms/&quot;&gt;A Tour of Machine Learning Algorithms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://web.cs.ucdavis.edu/~vemuri/classes/ecs271/lecture3.pdf&quot;&gt;ecs271 Lecture 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://opengrok.github.io/OpenGrok/&quot;&gt;OpenGrok&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rodneybrooks.com/patrick-winston-explains-deep-learning/&quot;&gt;PATRICK WINSTON EXPLAINS DEEP LEARNING&lt;/a&gt;. This is supposed to be excellent.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kam.mff.cuni.cz/~matousek/stml-53-matousek-1.pdf&quot;&gt;Thirty-three Miniatures: Mathematical and Algorithmic Applications of Linear Algebra&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/hybridcloud/2017/04/18/dockercon-2017-powering-new-linux-innovations-with-hyper-v-isolation-and-windows-server/&quot;&gt;DockerCon 2017: Powering new Linux innovations with Hyper-V isolation and Windows Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbn.github.io/fast_proportional_selection/&quot;&gt;Fast Proportional Selection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.itworld.com/article/2826737/development/programmers-who-defined-the-technology-industry--where-are-they-now-.html&quot;&gt;Programmers who defined the technology industry: Where are they now?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.docker.com/2017/04/introducing-linuxkit-container-os-toolkit/&quot;&gt;ANNOUNCING LINUXKIT: A TOOLKIT FOR BUILDING SECURE, LEAN AND PORTABLE LINUX SUBSYSTEMS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/wsl/2017/04/18/file-system-improvements-to-the-windows-subsystem-for-linux/&quot;&gt;File System Improvements to the Windows Subsystem for Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.abigailsee.com/2017/04/16/taming-rnns-for-better-summarization.html&quot;&gt;Taming Recurrent Neural Networks for Better Summarization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.dave-bailey.com/the-magic-formula-to-describe-a-product-in-one-sentence-175ce38619c7&quot;&gt;The Art of Writing One-Sentence Product Descriptions&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Apr 2017 14:45:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/04/17/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/04/17/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://blog.demofox.org/&quot;&gt;The blog at the bottom of the sea&lt;/a&gt; - Alan Wolfe blog.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.scratchapixel.com/&quot;&gt;Scratchapixel 2.0&lt;/a&gt; - learn computer graphics.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://omwtm.blog/2014/12/03/visual-studio-2013-version-numbers-and-updates/&quot;&gt;Visual Studio 2012, 2013, 2015, 2017 Version Numbers and Updates&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Apr 2017 10:30:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/04/13/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/04/13/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Lua cheat sheet</title>
        <description>&lt;p&gt;Semicolons are optional. &lt;code class=&quot;highlighter-rouge&quot;&gt;~=&lt;/code&gt; is not-equals.&lt;/p&gt;

&lt;p&gt;Strings are single-quote or double quote, it’s arbitrary.&lt;/p&gt;

&lt;p&gt;String contatenation operator is &lt;code class=&quot;highlighter-rouge&quot;&gt;..&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;''&lt;/code&gt; are true! Only &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; are false.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; is the undefined type, also used to free vars.&lt;/p&gt;

&lt;p&gt;A range is begin, end [,step], and ranges include both ends.&lt;/p&gt;

&lt;p&gt;If a function has a single parameter that is a string or a table, the parens &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt; are optional.&lt;/p&gt;

&lt;p&gt;Return, function call and assignment take lists, and lists can be mismatched in length;
unmatched receivers are nil, unmatched senders are discarded.&lt;/p&gt;

&lt;p&gt;Tables are it, used for maps and arrays. Array index starts at 1. &lt;code class=&quot;highlighter-rouge&quot;&gt;#table&lt;/code&gt; is length of table.
String keys are the default, and you can index with table.key or table[“key”]. Non-string
keys require aray indexing. Can index by anything except nil. Index by value for numbers and
strings but identity for tables - e.g. two successive {} are different tables.&lt;/p&gt;

&lt;p&gt;a.x is the same as a[“x”]&lt;/p&gt;

&lt;p&gt;Assign nil to a table entry to delete it.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for k,v in pairs(table)&lt;/code&gt; is generic-for table iteration. &lt;code class=&quot;highlighter-rouge&quot;&gt;pairs&lt;/code&gt; is an iterator function.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ipairs&lt;/code&gt; stops at the first non-initialized index.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_G&lt;/code&gt; is a table of all globals.&lt;/p&gt;

&lt;p&gt;Can assign to a table with a list, uses int keys starting at 1.&lt;/p&gt;

&lt;p&gt;Objects are tables. &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog = {}&lt;/code&gt; creates a table, which can be used as an object.&lt;/p&gt;

&lt;p&gt;Modules are tables.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; “operator” is a synonym to add &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; to declarations and uses of object and module functions.&lt;/p&gt;

&lt;p&gt;Numeric for: &lt;code class=&quot;highlighter-rouge&quot;&gt;for begin, end, step&lt;/code&gt;. For loop variable is local to for loop.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function print(...)&lt;/code&gt; - all the arguments are put into an &lt;code class=&quot;highlighter-rouge&quot;&gt;arg&lt;/code&gt; table for the function to access, and
arg.n is the number of elements in the table. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;unpack(arg)&lt;/code&gt; to unpack into list, e.g. to send to
another function.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f{...} lets you make a function call and simulate named arguments - this actuall gets a single
parameter that is a table. It's really &lt;/code&gt;f({…})`.&lt;/p&gt;

&lt;p&gt;Creating a new instance of a class requires some metatable magic so that the new table will forward
its index operations to the class instance”, which has the methods&lt;/p&gt;

&lt;p&gt;```
functin Account:new(o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  return o
``&lt;/p&gt;

&lt;p&gt;So, in other words, &lt;code class=&quot;highlighter-rouge&quot;&gt;a:deposit(100)&lt;/code&gt; is the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;Account.deposit(a, 100)&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;Others have tried to summarize Lua.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lua-users.org/files/wiki_insecure/users/thomasl/luarefv51single.pdf&quot;&gt;The Lua Language (v5.1)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://coffeeghost.net/2010/11/01/lua-cheat-sheet-for-programmers/&quot;&gt;Lua Cheat Sheet for Programmers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tylerneylon.com/a/learn-lua/&quot;&gt;Learn Lua in 15 Minutes&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Apr 2017 10:30:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/04/13/lua-cheat-sheet.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/04/13/lua-cheat-sheet.html</guid>
        
        <category>lua</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Premake notes (2)</title>
        <description>&lt;p&gt;Continuing Premake notes.&lt;/p&gt;

&lt;h2 id=&quot;lua-and-premake&quot;&gt;Lua and Premake&lt;/h2&gt;

&lt;p&gt;The biggest challenge with using Premake in non-trivial ways is that you do need to learn Lua
to some degree. But the advantage of Premake is that at least this is not a new langauge invented
just for the make system. Lua has some quirks of its own, but can be learned quickly by someone
familiar with one or more existing languages.&lt;/p&gt;

&lt;p&gt;The most important thing to realize about Premake is that most Premake “configuration” lines
are actually function calls. This:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;workspace &quot;HelloWorld&quot;
    configurations { &quot;Debug&quot;, &quot;Release&quot; }

project &quot;HelloWorld&quot;
    kind &quot;ConsoleApp&quot;
    files { &quot;**.h&quot;, &quot;**.c&quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;is identical to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;workspace(&quot;HelloWorld&quot;)
    configurations({ &quot;Debug&quot;, &quot;Release&quot; })

project(&quot;HelloWorld&quot;)
    kind(&quot;ConsoleApp&quot;)
    files({ &quot;**.h&quot;, &quot;**.c&quot; })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The Premake idiom is to use the sytax for single-parameter function calls to turn Lua into
an IDL, which works for the most part. But you need to be aware of this, or non-trivial scripts
will feel arbitrary to you.&lt;/p&gt;

&lt;p&gt;The second most important thing to realize about Premake is that the functions &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace(), project()&lt;/code&gt; etc
don’t do work, they add to a data structure. Once Premake has read all the Lua, it then iterates through
the data structure to actually call functions that generate project files. The only way to do procedural
work is to inject your own Lua code through overrides and call arrays. You can put these inline in your
Premake scripts or as modules, and with modules, you can share these with others as third-party modules
(which unfortunately require the module located somewhere in Premake’s search paths)&lt;/p&gt;

&lt;p&gt;You can also create actions and toolsets.&lt;/p&gt;

&lt;h2 id=&quot;configurations&quot;&gt;Configurations&lt;/h2&gt;

&lt;p&gt;To Premake, configurations and platforms are just strings. What you do with them is up to you, and in fact
you have to do some work that’s caused by this flexibility.&lt;/p&gt;

&lt;p&gt;Let’s make a Premake script with two configurations, a debug config and a release config. It will look
something like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;06_min.lua&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;06_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Release&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;configurations:Debug&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_DEBUG&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optimize&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Off&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Symbols&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;configurations:Release&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NDEBUG&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optimize&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;On&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;06_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.cpp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Although you have an idea for what a “Debug build” means, Premake has no idea. Nor should it, because in truth,
there is no one true Debug and Release targets.&lt;/p&gt;

&lt;p&gt;The down side is that you need to list all the things that aren’t default, and it’s hard to keep all the defaults
in your head. Listed above are common settings for Debug and Release targets. This is done using &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, which
is Premake’s way of having settings apply to a subset of the combinations of workspace, project, config, platform,
and so on.&lt;/p&gt;

&lt;p&gt;Filters stay in action until replaced with a new filter. Keep in mind that, like other Premake lines, this
is a function call, and all it’s doing is attaching this to the active scope (global, workspace, project).
An attached filter accepts or rejects subsequent lines. Filters are removed when the scope changes; you can
also remove the active filter with &lt;code class=&quot;highlighter-rouge&quot;&gt;filter {}&lt;/code&gt;. Just like with overzealous use of parens or braces, you could
put &lt;code class=&quot;highlighter-rouge&quot;&gt;filter {}&lt;/code&gt; as an “end”, but as you get used to filters, you’ll find yourself putting the bare minimum in.&lt;/p&gt;

&lt;p&gt;As an aside, the current syntax for symbols is a little goofy and is expecting to change to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    symbols &quot;Off&quot;
    symbols &quot;On&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;platforms&quot;&gt;Platforms&lt;/h2&gt;

&lt;p&gt;Configuration is squisy - let’s talk about platform. In this case, there sometimes are dependencies between
the architecture and the generated code’s “platform” - just don’t confuse those with the platform name in
Premake, which is your arbitrary label.&lt;/p&gt;

&lt;p&gt;We can do this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;workspace &quot;07_min&quot;
    configurations { &quot;Debug&quot;, &quot;Release&quot; }
    platforms { &quot;x32&quot;, &quot;x64&quot; }
    location &quot;build&quot;

   filter &quot;configurations:Debug&quot;
        defines { &quot;_DEBUG&quot; }
        optimize &quot;Off&quot;
        flags { &quot;Symbols&quot; }
   filter &quot;configurations:Release&quot;
        defines { &quot;NDEBUG&quot; }
        optimize &quot;On&quot;

   filter &quot;platforms:x32&quot;
        architecture &quot;x86&quot;
   filter &quot;platforms:x64&quot;
        architecture &quot;x86_64&quot;

project &quot;07_min&quot;
    kind &quot;ConsoleApp&quot;
    files { &quot;**.cpp&quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;OK, an editorial comment. Platform has magic behavior in current versions of Premake. If the platform in Premake
is &lt;code class=&quot;highlighter-rouge&quot;&gt;x32&lt;/code&gt;, then when a Visual Studio project is generated, it has platform &lt;code class=&quot;highlighter-rouge&quot;&gt;Win32&lt;/code&gt; which means architecture &lt;code class=&quot;highlighter-rouge&quot;&gt;x86&lt;/code&gt;.
And if the platform in premake is &lt;code class=&quot;highlighter-rouge&quot;&gt;x64&lt;/code&gt;, then when a Visual Studio project is generated, it has platform &lt;code class=&quot;highlighter-rouge&quot;&gt;x64&lt;/code&gt;,
which means architecture &lt;code class=&quot;highlighter-rouge&quot;&gt;x86-64&lt;/code&gt;. If you use other names as platform, they will be handled properly, for the
most part, but it will look odd. So probably don’t do it.&lt;/p&gt;

&lt;h2 id=&quot;language-and-other-settings&quot;&gt;Language and other settings&lt;/h2&gt;

&lt;p&gt;By default, Premake generates C/C++ projects.&lt;/p&gt;

&lt;p&gt;Premake has the &lt;code class=&quot;highlighter-rouge&quot;&gt;language&lt;/code&gt; keyword, which affects the toolset used by a project. Let’s create some
C# and D source files&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;08_main.cs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public class Hello1
{
   public static void Main()
   {
      System.Console.WriteLine(&quot;Hello, World!&quot;);
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;08_main.d&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-D&quot;&gt;import std.stdio;

void main()
{
    writeln(&quot;Hello, World!&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;08_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Release&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;platforms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x64&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;configurations:Debug&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_DEBUG&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optimize&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Off&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Symbols&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;configurations:Release&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NDEBUG&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optimize&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;On&quot;&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;platforms:x32&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;architecture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x86&quot;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;platforms:x64&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;architecture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x86_64&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;08_cpp&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C++&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.cpp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;08_csharp&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C#&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.cs&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;08_d&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;D&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.d&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And when we build, we will now see three projects: one C++, one C#, and one D. Well, theoretically - I didn’t have
the VisualD compiler installed, so I couldn’t actually verify that it worked.&lt;/p&gt;

&lt;h2 id=&quot;exploring-premake-options&quot;&gt;Exploring Premake options&lt;/h2&gt;

&lt;p&gt;Until the documentation gets better, or someone writes a real book, one way to understand
what will happen is to try it - generate twice, with and without an option, and see what
happens in the generated project.&lt;/p&gt;

&lt;p&gt;So let’s go back to a barebones config, and see what &lt;code class=&quot;highlighter-rouge&quot;&gt;flags { &quot;C++14&quot; }&lt;/code&gt; etc do. We’ll add
output location handling in our scripts so we can write output to different locations.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;09_min.lua&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;newoption&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Set the output location for the generated files&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;09_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_OPTIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;09_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.cpp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10_min.lua&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;newoption&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Set the output location for the generated files&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;09_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_OPTIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C++14&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;09_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.cpp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(naming the output the same so we can compare with a diff tool), and then generate:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ premake5 --file=09_min.lua --to=build1 vs2015
$ premake5 --file=10_min.lua --to=build2 vs2015
merge build1 build2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nothing is different on Visual Studio, because at the moment, Premake doesn’t do anything with the &lt;code class=&quot;highlighter-rouge&quot;&gt;flags { &quot;C++14&quot; }&lt;/code&gt;
setting. This is Visual Studio’s fault - until Visual C++ 2015 Update 3, there weren’t actually any flags to set.&lt;/p&gt;

&lt;p&gt;If we generate and compare XCode or Makefile, we will see a difference. For gmake, we see &lt;code class=&quot;highlighter-rouge&quot;&gt;-std=c++14&lt;/code&gt; added
to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ALL_CXFLAGS&lt;/code&gt; list. For Xcode, we see - nothing. Evidently, this is not supported in the public Xcode
builder either. But if we run this against a prerelease version, then we see &lt;code class=&quot;highlighter-rouge&quot;&gt;c++14&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;CLANG_CXX_LANGUAGE_STANDARD&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;libc++&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;CLANG_CXX_LIBRARY&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Apr 2017 05:30:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/04/13/premake-notes-2.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/04/13/premake-notes-2.html</guid>
        
        <category>premake,</category>
        
        <category>build</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Premake notes</title>
        <description>&lt;h1 id=&quot;basic-premake&quot;&gt;Basic Premake&lt;/h1&gt;

&lt;p&gt;So, making more use of Premake. Let’s build up from the very minimal to something reasonable,
all the while striving for simplicity and lack of duplication.&lt;/p&gt;

&lt;h2 id=&quot;minimal-premake-script&quot;&gt;Minimal premake script&lt;/h2&gt;

&lt;p&gt;This is the minimal Premake script, even if it does nothing:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;00_min.lua&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;00_min&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For each solution, and for each configuration, Premake does stuff. Without a solution, there’s nothing
to attach it to, and without any configurations, nothing gets done.&lt;/p&gt;

&lt;p&gt;Admittedly, if you run this against Premake, you’ll get some fairly useless project files.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ premake5 --file=00_min.lua gmake
$ premake5 --file=00_min.lua vs2015
$ premake5 --file=00_min.lua xcode
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Alas, &lt;code class=&quot;highlighter-rouge&quot;&gt;premake clean&lt;/code&gt; doesn’t work (output says “** The clean action has not yet been ported”)&lt;/p&gt;

&lt;p&gt;I won’t show the generated projects here, but you can run this for yourself and look.&lt;/p&gt;

&lt;h2 id=&quot;almost-useful-premake-script&quot;&gt;Almost useful Premake script&lt;/h2&gt;

&lt;p&gt;Even though projects are really a consequence of IDEs like Visual Studio and XCode, they are required even
if you just build makefile targets. So our real minimal script is this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;01_min.lua&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;01_min&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;01_min&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will generate a solution with a single project in it, with a single target, and no files. You must
specify kind. Sometimes I feel like defaults would be useful, but, that said, no real user of Premake
would trust the defaults.&lt;/p&gt;

&lt;p&gt;Run this and you can build against these generated projects.&lt;/p&gt;

&lt;h2 id=&quot;scopes-indentation-is-an-illusion&quot;&gt;Scopes (Indentation is an illusion)&lt;/h2&gt;

&lt;p&gt;Premake scripts are a special kind of Lua script. For the most part, there are no blocks, so there’s
no control flow, and indentation is actually a little misleading.&lt;/p&gt;

&lt;p&gt;A more human way to write the above is:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;01_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;01_min&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And you should do this, but fight the temptation to think that arbitrary scope rules are in force. Instead,
there are three scopes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;global scope&lt;/li&gt;
  &lt;li&gt;workspace scope&lt;/li&gt;
  &lt;li&gt;project scope&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/premake/premake-core/wiki/Scopes-and-Inheritance&quot;&gt;Scopes and Inheritance&lt;/a&gt; in the Premake5
docs for more details.&lt;/p&gt;

&lt;p&gt;A side note - you may see &lt;code class=&quot;highlighter-rouge&quot;&gt;solution&lt;/code&gt; used in Premake scripts - this is an older alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt;, still supported
in Premake4 but not mentioned in the documentation.&lt;/p&gt;

&lt;p&gt;All workspace scopes are in the global scope, and project scopes are in workspace scopes. Each line of the form
&lt;code class=&quot;highlighter-rouge&quot;&gt;workspace &quot;name&quot;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;project &quot;name&quot;&lt;/code&gt; selects that scope, creating it if necessary.&lt;/p&gt;

&lt;p&gt;You can select the parent of the current project scope with &lt;code class=&quot;highlighter-rouge&quot;&gt;project &quot;*&quot;&lt;/code&gt; - this selects whatever workspace is
the parent of the current project. There is a hack to get back to global scope, and that is &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace &quot;*&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, that said, what you really need to pay attention to is that lines in a Premake script are declarations,
and they are added to the active scope. They are not statements in an imperative program. The reason for this
is that, once you have declared your workspaces and projects, Premake iterates through the workspaces,
configurations and projects to actually generate output.&lt;/p&gt;

&lt;p&gt;Most declarations are settings; settings in a workspace are inherited by all projects in the workspace. So,
in general, prefer to put workspace-wide settings in the relevant workspace. And if there are truly global
settings, put them in the global scope.&lt;/p&gt;

&lt;p&gt;We’ll come back to that&lt;/p&gt;

&lt;h2 id=&quot;adding-files&quot;&gt;Adding files&lt;/h2&gt;

&lt;p&gt;Let’s have a file to add&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;02_main.cpp&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, world&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and then add it to our project:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;02-min.lua&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;02_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;02_min&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.cpp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and after we generate a project and build it, we can run the output&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin\Debug\02_min.exe
Hello, world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s common to use wildcards to add files to projects; the &lt;code class=&quot;highlighter-rouge&quot;&gt;**.cpp&lt;/code&gt; filter means “add files in the current
directory and any sub-directories”. In this case, it only matched one file, but if we write it this way,
we don’t need to update our Premake script if we add more source files. In fact, for C++, we typically want
this:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;02_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;02_min&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.cpp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can get a lot done with just this minimal amount of Premake - we could have hundreds of source files in
many directories.&lt;/p&gt;

&lt;h2 id=&quot;cleaning-up&quot;&gt;Cleaning up&lt;/h2&gt;

&lt;p&gt;We didn’t specify where to put output. Premake has defaults for that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;generated projects go in &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;binaries go in &lt;code class=&quot;highlighter-rouge&quot;&gt;./bin/&amp;lt;target&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;intermediates go in &lt;code class=&quot;highlighter-rouge&quot;&gt;./obj/&amp;lt;target&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; is the location of the Premake script, and not the current working directory. E.g. if we were
in some other directory and ran Premake like this:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;premake5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--file=premake-scripts/tests/02_min.lua vs2015&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;then we would see generated projects in &lt;code class=&quot;highlighter-rouge&quot;&gt;premake-scripts/tests&lt;/code&gt;, and those projects would target locations
in this directory as well.&lt;/p&gt;

&lt;p&gt;First, let’s control where compiler-generated files go. Premake has a &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; function which sets the
location of generated output, so let’s use that to make &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; go in a &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;03_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;03_min&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.cpp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is, alas, where inheritance breaks down. The &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; function is one of the few that aren’t inherited
to contained scopes. So in this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; applies to the workspace only and this has an unexpected
behavior - our generated projects go in our &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; directory. The reason that the project ends up in the
build folder is that a contained project defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;location &quot;.&quot;&lt;/code&gt; which is relative to the enclosing
workspace. Of course, this behaves like it’s inherited, so maybe the technical detail should be ignored.&lt;/p&gt;

&lt;p&gt;But this still has a useful behavior: we can control where generated projects go. In a Premake world, these
are artifacts just like objects and executables. And with everything in a &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; directory, we just have
one directory to clean up (or not commit to source control).&lt;/p&gt;

&lt;p&gt;There are specific functions to set the path for object files and binaries:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;03_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;03_min&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.cpp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;objdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;debug/obj&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;targetdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;debug&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and if we build and run, we’ll see workspace and project in &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;, object files in &lt;code class=&quot;highlighter-rouge&quot;&gt;build/debug/obj&lt;/code&gt;, and binaries
in &lt;code class=&quot;highlighter-rouge&quot;&gt;build/debug&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is where simplicity and maintainability part company. We have hard-coded the configuration name twice; worse,
if we add a new configuration, we’ll be directing files to the wrong location. That’s because the default
paths for &lt;code class=&quot;highlighter-rouge&quot;&gt;objdir&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;targetdir&lt;/code&gt; actually look like this:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;objdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{wks.location}/obj&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;targetdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{wks.location}/bin&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where the syntax &lt;code class=&quot;highlighter-rouge&quot;&gt;%{...}&lt;/code&gt; is a &lt;a href=&quot;https://github.com/premake/premake-core/wiki/Tokens&quot;&gt;Value Token&lt;/a&gt; expression
that is interpolated into the string. In this case, the &lt;code class=&quot;highlighter-rouge&quot;&gt;wks&lt;/code&gt; object is the workspace.&lt;/p&gt;

&lt;p&gt;If we put these into our lua script&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;04_min.lua&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;04_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;04_min&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.cpp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;objdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{wks.location}/obj/%{cfg.buildcfg}&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;targetdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{wks.location}/bin/%{cfg.buildcfg}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;we will see exactly the behavior that we saw before. Of course, you don’t want to be more verbose about default
settings; this is just to illustrate how you can access these. When you can access them, you can change them.&lt;/p&gt;

&lt;p&gt;Returning back to &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; for a minute, let’s set location for both the workspace and the project&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;04_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;04_min&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{wks.location}/prjbuild&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.cpp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If we generate and build, we’ll see a workspace/solution file in &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;, a project file in &lt;code class=&quot;highlighter-rouge&quot;&gt;build/prjbuild&lt;/code&gt;, an
object directory at &lt;code class=&quot;highlighter-rouge&quot;&gt;build/prjbuild/obj&lt;/code&gt;, and a binaries directory at &lt;code class=&quot;highlighter-rouge&quot;&gt;build/prjbuild/bin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note something important - all paths in the Premake script are relative to the Premake script’s location.&lt;/p&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;Short of building Premake yourself and using a system that has a Lua debugger, it’s hard to introspect the
process of generating project files. There are some tricks that can be employed.&lt;/p&gt;

&lt;p&gt;Token expansion happens in Premake script commands. There are a few that can result in inspectable output.&lt;/p&gt;

&lt;p&gt;Let’s add a text file so we can filter on it&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;05_help.txt&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Nothing important
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and we add it to the project along with a filter and a buildmessage&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;05_min.lua&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;05_min&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;05_min&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ConsoleApp&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{wks.location}/prjbuild&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;**.cpp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'files:**.txt'&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buildmessage&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wks.location = %{wks.location}'&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buildcommands&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dir'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buildoutputs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'output.i'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This build rule won’t actually work, of course. But it will put text into the generated project that we can look at.
Of course, if you do this with a Visual Studio target, many of the Premake variables will be translated into
MSBuild variables. From the Premake source&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;vstudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cfg.objdir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(IntDir)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prj.location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(ProjectDir)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prj.name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(ProjectName)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sln.location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(SolutionDir)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sln.name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(SolutionName)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wks.location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(SolutionDir)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wks.name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(SolutionName)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cfg.buildtarget.directory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(TargetDir)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cfg.buildtarget.name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(TargetFileName)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cfg.buildtarget.basename&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(TargetName)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file.basename&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%(Filename)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file.abspath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%(FullPath)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file.relpath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%(Identity)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file.path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%(Identity)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file.directory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%(RootDir)%(Directory)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file.reldirectory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%(RelativeDir)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file.extension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%(Extension)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;but makefile targets won’t do such translation - they will be relative to the Makefile, of course.
Still, in a pinch, you can see what variables are expanding to, since the documentation isn’t all that
clear.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Apr 2017 12:30:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2017/04/12/premake-notes.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/04/12/premake-notes.html</guid>
        
        <category>premake,</category>
        
        <category>build</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

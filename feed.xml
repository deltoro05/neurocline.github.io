<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 16 Feb 2016 00:54:22 -0800</pubDate>
    <lastBuildDate>Tue, 16 Feb 2016 00:54:22 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;Bell Labs (now part of Alcatel-Lucent) has published a book: The Future X Network: Enabling a New Digital Era (Oct 2015); author listed as Marcus Weldon, the Alcatel-Lucent CTO, but apparently the work of the entire group.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://broadbandworldforum.com/files/2015/09/Bell-labs-Future-X-Network-sample.pdf&quot;&gt;sample chapter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://readymag.com/BellLabs/415614/&quot;&gt;overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1498759262/ref=pd_luc_rh_qp_01_03_t_img_lh?ie=UTF8&amp;amp;psc=1&quot;&gt;Amazon link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://howardhinnant.github.io/&quot;&gt;HowardHinnant.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/81870/is-it-possible-to-print-a-variables-type-in-standard-c/20170989#20170989&quot;&gt;Is it possible to print a variable’s type in standard C++?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1487695/c-cross-platform-high-resolution-timer/5524138#5524138&quot;&gt;C++ Cross-Platform High-Resolution Timer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;IANA: Time Zone Database&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ietf.org/timezones/data/leap-seconds.list&quot;&gt;List of all leap seconds to date (early 2016)&lt;/a&gt;. There have been 27 leap seconds (all positive, none negative) from Jan 1972 to July 2015. At first, we were doing a leap second a year, but in the past 15 years, we’ve only had 4 of them. The responsible group is considering halting the issuing of leap seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_time&quot;&gt;Unix time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc6557&quot;&gt;RFC 6557: Procedures for Maintaining the Time Zone Database&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://web.mit.edu/2.75/resources/random/How%20Complex%20Systems%20Fail.pdf&quot;&gt;How Complex Systems Fail&lt;/a&gt;. From the medical profession, but very relevant to software.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.grymoire.com/Unix/Inodes.html&quot;&gt;Inodes - an Introduction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.linux.org/threads/intro-to-inodes.4130/&quot;&gt;Intro to Inodes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.linfo.org/inode.html&quot;&gt;Inode definition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.kubernetes.io/2016/02/sharethis-kubernetes-in-production.html&quot;&gt;ShareThis: Kubernetes In Production&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aeon.co/essays/generational-labels-are-lazy-useless-and-just-plain-wrong&quot;&gt;Against generations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bup/bup&quot;&gt;bup/bup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://octavore.com/posts/2016/02/15/distributing-go-apps-os-x&quot;&gt;How to Distribute Binaries for OS X Using Homebrew&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/linux/library/l-anatomy-ext4/&quot;&gt;Anatomy of ext4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://support.microsoft.com/en-us/kb/129574&quot;&gt;Time stamp changes with daylight savings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2532729/daylight-saving-time-and-time-zone-best-practices&quot;&gt;Daylight saving time and time zone best practices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wireshark.org/docs/wsug_html_chunked/ChAdvTimezones.html&quot;&gt;Wireshark: 7.6. Time Zones&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;ftp://pvictor.homeftp.net/public/Sci_Library/Phys%20Library/PPop_Popular-level/Jones%20T.%20%20Splitting%20the%20second%20-%20the%20story%20of%20atomic%20time%20(IOP,%202000)(202s).pdf&quot;&gt;Splitting the second: The Story of Atomic Time&lt;/a&gt;. A book on the making of atomic time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.twinsun.com/tz/tz-link.htm&quot;&gt;Sources for Time Zone and Daylight Saving Time Data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dubeiko.com/development/FileSystems/HFSPLUS/tn1150.html&quot;&gt;Technical Note TN1150: HFS Plus Volume Format&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nobius.org/~dbg/practical-file-system-design.pdf&quot;&gt;Practical File System Design with the Be File System&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hierarchical_File_System&quot;&gt;Hierarchical File System&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/docs/guides/working-with-different-filesystems/&quot;&gt;Node.js: Working with Different Filesystems&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3344.pdf&quot;&gt;Toward a Standard C++ ’Date’ Class&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/atemerev/skynet&quot;&gt;Skynet 1M concurrency microbenchmark&lt;/a&gt;. Go is fast, but .NET is faster, and RxJava is the fastest. Except on Linux?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://panthema.net/2009/cryptote/&quot;&gt;CryptoTE&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Feb 2016 15:31:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/14/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/14/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Time points</title>
        <description>&lt;p&gt;Part 1 in a series.&lt;/p&gt;

&lt;p&gt;Measuring points in time is conceptually simple, and yet we’ve managed to make a big mess of it
over the past few thousand years. I think it can be fixed. I’m going to present a system that is
always correct but can also be used with any past, present or future method of labelling moments
in time. In the process, we’re going to talk about many of the ways that we have been measuring
and labelling time, because no new system can be used in a vacuum, we have to work with existing
systems.&lt;/p&gt;

&lt;h1 id=&quot;the-problem-with-time&quot;&gt;The problem with time&lt;/h1&gt;

&lt;p&gt;The universe was born, we think, in a big explosion 13.82 billion years ago, and time has been
marching steadily on ever since, relativity notwithstanding.&lt;/p&gt;

&lt;p&gt;At first, our issues with measuring time and labelling points in time were that we had very
poor instruments to do so. Initially, we looked in the sky and declared time based on the position
of the sun in the sky. Since we didn’t move around much, we didn’t realize that the sun is
in different positions in the sky based on where on Earth you are located; noon for the Egyptians
was early morning for Britons. Label this problem 1.&lt;/p&gt;

&lt;p&gt;As we got more accurate at measuring time, we noticed that the point of noon shifts; since the
Earth’s axis is not at right angles to the orbit around the sun, the length of the day grows and
shortens during the orbit (a solar day differs by about 20 seconds from aphelion to perihelion).
Eventually we stopped trying to measure the day by the sun and just declared “a second is this
arbitrary fixed amount”, “a day is 86400 seconds”, “a year is 365 days”.&lt;/p&gt;

&lt;p&gt;Of course, the orbit of the Earth around the sun isn’t exactly 31,536,000 seconds. Instead, it’s more
like 31,558,118 seconds. So first we introduced leap years to add a day every 4 years, then we removed
leap days every 100 years, then we added back a leap day every 400 years, and then we fiddle with
leap seconds to further fine-tune it, all to keep noon being noon.&lt;/p&gt;

&lt;p&gt;And then, of course, the Earth is actually slowing down - the day is about 2 milliseconds longer compared
to when we first set up the value for a second as an absolute value instead of something relative
to the Earth’s rotation around its axis and orbit around the sun.&lt;/p&gt;

&lt;p&gt;And we haven’t even left the Earth yet, to any appreciable degree. Imagine how much more complicated
it will be when some of us are living on Earth, others on Mars, and others in habitats in space either
orbiting planets or our sun or even traveling between stars or orbiting other stars.&lt;/p&gt;

&lt;h1 id=&quot;absolute-seconds&quot;&gt;Absolute seconds&lt;/h1&gt;

&lt;p&gt;We have an absolute second - we haven’t fiddled with its definition since it was first formally
created in 1967 as the number of cycles of radiation from a specific Cesium-133 transition. If you’re
curious, the definition is this: “The second is the duration of 9,192,631,770 periods of the radiation
corresponding to the transition between the two hyperfine levels of the ground state of the caesium-133
atom”. TAI, or International Atomic Time&lt;/p&gt;

&lt;p&gt;Since we have absolute seconds, and we know the age of the Universe down to a pretty precise value,
in some respects we have an absolute time scale that we can use, assuming we can figure out how to
handle relativity. It might be something akin to what we did with UTC, we picked a mostly arbitrary
point and said “here is zero”. So we might pick some patch of space and say “here is the standard
clock, all other times are relative to this point in space”. We can ignore that for now, though,
and just fix our time issues sans worrying about relativity’s effect on the “absolute” value of time.&lt;/p&gt;

&lt;p&gt;If we had started with this, we would be done. Except, there are reasons for all our relative measures;
large absolute numbers are hard to use and would create new problems. More importantly, we can’t erase
the past, and we don’t have enough power to mandate a switchover.&lt;/p&gt;

&lt;p&gt;Still, keep this in mind. There is some absolute scale of seconds; it is linear, and it goes back to
the origin of the universe. We really don’t even care what that origin point is; we can pick some
arbitrary point in time in recent history, call it zero, and then times before that point are simply
represented by negative numbers. So let’s pick the point at which TAI really came into existence in the
absolute form we have now, 1 January 1977 00:00:00.&lt;/p&gt;

&lt;p&gt;Here is the important point to keep in mind for the next sections: there is an absolute and linear time
scale, even if we have a hard time measuring it. All of our measurements will be approximations to
the real time with some degree of error.&lt;/p&gt;

&lt;p&gt;This is not a new concept in and of itself (see Terrestrial Time). But we need some layers so that we
can use it in our day-to-day life.&lt;/p&gt;

&lt;h1 id=&quot;bibliography&quot;&gt;Bibliography&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://adsabs.harvard.edu/cgi-bin/nph-bib_query?bibcode=1986CeMec..38..155G&quot;&gt;Is the International Atomic Time TAI a Coordinate Time or a Proper Time?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Terrestrial_Time&quot;&gt;Terrestrial Time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;ftp://pvictor.homeftp.net/public/Sci_Library/Phys%20Library/PPop_Popular-level/Jones%20T.%20%20Splitting%20the%20second%20-%20the%20story%20of%20atomic%20time%20(IOP,%202000)(202s).pdf&quot;&gt;Splitting the Second&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tzyGjOm8AKo&quot;&gt;CppCon 2015: Howard Hinnant “A C++14 approach to dates and times”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://howardhinnant.github.io/date_algorithms.html&quot;&gt;chrono-Compatible Low-Level Date Algorithms&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Feb 2016 01:00:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/14/time-points.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/14/time-points.html</guid>
        
        <category>programming</category>
        
        <category>time</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>The superset approach</title>
        <description>&lt;p&gt;The software world is a diverse place. There’s more than one way to do it, whether we like it
or not. This can be exhilarating when it works in our favor, frustrating when it does not,
and problematic when we want to have common behavior in the face of all this choice.&lt;/p&gt;

&lt;p&gt;Take filesystems, for example. There are several families of filesystems; all have the same
basic features. Files are collections of bytes that can be located by a name, almost always
organized as a hierarchy of directories. Files have attributes: different kinds of time values
(birth, change, modify, access), access control, file type, and more. Names themselves can
be just a meaningless string of bytes, but more typically as an encoding such as ASCII or
Unicode. I didn’t leave out size; strictly speaking, size is not an attribute, it’s a
consequence of the file data. However, most filesystems do treat this like an attribute.&lt;/p&gt;

&lt;p&gt;So imagine you want to make a backup program, or some kind of catalog system, that wants
to record some or all of a filesystem’s information. Or imagine that you are trying to
present a uniform API to access any filesystem. There are two approaches. One is the
least common denominator approach, and indeed many filesystem libraries take this approach.
But it is an unsatisfying and even dangerous approach. Imagine that you wrote a backup
program using least-common denominator APIs. How likely is it that you can restore files
to the original filesystem? In fact, this leads to inferior programs using the subset
API, and drives developers who want to excel into writing programs specific to each domain.&lt;/p&gt;

&lt;p&gt;A far better approach is the superset approach. Support every feature, and have fallbacks
when filesystems don’t fully support a particular feature. This is a little more work at
first, or even a lot of work, but can have a big payoff.&lt;/p&gt;

&lt;p&gt;Credit to Node.js for calling this out in their guide on working with filesystems. See
&lt;a href=&quot;https://nodejs.org/en/docs/guides/working-with-different-filesystems/&quot;&gt;Working with Different Filesystems&lt;/a&gt;.
But this is a general approach, and not just for filesystems. So let’s look at it in the context
of several different feature sets that see great variety. We’ll start with filesystems.&lt;/p&gt;

&lt;h1 id=&quot;filesystem-superset&quot;&gt;Filesystem superset&lt;/h1&gt;

&lt;h2 id=&quot;file-times&quot;&gt;File times&lt;/h2&gt;

&lt;p&gt;Windows NTFS files have 100-nanosecond resolution, and are 64-bit values with the epoch set at
1600 A.D UTC. There are four values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create time: when the file was first created&lt;/li&gt;
  &lt;li&gt;Last metadata change: when the file attributes were altered&lt;/li&gt;
  &lt;li&gt;Last modified time: when the file contents were last altered (write)&lt;/li&gt;
  &lt;li&gt;Last access time: when the file contents were last accessed (read or write)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Posix files have 1-second resolution, and are 32-bit or 64-bit values with the epoch set
at 1970 A.D. Unfortunately, it is not specified as to whether times are UTC or some other
time zone. Posix has three values&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Change time: when the file inode was changed&lt;/li&gt;
  &lt;li&gt;Modified time: when the file data was changed&lt;/li&gt;
  &lt;li&gt;Access time: when the inode or data was accessed (read or write)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mac HFS+ files have 1-second resolution and are 32-bit values with the epoch set at 1904 A.D
UTC.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create date: when the file was created&lt;/li&gt;
  &lt;li&gt;Modify date: when the file was modified&lt;/li&gt;
  &lt;li&gt;Attribute mod date: when file attributes or directory contents where changed (Mac OS X only)&lt;/li&gt;
  &lt;li&gt;Backup date: when the file was last backed up&lt;/li&gt;
  &lt;li&gt;Access date: when the file was last read&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that there are similarities, but none of those filesystems is exactly like any other.
If we decide that all filetimes are in seconds, then we don’t record Windows NTFS file times
properly. Also, while Posix talks about 1-second resolution for file times, this is decidedly
not true for all filesystems; ext4 supports nanosecond resolution on stored files if the volume
is configured for inodes that are 256 bytes or bigger.&lt;/p&gt;

&lt;p&gt;Note that the C library, Python, Go and so forth present a uniform API that is a subset API.
This makes getting “real” filetimes impossible.&lt;/p&gt;

&lt;p&gt;Instead, we should just get the full data from a filesystem, and then have various ways for
our user code to access it. We could query for what is really stored, or we can ask for it in
a format we want and have the underlying data converted to what we want to see. So if our
user program wants to work with nanosecond times, we’d be given Windows NTFS times multipied
by 10, and Posix times multiplied by 1 billion. But we could be given ext4 files at their
full resolution.&lt;/p&gt;

&lt;p&gt;Or if we wanted our epoch to be 2000 A.D., we could ask for file times set to this epoch, and
have their metadata translated where possible. We would not permanently convert in any case,
although some operations would require a one-way and potentially lossy conversion. For example,
assume we have a NTFS backup, and we need to restore it to an HFS+ volume; some time resolution
would be lost.&lt;/p&gt;

&lt;p&gt;And then we have time zones. Some filesystems and operating systems do all of the underlying
time operations in UTC, and conversion to the local time zone is just for the convenience of
the user. There’s a problem here with daylight savings, the practice in many countries to move
the clock back or forth by an hour depending on the season. If filetimes are stored in UTC, and
displayed in the local timezone, then a naive algorithm will cause all the filetimes to appear
to shift backwards or forwards by an hour when daylight savings comes or goes. This in fact
caused all kinds of havoc to build systems and source control systems on Windows, so much so
that Microsoft introduced a “fix” that was worse than the problem; when saving a file created
during when daylight savings is in effect, it writes a UTC time offset by the daylight savings
offset (typically 1 hour), so that the adjustment to local time stays consistent when daylight
savings changes. Of course, this means that the wrong time is written for half of the year.&lt;/p&gt;

&lt;p&gt;There is a slightly better answer, and that is to do the time zone conversion with the awareness of when
in each year daylight savings occurred. It has only happened a few dozen times since we first
started saving files to disk, so we could just remember all the times when this happened, and
adjust file times in the past to their adjusted local time zone. To my knowledge, no one is doing
this, which is sad.&lt;/p&gt;

&lt;p&gt;There is one further problem in that there are discontinuities in time values. Even with UTC,
we are adjusting the clock by seconds to account for the slowing of the Earth (UT is Universal
Time which has no adjustments, UTC is Universal Time Coordinated which has had 20-odd 1-second
adjustments in the past 40 years). And with daylight savings, we have entire hours that are either
missing or duplicated.&lt;/p&gt;

&lt;h2 id=&quot;file-name-encodings&quot;&gt;File name encodings&lt;/h2&gt;

&lt;p&gt;Another problematic area is in recording file names. While file names inside the file system
are really just very long opaque identifiers, file names are usually for the benefit of people, who
want to read them, sort them, do substring searches, and synthesize them. This requires the
use of an encoding.&lt;/p&gt;

&lt;p&gt;Of course, there is no one true encoding. Before the 1990s, file systems skirted the issue by
just writing bytes, but interpreting them with the local encoding. This quickly stopped being feasible
when use of computers and filesystems spread across the world. Even the introduction of Unicode
didn’t result in this being solved completely, due to the multiplicity of Unicode encodings and
normalizations.&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Feb 2016 22:27:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/13/the-superset-approach.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/13/the-superset-approach.html</guid>
        
        <category>programming</category>
        
        <category>design</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527#.qfeojmnq4&quot;&gt;So you want to write a package manager&lt;/a&gt;. This is halfway between a rant and a proposal and a theory of programming language package managers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apple/swift-package-manager&quot;&gt;apple/swift-package-manager&lt;/a&gt;. The Package Manager for the Swift Programming Language. Apple is working on an integrated package system for Swift.&lt;/p&gt;

&lt;p&gt;Where do you put user/program files on various operating systems?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/files/folders&quot;&gt;Folder Structures Used by npm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/cli/cache&quot;&gt;npm-cache&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/misc/config&quot;&gt;npm-config&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/packages.html&quot;&gt;GHC Packages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration&quot;&gt;Customizing Git - Git Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://unix.stackexchange.com/questions/48870/global-bash-profile&quot;&gt;Global bash_profile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/bb762494.aspx&quot;&gt;CSIDL&lt;/a&gt;. Windows known folders&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/dd378457.aspx&quot;&gt;KNOWNFOLDERID&lt;/a&gt;. The modern version, but see CSIDL for what things actually mean.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/CaptainCrowbar/unicorn-lib&quot;&gt;Unicorn Library&lt;/a&gt;. Unicode library for C++ by Ross Smith.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://subuser.org/&quot;&gt;Subuser - Portability, Security, Maintainability&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://engineering.pinterest.com/blog/open-sourcing-teletraan-code-deployment-system&quot;&gt;Open-sourcing Teletraan, a code deployment system&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some arguments over ggplot2 (the “better” R graphing system). Read all of these and you’ll probably love ggplot2 and R. Also see &lt;a href=&quot;http://swirlstats.com/&quot;&gt;swirl&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://simplystatistics.org/2016/02/11/why-i-dont-use-ggplot2/&quot;&gt;Why I don’t use ggplot2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://varianceexplained.org/r/why-I-use-ggplot2/&quot;&gt;Why I use ggplot2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://varianceexplained.org/r/teach_ggplot2_to_beginners/&quot;&gt;Don’t teach built-in plotting to beginners (teach ggplot2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://www.pybloggers.com/tree-kernels-quantifying-similarity-among-tree-structured-data/&quot;&gt;Tree Kernels: Quantifying Similarity Among Tree-Structured Data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jorgecastro.org/2016/02/12/super-fast-local-workloads-with-juju/&quot;&gt;Super Fast Local Workloads With LXD, ZFS, and Juju&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Feb 2016 17:19:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/12/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/12/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://babun.github.io/&quot;&gt;Babun&lt;/a&gt;. A Windows shell you will love - except it’s mostly just a packaged Cygwin. But maybe that’s enough?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://corte.si/posts/modd/announce/index.html&quot;&gt;modd: a flexible tool for responding to filesystem change&lt;/a&gt; and &lt;a href=&quot;https://github.com/cortesi/modd&quot;&gt;repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@chrstphrhrt/microservices-the-unix-philosophy-and-the-richardson-maturity-model-425abed44826#.myo0t8nfz&quot;&gt;API microservices, the Unix philosophy, and the Richardson Maturity Model&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mholt.github.io/curl-to-go/&quot;&gt;curl-to-Go&lt;/a&gt;. Dynamically converts curl commands to tiny Go programs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bokeh.pydata.org/en/latest/&quot;&gt;Bokeh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jbranchaud/til&quot;&gt;TIL - Today I Learned&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mustafaak.in/2016/02/08/writing-my-own-init-with-go.html&quot;&gt;Writing my own init with Go - Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html&quot;&gt;How to do distributed locking&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.wired.com/2016/02/the-hunt-for-the-algorithms-that-drive-life-on-earth/&quot;&gt;The Hunt for the Algorithms That Drive Life on Earth&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ZIP file handling in C/C++&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nmoinvaz/minizip&quot;&gt;minizip&lt;/a&gt;. Fairly comprehensive, built on top of zlib. I think this is based on Giles Volant code for Winimage, see &lt;a href=&quot;http://www.winimage.com/zLibDll/minizip.html&quot;&gt;Minizip: Zip and UnZip additional library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sebastiandev/zipper&quot;&gt;Zipper&lt;/a&gt; is a C++ wrapper on top of minizip.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.nih.at/libzip/index.html&quot;&gt;libzip&lt;/a&gt; is another library for reading/writing ZIP archives, and has seen use in some big programs. Unfortunately, it has an attribution license (binaries must reproduce the libzip copright notice).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vilipetek.com/2013/11/22/zippingunzipping-files-in-c/&quot;&gt;Zipping/Unzipping files in C++&lt;/a&gt; is a more barebones approach, again built on top of zlib. Except that there’s almost no code here, so does zlib itself have zipfile support?&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/7530/Zip-Utils-clean-elegant-simple-C-Win&quot;&gt;Zip Utils - clean, elegant, simple, C++/Win32&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Dead2/zlib-ng&quot;&gt;Dead2/zlib-ng&lt;/a&gt;. Zlib fork because the author wanted changes that were not being accepted upstream.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Feb 2016 09:10:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/11/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/11/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Company Tech Blogs</title>
        <description>&lt;p&gt;A number of companies have tech blogs that are more than just self-aggrandizement or PR.&lt;/p&gt;

&lt;h1 id=&quot;google&quot;&gt;Google&lt;/h1&gt;

&lt;p&gt;Google is the champion. I have no idea how many tech blogs they have. Here are the ones I know about. I have no doubt that there are others.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://googleblog.blogspot.com/&quot;&gt;Official Google Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://googlepublicpolicy.blogspot.com/&quot;&gt;Google Public Policy Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://googleforstudents.blogspot.com/&quot;&gt;Google Student Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://officialandroid.blogspot.com/&quot;&gt;Official Android Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chrome.blogspot.com/&quot;&gt;Google Chrome Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://google-latlong.blogspot.com/&quot;&gt;Google Lat Long&lt;/a&gt;. The official blog for Google Maps.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://googledevelopers.blogspot.com/&quot;&gt;Google Developers Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://googleadsdeveloper.blogspot.com/&quot;&gt;Google Ads Developer Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://android-developers.blogspot.com/&quot;&gt;Android Developers Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://googletesting.blogspot.com/&quot;&gt;Google Testing Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://youtube-eng.blogspot.com/&quot;&gt;YouTube Engineering and Developers Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://googleforwork.blogspot.com/&quot;&gt;Official Google for Work Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://google-opensource.blogspot.com/&quot;&gt;Google Open Source Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://googleresearch.blogspot.com/&quot;&gt;Research Blog&lt;/a&gt;. Google Research Blog.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://googlecloudplatform.blogspot.com/&quot;&gt;Google Cloud Platform Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google also does research and publishes research articles&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.google.com/pubs/papers.html&quot;&gt;Research at Google&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;microsoft&quot;&gt;Microsoft&lt;/h1&gt;

&lt;p&gt;I’m sure this is only scratching the surface. That said, Microsoft is still only a sometime
tech blogger, most of their communication is in tech docs, magazines and books, or in PR pieces.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.com/&quot;&gt;The Official Microsoft Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.technet.com/&quot;&gt;TN Home - TechNet Blogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/&quot;&gt;MSDN Blogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.windows.com/&quot;&gt;Windows Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;netflix&quot;&gt;Netflix&lt;/h1&gt;

&lt;p&gt;Netflix is moderately unique when it comes to tech blogging, its blogs exist to describe its
internal technology; it develops all its tech to run its infrastructure, and releases large portions as open source.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://techblog.netflix.com/&quot;&gt;The Netflix Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As part of their semi-open stance, they have a unified open source presence/portal on Github.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://netflix.github.io/&quot;&gt;Netflix Open Source Software&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The community put this summary description of their software stack together&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackshare.io/netflix/netflix&quot;&gt;Netflix’s Tech Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;github&quot;&gt;GitHub&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://githubengineering.com/&quot;&gt;GitHub Engineering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/blog/category/engineering&quot;&gt;The GitHub Blog: Engineering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;facebook&quot;&gt;Facebook&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.facebook.com/posts/&quot;&gt;Engineering Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.facebook.com/blog/ai/&quot;&gt;Research at Facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;apple&quot;&gt;Apple&lt;/h1&gt;

&lt;p&gt;I don’t think Apple has any tech blogs.&lt;/p&gt;

&lt;h1 id=&quot;ibm&quot;&gt;IBM&lt;/h1&gt;

&lt;p&gt;There are a lot, I should track them down. Most of IBM’s technical content is not presented in blogs, but
in sources like developerWorks.&lt;/p&gt;

&lt;h1 id=&quot;assorted&quot;&gt;Assorted&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Atlassian: &lt;a href=&quot;https://developer.atlassian.com/blog/&quot;&gt;Atlassian Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Cockroach Labs: &lt;a href=&quot;http://www.cockroachlabs.com/blog/&quot;&gt;Blog | Cockroach Labs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dropbox: &lt;a href=&quot;https://blogs.dropbox.com/tech/&quot;&gt;Dropbox Tech Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;eBay: &lt;a href=&quot;http://www.ebaytechblog.com/&quot;&gt;eBay Tech Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Heroku: &lt;a href=&quot;https://engineering.heroku.com/&quot;&gt;Heroku Engineering Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Instagram: &lt;a href=&quot;http://instagram-engineering.tumblr.com/&quot;&gt;Instagram Engineering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;LinkedIn: &lt;a href=&quot;https://engineering.linkedin.com/blog&quot;&gt;LinkedIn Engineering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PayPal: &lt;a href=&quot;https://devblog.paypal.com/category/engineering/&quot;&gt;PayPal Developer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pinterest: &lt;a href=&quot;https://engineering.pinterest.com/blog&quot;&gt;Pinterest engineering blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Riot Games: &lt;a href=&quot;http://engineering.riotgames.com/&quot;&gt;Riot Games Engineering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spotify: &lt;a href=&quot;https://labs.spotify.com/&quot;&gt;Spotify | Labs&lt;/a&gt;. Spotify’s Engineering and Technology Blog.&lt;/li&gt;
  &lt;li&gt;Square: &lt;a href=&quot;https://corner.squareup.com/&quot;&gt;The Corner&lt;/a&gt;. Square Engineering Blog.&lt;/li&gt;
  &lt;li&gt;StackOverflow: &lt;a href=&quot;http://blog.stackoverflow.com/engineering/&quot;&gt;Stack Overflow Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;StackShare: &lt;a href=&quot;http://stackshare.io/posts&quot;&gt;StackShare&lt;/a&gt;. StackShare Blog&lt;/li&gt;
  &lt;li&gt;Yahoo: &lt;a href=&quot;http://yahooeng.tumblr.com/&quot;&gt;Yahoo Engineering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kilimchoi/engineering-blogs&quot;&gt;kilimchoi/engineering-blogs&lt;/a&gt;. A curated list of engineering blogs&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.slicedham.co/&quot;&gt;SlicedHam&lt;/a&gt;. Aggregated dev blog posts from all over the web.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.thoughtworks.com/insights&quot;&gt;Thoughtworks&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Feb 2016 12:20:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/09/company-tech-blogs.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/09/company-tech-blogs.html</guid>
        
        <category>blog</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;XCode is very spammy, and there are lots of files you don’t want in source control&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects&quot;&gt;Git ignore file for Xcode projects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/adamgit/3786883&quot;&gt;.gitignore file for Xcode4 / OS X Source projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stack Exchange is going through a long and moderately painful process to clarify attribution. This
seems to be driven by a combination of two things; the belief that everything is copyrighted, and
our (overly?) litigious society. Editorial note: this should not be necessary, even large code
snippets are not so masterful that they need or deserve copyright protection.
&lt;a href=&quot;http://meta.stackexchange.com/questions/272956/a-new-code-license-the-mit-this-time-with-attribution-required&quot;&gt;A New Code License: The MIT, this time with Attribution Required&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/8709383/installing-git-html-help-on-osx&quot;&gt;Installing Git HTML Help on OSX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Public Domain Curses is a project to make ncurses available for “not-Unix”; currently it covers
DOS, OS/2, Win32, X11 and SDL. There is an interesting fork that directly uses Win32 APIs that
the developer is trying to get merged into the main version.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;project page on SourceForge: &lt;a href=&quot;http://pdcurses.sourceforge.net/&quot;&gt;Public Domain Curses&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;source on GitHub: &lt;a href=&quot;https://github.com/wmcbrine/PDCurses&quot;&gt;wmcbrine/PDCurses&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Win32 GDI fork old project page: &lt;a href=&quot;http://www.projectpluto.com/win32a.htm&quot;&gt;PDCurses for “real” Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Win32 GDI fork on GitHub: &lt;a href=&quot;https://github.com/Bill-Gray/PDCurses&quot;&gt;Bill-Gray/PDCurses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Book catalog software&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.collectorz.com/&quot;&gt;Book Collector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.koingosw.com/products/librarianpro/&quot;&gt;Librarian Pro 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Audio players&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.audiofile-engineering.com/fidelia/&quot;&gt;Fidelia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tmkk.undo.jp/xld/index_e.html&quot;&gt;X Lossless Decoder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://computers.tutsplus.com/tutorials/an-audiophiles-guide-to-os-x--cms-20027&quot;&gt;An Audiophile’s Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://www.messynessychic.com/2016/01/29/meet-lilli-the-high-end-german-call-girl-who-became-americas-iconic-barbie-doll/&quot;&gt;Meet Lilli, the High-end German Call Girl who became America’s Iconic Barbie Doll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tormeh.github.io/fumurt.html&quot;&gt;Fumurt - A Programming Language with Deterministic Multithreading&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Racket and CoreOS&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://coreos.com/blog/getting-started-with-rkt-1.0.html&quot;&gt;Get Started with rkt Containers in Three Minutes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coreos.com/blog/rkt-hits-1.0.html&quot;&gt;The Security-minded Container Engine by CoreOS: rkt Hits 1.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.docker.com/2016/02/docker-1-10/&quot;&gt;Docker 1.10: New Compose file, improved security, networking and much more!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joeyh/github-backup&quot;&gt;github-backup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.easypost.com/docs&quot;&gt;easyPost docs&lt;/a&gt;. Yet another group doing really good-looking documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.wildml.com/deep-learning-glossary/&quot;&gt;Deep Learning Glossary&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Feb 2016 12:25:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/06/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/06/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Experimenting with modules in C++</title>
        <description>&lt;p&gt;There is a proposal to add modules to the C++ standard.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4465.pdf&quot;&gt;A Module System for C++ (Revision 3)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This builds on a much earlier proposal in 2006 by Daveed Vandevoorde&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2073.pdf&quot;&gt;Modules in C++&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Microsoft has done an early implementation in Visual Studio 2015 Update 1 (because the authors of the
new module proposal package work at Microsoft)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/vcblog/2015/12/03/c-modules-in-vs-2015-update-1/&quot;&gt;C++ Modules in VS 2015 Update 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m not terribly excited about some parts of their proposal and implementation. But I should play with it. So. I will play with it.
Update to come.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3596147/c-modules-why-were-they-removed-from-c0x-will-they-be-back-later-on&quot;&gt;C++ Modules - why were they removed from C++0x? Will they be back later on?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2869.html&quot;&gt;State of C++ Evolution (Post San Francisco 2008)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://clang.llvm.org/docs/Modules.html&quot;&gt;Clang 3.9 - Modules&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lambda-the-ultimate.org/node/4649&quot;&gt;A module system for the C family&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=RwdQA0pGWa4&quot;&gt;CppCon 2015: Gabriel Dos Reis “Large Scale C++ with Modules: What You Should Know”&lt;/a&gt; and &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/talks/Large-Scale-C%2B%2B-With-Modules.pdf&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://llvm.org/devmtg/2012-11/Gregor-Modules.pdf&quot;&gt;Modules&lt;/a&gt; and &lt;a href=&quot;http://llvm.org/devmtg/2012-11/videos/Gregor-Modules.mp4&quot;&gt;video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kennykerr.ca/2015/12/03/getting-started-with-modules-in-c/&quot;&gt;Getting Started with Modules in C++&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Feb 2016 17:05:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/04/experimenting-with-modules-in-cpp.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/04/experimenting-with-modules-in-cpp.html</guid>
        
        <category>C++</category>
        
        <category>standard</category>
        
        <category>modules</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Formatting code</title>
        <description>&lt;p&gt;A long time ago, I was looking into writing a parser that treated comments and whitespace
as first-class citizens; not in the language grammar, but because I wanted to write
code formatters that handled comments more gracefully. It looks like the Go team ran
into this when making &lt;code&gt;go fmt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://talks.go-zh.org/2015/gofmt-en.slide#1&quot;&gt;The Cultural Evolution of gofmt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The notes in Robert Griesemer’s presentation mention doing stuff ad-hoc and TBD to make
it more integrated with the AST. And that’s what I had been considering - there’s the grammar
for generating code, and then there’s the grammar for the meaning that the source code
itself conveys, which includes where comments are “attached” to code.&lt;/p&gt;

&lt;p&gt;And on a related note, and also in &lt;code&gt;go fmt&lt;/code&gt;, tab stops are a royal pain in the ass.
It’s much better to think of tab stops at the semantic level and not at the implementation
level of “go to fixed tab stop”. This is a proposal from 10 years ago to do exactly that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nickgravgaard.com/elastic-tabstops/&quot;&gt;Elastic Tabstops&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s interesting how problems can live for years and years, and keep coming up sporadically,
and never actually be “solved”. It’s getting close to the time where this needs to be solved.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Feb 2016 16:55:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/04/formatting-code.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/04/formatting-code.html</guid>
        
        <category>code</category>
        
        <category>formatting</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Can we get rid of make?</title>
        <description>&lt;p&gt;Roughly congruent with the development of C and Unix, the &lt;code&gt;make&lt;/code&gt; build automation tool
was invented (originally created in 1976 by Stuart Feldman). Make replaced ad-hoc build
shell scripts that accompanied each program’s source.&lt;/p&gt;

&lt;p&gt;As wonderful as Make was originally, it has a number of flaws:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the syntax is cumbersome for all but trivial programs, and virtually unworkable for large ones (most make files are copied from other make files).&lt;/li&gt;
  &lt;li&gt;there is no standard; many different make programs, all with incompatible features and syntax&lt;/li&gt;
  &lt;li&gt;make is very tied to Unix and sh&lt;/li&gt;
  &lt;li&gt;recursive make is very slow, but non-recursive make on large programs is nearly infeasible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The standardization part is not quite true - POSIX did finally standardize the basic features and
function of Make, but it was too little and too late. And there is GNU Make which is widely used,
and the standard on Linux and Mac OS X.&lt;/p&gt;

&lt;p&gt;Go tried to get rid of the need for make by putting simple build feature support into the language
itself. However, I notice that any reasonable-sized Go program comes with a Makefile, at least on
Linux and Mac OS X. And this is not from inertial - the makefiles are absolutely necessary, because
large programs are never just all code in a single language.&lt;/p&gt;

&lt;p&gt;I’m not even counting the true sin of Make, which was to cause Autotools to need to be invented. Autotools
is the true plague on the land. We’ll talk about that another time.&lt;/p&gt;

&lt;p&gt;How can we improve the state of the art in building software? More and more, the world is polyglot, which
implies the need for something like Make, but we’re also turning back away from a platform monoculture.
The things we can count on that cross platforms at the moment are a handful of widely used programming
languages, chief among them being C and C++; there is no platform or architecture I know of that’s in use
that doesn’t have a C compiler, and usually at least a GCC target.&lt;/p&gt;

&lt;p&gt;First, we can reduce the problem space, by chipping away at both ends.&lt;/p&gt;

&lt;p&gt;I know I slightly disparaged Go, but it has succeeded in removing the need for Make and Makefiles for
the vast majority of Go programs. And, Makefiles for large Go programs are much simpler than they would
otherwise be. Go is close, and is gaining features that might get it to 100%. More languages should embed
features that make building single-language code bases automatic, regardless of their size.&lt;/p&gt;

&lt;p&gt;On the high end, we do need something that cuts across languages. We should not expect C to add features
to facilitate mixing with D or Rust or Lua or SQL. So it does seem like we need something like Make. But
if we remove the need for Make on the low end, maybe we can design a new system that can be widely used
from the start. All previous Make incarnations were targeted at a single platform, whether “Unix” in
general or a specific flavor of Unix (or Windows, or Solaris, etc). But that was before the 2000s and
the true flowering of open source. Nowadays, a properly designed program that is widely compatible from
the start has a chance of taking off.&lt;/p&gt;

&lt;p&gt;One huge issue to tackle is going to be interoperability with IDEs. We should never require the use of
an IDE, but on the other hand many programmers prefer to use one. And there will never be the one true
IDE to rule them all (the last attempt, Eclipse, failed miserably). We’ve seen a few attempts to do this;
SCons, CMake and Premake spring to mind. Each took a slightly different path; CMake attempts to just directly
replace Make but have an option for IDE project file generation, whereas Premake just flat-out defines
“make me a project file” as its mission. Partially, you can look at Premake as an attempt to turn Makefiles
into assembly language; you describe your project in a much higher-level fashion, and Premake creates a
Makefile for you (or a Visual Studio project, or an XCode project, or anything you can find a generator for).&lt;/p&gt;

&lt;p&gt;Of course, this comes with a cost. Premake just can’t do most of what Make can do, and CMake’s main claim
against Make is that it’s a lot more cross-platform (it can do a lot of what Make can do, but is very
cumbersome to use even on moderately sized projects). Likewise, SCons, written in Python, can run on almost
anything that can run Python, but for all of that isn’t terribly cross-platform, and is a lot slower than
the alternatives to boot.&lt;/p&gt;

&lt;p&gt;But SCons and Premake were based on a great idea. You write their scripts in a high-level programming
language; for SCons, you can write arbitrary Python code to do make tasks, and for Premake you write
in Lua. Both are far more productive for any but trivial build tasks compared to Make. Any Make replacement
should follow this trend. The challenge for SCons is that you need a Python install to use SCons. On
the other hand, someone has to build a compatible Premake or CMake binary for you. CMake has more
uptake in the Unix-like world, and Premake is easier to use in a Windows world.&lt;/p&gt;

&lt;p&gt;Another advance in the world since Make was invented was the idea of packaging systems. Again, this is an
orthogonal problem that we’re going to defer solving, but you want your build system to work very well
with package systems of all kinds. There are legitimate reasons for multiple packaging systems. For example,
computer languages are available on essentially all platforms, so those languages need a packaging system
that crosses all platforms. But platforms all have many languages that can be used on them, so a platform
needs a polyglot package system that crosses all languages. All this means is that our build system has
to be able to handle arbitrary package systems, depending on the use case.&lt;/p&gt;

&lt;p&gt;And we need our build system to work well with package systems, because we’ve long since gone past the point
where any group writes all its own code. It’s not just standard libraries, we all use each others’ source
very heavily. A build system that cannot interoperate with a package system means that we’ll need to develop
custom tools, or do things manually, and neither of these things scales. And again, while you can probably see
where I’m going with this, I’m going to come back to “just Make” for now.&lt;/p&gt;

&lt;p&gt;So we’re getting a little closer here. We want something that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;defers a lot of ordinary building to the language&lt;/li&gt;
  &lt;li&gt;lets you write arbitrary complex build tasks in a good high-level language&lt;/li&gt;
  &lt;li&gt;is available for every possible platform and architecture&lt;/li&gt;
  &lt;li&gt;works with any package system&lt;/li&gt;
  &lt;li&gt;treats IDEs as first-class citizens&lt;/li&gt;
  &lt;li&gt;adds basically zero overhead to the build process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is my take on things&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We need the language support ASAP in C/C++. Fortunately, both Clang and GCC are open source, and a
concerted effort could make this happen quickly (Microsoft is an outlier but maybe there’s a way
to now leverage open source with them).&lt;/li&gt;
  &lt;li&gt;The “available anywhere” bit means I want this delivered itself as source and built as a binary (by
itself, bootstrapped with some even more widely available system), and thus available anywhere. At the
moment, this means it’s written in C or C++.&lt;/li&gt;
  &lt;li&gt;The “is available anywhere” means that we want our Make program part of every operating system.
This is feasible for Linux and Mac OS X, would require some lobbying for Microsoft (self-interest
should help here), and then everyone else would be motivated to provide it.&lt;/li&gt;
  &lt;li&gt;The “write makefiles in a high level language” is a little more fluid. No C or C++ compiler is yet
interactive enough to write build instructions in C/C++. But we’re closer than you might think, especially
if we can get some more language support. Something like Lua would be the next runner up, since the
Make program could easily contain a Lua interpreter (it’s small). Python, Perl, Ruby are all large and
we would not want to embed them, and if not embedded, then there is a dependency in order to build.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m going to stop here for now. It’s an ambitious goal, but not really that big. The next step is
a plan and a loose design.&lt;/p&gt;

&lt;p&gt;This is possible. Time to move past the 1970s, folks.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Make_(software)&quot;&gt;Make&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Makefile&quot;&gt;Makefile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jpospisil.com/2014/03/16/replacing-make-with-ninja.html&quot;&gt;Replacing Make with Ninja&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.bfitz.us/?p=2099&quot;&gt;A LIST OF MAKE SYSTEMS&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 20:35:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/02/can-we-get-rid-of-make.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/02/can-we-get-rid-of-make.html</guid>
        
        <category>make</category>
        
        <category>build</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 01 Feb 2016 07:31:29 -0800</pubDate>
    <lastBuildDate>Mon, 01 Feb 2016 07:31:29 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;Lots of reading this weekend. This should keep you busy for a month of nights. At least.&lt;/p&gt;

&lt;p&gt;Good series of articles on “what can we learn from Linux design”. The comments on some of the articles are better even than the articles.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/411845/&quot;&gt;Ghosts of Unix Past: a historical search for design patterns&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/412131/&quot;&gt;Ghosts of Unix past, part 2: Conflated designs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/414618/&quot;&gt;Ghosts of Unix past, part 3: Unfixable designs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/416494/&quot;&gt;Ghosts of Unix past, part 4: High-maintenance designs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Older series from the same author:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/336224/&quot;&gt;Linux kernel design patterns - part 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/336255/&quot;&gt;Linux kernel design patterns - part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/336262/&quot;&gt;Linux kernel design patterns - part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://cepr.net/documents/publications/no-vacation-update-2013-05.pdf&quot;&gt;No-Vacation Nation Revisited&lt;/a&gt;. It’s a little biased in terms of intent (there’s a thesis), but it collects a lot of data on vacation and leave across the richer part of the world.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.vox.com/2015/7/27/9038829/automation-myth&quot;&gt;The automation myth&lt;/a&gt;. The tag line is “Robots aren’t taking your jobs— and that’s the problem”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.vox.com/2016/1/28/10860830/y-combinator-basic-income&quot;&gt;Why a bunch of Silicon Valley investors are suddenly interested in universal basic income&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dubeyko.com/development/FileSystems/NTFS/ntfsdoc.pdf&quot;&gt;http://dubeyko.com/development/FileSystems/NTFS/ntfsdoc.pdf&lt;/a&gt;. From the authors of the Linux NTFS filesystem, not Microsoft. Alas. Maybe the new Microsoft will see benefit to releasing documentation that’s accurate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://grayscale-research.org/new/pdfs/NTFS%20forensics.pdf&quot;&gt;NTFS Forensics: A Programmers View of Raw Filesystem Data Extraction&lt;/a&gt;. NTFS on-disk layouts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.opensource.apple.com/source/zip/zip-6/unzip/unzip/proginfo/extra.fld&quot;&gt;extra.fld&lt;/a&gt;. All the ZIP file extension fields known (to the Info-ZIP project, anyway).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tldp.org/HOWTO/Software-Building-HOWTO.html&quot;&gt;Building and Installing Software Packages for Linux&lt;/a&gt;. Getting a bit old (this is from 1999), but still mostly relevant.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.linuxfromscratch.org/&quot;&gt;Linux From Scratch&lt;/a&gt;. Build a Linux distribution from scratch. Requires access to an existing Linux system. Good source of low-level details on Linux.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://divan.github.io/posts/go_concurrency_visualize/&quot;&gt;Visualizing Concurrency in Go&lt;/a&gt;. This is awesome.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.botlibre.org/&quot;&gt;Bot Libre!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pbhogan/Signals&quot;&gt;Signals&lt;/a&gt;. Billed as “A lightweight “signals and slots” implementation using fast delegates.”. From 2004, and slightly updated in 2009.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rsos.royalsocietypublishing.org/content/3/1/150292&quot;&gt;Do online social media cut through the constraints that limit the size of offline social networks?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zl-lang.org/&quot;&gt;ZL&lt;/a&gt;. Interesting. Basically C++ with Scheme-style hygienic macros.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nothings/stb/blob/master/docs/other_libs.md&quot;&gt;Other single-file public-domain/open source libraries with minimal dependencies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dchichkov/curious-namespace-trick/wiki/Curious-Namespace-Trick&quot;&gt;Curious Namespace Trick&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://danluu.com/perf-tracing/&quot;&gt;The limitations of sampling profilers today, with glimpses of tracing tools from the future&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://joearms.github.io/2016/01/26/The-Unintentional-Side-Effects-of-a-Bad-Concurrency-Model.html&quot;&gt;The Unintentional side-effects of a bad concurrency model&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://joearms.github.io/2016/01/28/A-Badass-Way-To-Connect-Programs-Together.html&quot;&gt;A Badass Way to Connect Programs Together&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/google/seesaw&quot;&gt;Seesaw v2&lt;/a&gt;. Load balancer written in Go.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.dwheeler.com/autotools/&quot;&gt;Introduction to the Autotools (autoconf, automake, and libtool)&lt;/a&gt;. I’m not suggesting Autotools is good, it’s the opposite. It’s time to study everything so we can learn and grow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.etalabs.net/compare_libcs.html&quot;&gt;Comparison of C/POSIX standard library implementations for Linux&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Jan 2016 12:49:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/31/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/31/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Understanding Go: structs, methods, interfaces</title>
        <description>&lt;p&gt;Go has a simple-looking object system that is just different enough from the C++ side
of things to cause mental model problems in experienced engineers starting out in Go.&lt;/p&gt;

&lt;p&gt;Go has two kinds of types: structs and interfaces. Structs are concrete types, interfaces
are abstract types. Go is a strongly-typed language - even types that are synonyms are
distinct types.&lt;/p&gt;

&lt;h1 id=&quot;structs-and-methods&quot;&gt;Structs and methods&lt;/h1&gt;

&lt;p&gt;When we restrict things to just structs and methods, there are few surprises. Let’s look at a very simple example.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;opening the hatch\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you run this, you get&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;opening the hatch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code&gt;Open&lt;/code&gt; is a method with a pointer receiver, taking a pointer
to a instance of type &lt;code&gt;Hatch&lt;/code&gt;. Although we create a pointer that is
nil, the variable still has a type: (&lt;code&gt;*Hatch&lt;/code&gt;). We can thus call the method
&lt;code&gt;Open&lt;/code&gt;; it gets a nil pointer, but we don’t use that pointer in our code,
so we don’t crash.&lt;/p&gt;

&lt;p&gt;If we change the method to take a value receiver&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;opening the hatch\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;then we will crash if we try to run this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;panic: runtime error: invalid memory address or nil pointer dereference
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;signal 0xc0000005 &lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x1 &lt;span class=&quot;nv&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0 &lt;span class=&quot;nv&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x401074&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

goroutine &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;running&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:
main.main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        ./gotest/m.go:7 +0x34
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;status 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There’s a simple reason, Go has a
courtesy dereference so that a pointer-to-object can be used to invoke
a method with a value receiver, and obviously if you try to dereference
nil, you’ll crash.&lt;/p&gt;

&lt;p&gt;Let’s look at this further. Methods are just functions with an implicit
first parameter that is the receiver object. These are equivalent in functionality and
probably equivalent in code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// regular function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The compiler is just matching up type signatures for receivers, not for full parameter
lists; this is why Go claims it does not support overloading. In the context of how
methods work, it is doing overloading, but just on the receiver type signature.&lt;/p&gt;

&lt;p&gt;For methods, think of the struct type as being open to
having methods added to it via type matching. Each method we write is only good for one
specific type. A concrete type is the union of the struct
and the methods for that struct; the difference between Go and C++ is that in Go, anyone
can add to the methods for a struct type.&lt;/p&gt;

&lt;p&gt;When we have value receivers, the method gets a copy of the object. When we have pointer
receivers, the method gets a copy of the pointer, but both pointers lead to the same object.
Also note that we can’t have both - there is no overloading in Go, either for function
parameter signatures nor for receiver signatures.&lt;/p&gt;

&lt;p&gt;Keep that in mind as we look at the four permutations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;value type, value receiver&lt;/li&gt;
  &lt;li&gt;pointer type, value receiver&lt;/li&gt;
  &lt;li&gt;value type, pointer receiver&lt;/li&gt;
  &lt;li&gt;pointer type, pointer receiver&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;value-type-value-receiver&quot;&gt;value type, value receiver&lt;/h3&gt;

&lt;p&gt;When we have a value sent to a value receiver, it’s bland.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Go method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// equivalent to&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;pointer-type-pointer-receiver&quot;&gt;pointer type, pointer receiver&lt;/h3&gt;

&lt;p&gt;When we have a pointer sent to a pointer receiver, it’s as boring as the first case.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Go method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// equivalent to&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;value-type-pointer-receiver&quot;&gt;value type, pointer receiver&lt;/h3&gt;

&lt;p&gt;When we have a value sent to a pointer receiver, we need to manufacture a pointer. This
works most of the time, but we can’t always take the address of a value - for example,
the number 42 is a constant and has no storage we can get the address of.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Go method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// equivalent to&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;pointer-type-value-receiver&quot;&gt;pointer type, value receiver&lt;/h3&gt;

&lt;p&gt;When we send a pointer to a value receiver, we have to dereference the pointer.
That makes sense, and that’s why we can get a panic that would not happen with pointer
receivers.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Go method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// equivalent to&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that last line - we dereference the pointer to get the value, so that we can copy
it when we call the function. If we have a nil pointer, we’ll get an exception at this point.&lt;/p&gt;

&lt;h1 id=&quot;interfaces&quot;&gt;Interfaces&lt;/h1&gt;

&lt;p&gt;Interfaces are abstract types. There is no storage. They are best thought of as contracts. However,
you can have a value of interface type, or a pointer of interface type. Kind of.&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Jan 2016 14:39:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/28/go-structs-methods-interfaces.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/28/go-structs-methods-interfaces.html</guid>
        
        <category>go</category>
        
        <category>programming</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/visualfc/goqt&quot;&gt;GoQt&lt;/a&gt;. Go language bindings to &lt;a href=&quot;http://www.qt.io/&quot;&gt;Qt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://universesandbox.com/&quot;&gt;Universe Sandbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hunch.net/?p=224&quot;&gt;All Models of Learning have Flaws&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4415.pdf&quot;&gt;Simple Contracts for C++&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jan 2016 13:50:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/24/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/24/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Go code patterns</title>
        <description>&lt;p&gt;Go facilitates casual concurrency through the ease of creating goroutines and communicating with channels.&lt;/p&gt;

</description>
        <pubDate>Sun, 24 Jan 2016 13:50:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/24/go-code-patterns.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/24/go-code-patterns.html</guid>
        
        <category>go</category>
        
        <category>programming</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>C++ packages I want to see</title>
        <description>&lt;p&gt;Here are some packages I want to see.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Boost (broken into individual pieces, not a mega-package)&lt;/li&gt;
  &lt;li&gt;crypto&lt;/li&gt;
  &lt;li&gt;libtommath&lt;/li&gt;
  &lt;li&gt;gmp (although non GPL projects have a hard time using it)&lt;/li&gt;
  &lt;li&gt;pcre&lt;/li&gt;
  &lt;li&gt;icu&lt;/li&gt;
  &lt;li&gt;curl&lt;/li&gt;
  &lt;li&gt;zlib&lt;/li&gt;
  &lt;li&gt;openssl&lt;/li&gt;
  &lt;li&gt;protobuf&lt;/li&gt;
  &lt;li&gt;sqlite&lt;/li&gt;
  &lt;li&gt;breakpad&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More generically, things like this&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;command-line processing&lt;/li&gt;
  &lt;li&gt;unit test frameworks&lt;/li&gt;
  &lt;li&gt;every crypto algorithm&lt;/li&gt;
  &lt;li&gt;database interfaces&lt;/li&gt;
  &lt;li&gt;low-level network stacks besides just Boost.ASIO&lt;/li&gt;
  &lt;li&gt;web frameworks&lt;/li&gt;
  &lt;li&gt;graphics libraries&lt;/li&gt;
  &lt;li&gt;embedded languages: lua, python, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, a decent fraction of the Standard C++ library might be better off as packages, at least in the proposed
drastically expanded version that includes game and UI libraries. Specifically, Boost should be available
as packages, not as a machine-level installable thing.&lt;/p&gt;

&lt;p&gt;I also expect there to be platform-specific packages. But that would be fairly rare, instead we’d
have packages that had inside them platform-specific bits, but the user doesn’t care as long as it
works. E.g. networking frameworks need to be built on top of platform-specific bits.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;gmp assorted links: &lt;a href=&quot;https://www.reddit.com/r/haskell/comments/1twtvm/the_problem_with_integer/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=6990233&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Multiple_Precision_Arithmetic_Library&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://gmplib.org/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/gx/gmp&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/ncw/gmp&quot;&gt;here&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 19 Jan 2016 00:37:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/19/cpp-packages-i-want-to-see.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/19/cpp-packages-i-want-to-see.html</guid>
        
        <category>c++</category>
        
        <category>programming</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://adambard.com/blog/PHP-ruby-python-clojure-webapps-by-example/&quot;&gt;https://adambard.com/blog/PHP-ruby-python-clojure-webapps-by-example/&lt;/a&gt;. We need more of this, a bake-off between a bunch of languages using a small but actually-does-something program. This problem is a web app, so any language without a web framework available is at a big disadvantage, of course. But what I think that says in this day and age is that any wants-to-be-serious programming language needs a web framework for it. Heck, even C and C++ have web frameworks now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git.github.io/rev_news/2016/01/13/edition-11/&quot;&gt;https://git.github.io/rev_news/2016/01/13/edition-11/&lt;/a&gt;. I missed this somehow, but GitHub has started their own Git development newsletter. It’s definitely more readable than the Git mailing list, not yet sure how accurate it is.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/UWSysLab/tapir&quot;&gt;TAPIR – the Transaction Application Protocol for Inconsistent Replication&lt;/a&gt;. I need to read up on this, sounds useful and dubious at the same time. I skimmed the paper, but I need to spend a few days reading through it carefully and then experimenting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sharow/libconcurrent&quot;&gt;Concurrent Programming Library (Coroutine) for C&lt;/a&gt;. Tiny, but only has GCC-based runtime support, and with 15 seconds of reading I can’t tell if this means Linux-only.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ramsdenj.github.io/server/2016/01/01/FreeNAS-Server-Build.html&quot;&gt;FreeNAS Home Server Build&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://drmemory.org/&quot;&gt;Dr. Memory&lt;/a&gt;. I have got to start using this!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cognitect/transit-format&quot;&gt;Transit&lt;/a&gt;. Transit is designed to be implemented as an encoding on top of formats for which high performance processors already exist, specifically &lt;a href=&quot;http://www.ietf.org/rfc/rfc7159.txt&quot;&gt;JSON&lt;/a&gt; and &lt;a href=&quot;http://msgpack.org/&quot;&gt;MessagePack&lt;/a&gt;. See &lt;a href=&quot;https://github.com/msgpack/msgpack/blob/master/spec.md&quot;&gt;MessagePack specification&lt;/a&gt;. Post on the &lt;a href=&quot;http://blog.cognitect.com/blog/2014/7/22/transit&quot;&gt;initial release of Transit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://firstround.com/review/square-defangs-difficult-decisions-with-this-system-heres-how/&quot;&gt;Square Defangs Difficult Decisions with this System — Here’s How&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sciencedaily.com/releases/2016/01/160114163035.htm&quot;&gt;Speed reading promises are too good to be true, scientists find&lt;/a&gt;. Matches my anecdotal experience; the faster I read something, the less I really understand of it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ramcloud.atlassian.net/wiki/display/RAM/RAMCloud+Papers&quot;&gt;RAMCloud Papers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wmutils.io/about.html&quot;&gt;wmutils&lt;/a&gt;. Build your own (Linux) window manager.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://codehistoryminer.com/index.html&quot;&gt;http://codehistoryminer.com/index.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2016/c11-threads-affinity-and-hyperthreading/&quot;&gt;http://codehistoryminer.com/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ramiro.org/vis/hn-most-linked-books/&quot;&gt;Top 30 books ranked by total number of links to Amazon in Hacker News comments&lt;/a&gt;. An interesting reading list, and contains many good books. And some oddballs. Really, a rent book being the most mentioned?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/startup-guide-anti-patterns/how-you-can-leverage-technical-debt-why-you-should-4ec48a387751#.g4ttnl5j0&quot;&gt;How You Can Leverage Technical Debt &amp;amp; Why You Should&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://togelius.blogspot.com/2016/01/why-video-games-are-essential-for.html&quot;&gt;Why video games are essential for inventing artificial intelligence&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Jan 2016 00:06:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/19/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/19/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Go select: blocking by default</title>
        <description>&lt;p&gt;I’ve not yet remembered all of the Go language details, and sometimes intuition fails me. Or, rather, my
mental model of how I expect things to work differs from how Go actually works.&lt;/p&gt;

&lt;p&gt;The select language construct is cool - it’s the networking select call turned into a language construct
and really beefed up. There is no switch statement, but select fills in for it, because it can have
arbitrary code as its cases.&lt;/p&gt;

&lt;p&gt;So I was building up a program that wanted to handle terminating and aborting cleanly. I have a scanner
that should terminate if some other part of the code says to. So I had this in my program&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// aborting early&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And, nothing worked. Since my program had a goroutine for status monitoring, it ran, but it said that
nothing was happening. Hmm. A few diagnostic prints zeroed in on the above code. I had to page through
the D&amp;amp;K Go book until I found out the critical part. The Go select function waits until some case is
satisfied; e.g. blocking. In my case, I’d just blocked my scanner from doing anything, as opposed to
what I thought I was doing, having it check for early abort.&lt;/p&gt;

&lt;p&gt;Adding a default case that does nothing did the trick; case statements are evaluated in order, so unless
my done channel has a value on it, the default is reached and the select exits.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// aborting early&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do nothing (a subtlety that needs to be reinforced)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I’ve used select a few dozen times by now, but I guess I always lucked out. Or didn’t luck out.&lt;/p&gt;

&lt;p&gt;If I write a Go book, it’s going to focus on the parts of the language that aren’t a direct map to C
or other languages.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 19:15:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/18/go-select-blocking-by-default.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/18/go-select-blocking-by-default.html</guid>
        
        <category>go</category>
        
        <category>programming</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;MARISA: Matching Algorithm with Recursively Implemented StorAge&quot;&gt;MARISA Trie&lt;/a&gt; and &lt;a href=&quot;https://code.google.com/p/marisa-trie/&quot;&gt;C++ implementation&lt;/a&gt;. I’ll have to write a version in Go to make sure I understand it. However, as a practical matter, I’m not sure this is really a viable data structure, because it’s pretty slow and not that much more compression than zlib would produce. But I’ll test that with my data sets.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://maikklein.github.io/2015/11/14/Converting-strings-to-types/&quot;&gt;Type safe OpenGL - Converting strings into types in D&lt;/a&gt;. This makes me want to start programming in D.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.theguardian.com/books/2016/jan/08/anti-education-on-the-future-of-our-educational-institutions-friedrich-nietzsche-review&quot;&gt;Anti-Education by Friedrich Nietzsche review – why mainstream culture, not the universities, is doing our best thinking&lt;/a&gt;. I’ve always liked Nietzsche, so I need to read this lecture series, because it’s important to have an honest view of someone you respect. Maybe Nietzsche did have a strong basis but went in the wrong direction in the end.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nbviewer.jupyter.org/url/norvig.com/ipython/Probability.ipynb&quot;&gt;Probability, Paradox, and the Reasonable Person Principle&lt;/a&gt;. Probability theory in Python by Peter Norvig. And this reminds me to look into Jupyter Notebooks. I like the expressiveness.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/GianlucaGuarini/go-observable&quot;&gt;go-observable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.waleson.com/2016/01/parsing-10tb-of-metadata-26m-domains.html&quot;&gt;Parsing 10TB of Metadata, 26M Domain Names and 1.4M SSL Certs for $10 on AWS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://thinkingmachines.mit.edu/blog/unreasonable-reputation-neural-networks&quot;&gt;The Unreasonable Reputation of Neural Networks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ph7FP0LnmcA&quot;&gt;Andrei Alexandrescu Writing Fast Code I&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1O6ozzZHHxGzU-McpvEG09hl7K6oQDd2Taw0FOlnxJc8/preview?slide=id.p&quot;&gt;Introduction to Machine Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ultimatepp.org/index.html&quot;&gt;Ultimate++ is a C++ cross-platform rapid application development framework&lt;/a&gt;. I like the enthusiasm.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/A_History_of_the_World_in_100_Objects&quot;&gt;A History of the World in 100 Objects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.theglobeandmail.com/report-on-business/rob-commentary/rocket-reusability-launches-new-economy/article28226300/&quot;&gt;Rocket reusability launches new economy&lt;/a&gt;. Certainly the most significant event in the 21st century, and perhaps even the most significant one since the steam engine. General computing is up there, and if we ever actually do AI that would be on par or more significant.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jadpole.github.io/arcaders/arcaders-1-0/&quot;&gt;ArcadeRS 1.0: The project&lt;/a&gt;. A game written in Rust.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mindtangle.net/2011/07/22/the-talent-war-revisted/&quot;&gt;The “Talent War” revisited&lt;/a&gt;. From 2011. Using visualization to make sense of numbers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cseweb.ucsd.edu/~lerner/papers/fp-printing-popl16.pdf&quot;&gt;Printing floating-point numbers&lt;/a&gt;. Spectacular! And see &lt;a href=&quot;https://github.com/marcandrysco/Errol&quot;&gt;GitHub repo&lt;/a&gt;. Also, the main author on the paper has &lt;a href=&quot;https://github.com/marcandrysco&quot;&gt;other stuff&lt;/a&gt;. Also see &lt;a href=&quot;http://cseweb.ucsd.edu/~lerner/&quot;&gt;his advisor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ben174/git-draw&quot;&gt;Git Draw&lt;/a&gt;. Umm.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/facebook-design/critique-is-an-important-part-of-any-design-process-whether-you-work-as-part-of-a-team-or-solo-ef3dcb299ce3#.ir759nlye&quot;&gt;Four Things Working at Facebook Has Taught Me About Design Critique&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://numenta.com/blog/machine-intelligence-machine-learning-deep-learning-artificial-intelligence.html&quot;&gt;What Is Machine Intelligence Vs. Machine Learning Vs. Deep Learning Vs. Artificial Intelligence (AI)?&lt;/a&gt;. I feel like this is begging the question, even a little bit, since it starts out saying “In our view, there are three major approaches to building smart machines”. At least they qualified this statement.&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jan 2016 13:49:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/17/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/17/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Go language cheat sheet</title>
        <description>&lt;p&gt;I can’t find a terse and usable summary of the Go language. So here it is. I’ll make it all pretty at some point. In fact, it’s quickly getting not-terse, so I need to employ better HTML skills and tighten it up somehow.&lt;/p&gt;

&lt;p&gt;Maybe what would work better is callouts for things that are “different from language X”, because 80% of Go
is quite like C, Python, Java etc.&lt;/p&gt;

&lt;h2 id=&quot;types&quot;&gt;Types&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Kind&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;bool&lt;/td&gt;
      &lt;td&gt;true, false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;integer&lt;/td&gt;
      &lt;td&gt;int, uint, uintptr, int8, int16, int32, int64, uint8, uint16, uint32, uint64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;float&lt;/td&gt;
      &lt;td&gt;float32, float64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;complex&lt;/td&gt;
      &lt;td&gt;complex64, complex128&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;byte&lt;/td&gt;
      &lt;td&gt;alias for uint8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rune&lt;/td&gt;
      &lt;td&gt;alias for int32&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;operators&quot;&gt;Operators&lt;/h2&gt;

&lt;p&gt;No operator overloading, so operators only work on basic types&lt;/p&gt;

&lt;h3 id=&quot;logical-operators&quot;&gt;Logical operators&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
      &lt;th&gt;Examples&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;!&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;logical negation&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;!a, a = !b&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;conditional AND&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;if a() &amp;amp;&amp;amp; b()&lt;/code&gt; (short-circuit evaluation)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;||&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;conditional OR&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;if a() || b()&lt;/code&gt; (short-circuit evaluation)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;arithmetic-operators-integer-float-complex-string&quot;&gt;Arithmetic operators (integer, float, complex, string)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
      &lt;th&gt;Examples&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;sum&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;1 + 1 == 2, &quot;abc&quot; + &quot;d&quot; == &quot;abcd&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;arithmetic-operators-integer-float-complex&quot;&gt;Arithmetic operators (integer, float, complex)&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;difference&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;2 - 1 == 1&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;product&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;2 * 2 == 4&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;quotient&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;3 / 2 == 1&lt;/code&gt;, &lt;code&gt;5.0 / 2.0 == 2.5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;arithmetic-operators-integer&quot;&gt;Arithmetic operators (integer)&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;%&lt;/code&gt;    remainder&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;5 % 2 == 1&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;    bitwise AND&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;6 &amp;amp; 3 == 2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;|&lt;/code&gt;    bitwise OR&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;4 | 3 == 7&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;^&lt;/code&gt;    bitwise XOR&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;7 ^ 2 == 5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;amp;^&lt;/code&gt;   bit clear (AND NOT)&lt;/td&gt;
      &lt;td&gt;``` 11 &amp;amp;^ 6 == 9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;arithmetic-operators-integer-op-unsigned-integer&quot;&gt;Arithmetic operators (integer OP unsigned integer)&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;   left shift&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;1 &amp;lt;&amp;lt; 15 == 32768&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;   right shift&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;65536 &amp;gt;&amp;gt; 8 == 256&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://golang.org/doc/&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec&quot;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://golang.org/doc/effective_go.html&quot;&gt;Effective Go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://golang.org/doc/code.html&quot;&gt;How to Write Go Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://golang-examples.tumblr.com/&quot;&gt;Golang Examples&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Jan 2016 22:00:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/16/go-language-cheat-sheet.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/16/go-language-cheat-sheet.html</guid>
        
        <category>go</category>
        
        <category>programming</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Organizing Go source code</title>
        <description>&lt;p&gt;How should your Go project source be organized?&lt;/p&gt;

&lt;h1 id=&quot;what-are-others-doing&quot;&gt;What are others doing?&lt;/h1&gt;

&lt;p&gt;Here are some big Go projects on GitHub (found via the search string “language:go size:&amp;gt;=100000”). The line
counts are reported with &lt;a href=&quot;https://github.com/AlDanial/cloc&quot;&gt;cloc&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpenShift Origin: &lt;a href=&quot;https://github.com/openshift/origin&quot;&gt;https://github.com/openshift/origin&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;6442 files, 1130855 code lines, 188546 comment lines, 161550 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Kubernetes: &lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;https://github.com/kubernetes/kubernetes&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;4239 files, 946564 code lines, 152004 comment lines, 117675 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/golang/go&quot;&gt;https://github.com/golang/go&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;4021 files, 704959 code lines, 114329 comment lines, 94409 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lantern: &lt;a href=&quot;https://github.com/getlantern/lantern&quot;&gt;https://github.com/getlantern/lantern&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;1917 files, 450132 code lines, 64529 comment lines, 56765 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Flynn: &lt;a href=&quot;https://github.com/flynn/flynn&quot;&gt;https://github.com/flynn/flynn&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;1747 files, 322831 code lines, 39889 comment lines, 51175 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;etcd: &lt;a href=&quot;https://github.com/coreos/etcd&quot;&gt;https://github.com/coreos/etcd&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;1024 files, 271571 code lines, 36024 comment lines, 32832 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Docker: &lt;a href=&quot;https://github.com/docker/docker&quot;&gt;https://github.com/docker/docker&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;1832 files, 269545 code lines, 41912 comment lines, 45000 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Drone: &lt;a href=&quot;https://github.com/drone/drone&quot;&gt;https://github.com/drone/drone&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;771 files, 174022 code lines, 16641 comment lines, 21642 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Terraform: &lt;a href=&quot;https://github.com/hashicorp/terraform&quot;&gt;https://github.com/hashicorp/terraform&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;1123 files, 173273 code lines, 9779 comment lines, 31801 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CockroachDb: &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;https://github.com/cockroachdb/cockroach&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;518 files, 134545 code lines, 27682 comment lines, 14479 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;vitess: &lt;a href=&quot;https://github.com/youtube/vitess&quot;&gt;https://github.com/youtube/vitess&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;900 files, 135015 code lines, 19664 comment lines, 19242 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;golang/tools: &lt;a href=&quot;https://github.com/golang/tools&quot;&gt;https://github.com/golang/tools&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;599 files, 112023 code lines, 27344 comment lines, 17631 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some medium-sized projects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;golang/net: &lt;a href=&quot;https://github.com/golang/net&quot;&gt;https://github.com/golang/net&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;315 files, 80168 code lines, 7270 comment lines, 6137 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;influxdb: &lt;a href=&quot;https://github.com/influxdata/influxdb&quot;&gt;https://github.com/influxdata/influxdb&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;238 files, 71848 code lines, 8578 comment lines, 13009 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;syncthing: &lt;a href=&quot;https://github.com/syncthing/syncthing&quot;&gt;https://github.com/syncthing/syncthing&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;466 files, 64198 code lines, 10316 comment lines, 11161 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Consul: &lt;a href=&quot;https://github.com/hashicorp/consul&quot;&gt;https://github.com/hashicorp/consul&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;214 files, 56563 code lines, 6802 comment lines, 9344 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Packer: &lt;a href=&quot;https://github.com/mitchellh/packer&quot;&gt;https://github.com/mitchellh/packer&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;691 files, 49973 code lines, 4359 comment lines, 10614 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;gogs: &lt;a href=&quot;https://github.com/gogits/gogs&quot;&gt;https://github.com/gogits/gogs&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;125 files, 29071 code lines, 2539 comment lines, 5524 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;godropbox: &lt;a href=&quot;https://github.com/dropbox/godropbox&quot;&gt;https://github.com/dropbox/godropbox&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;173 files, 25494 code lines, 3116 comment lines, 5400 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;lime-backend: &lt;a href=&quot;https://github.com/limetext/lime-backend&quot;&gt;https://github.com/limetext/lime-backend&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;139 files, 19970 code lines, 1515 comment lines, 2349 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Serf: &lt;a href=&quot;https://github.com/hashicorp/serf&quot;&gt;https://github.com/hashicorp/serf&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;110 files, 15804 code lines, 1982 comment lines, 3249 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;go-github: &lt;a href=&quot;https://github.com/google/go-github&quot;&gt;https://github.com/google/go-github&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;112 files, 13698 code lines, 2210 comment lines, 3090 blank lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Smaller projects, at least Go-code wise:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spigo/Simianviz: &lt;a href=&quot;https://github.com/adrianco/spigo&quot;&gt;https://github.com/adrianco/spigo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;kati: &lt;a href=&quot;https://github.com/google/kati&quot;&gt;https://github.com/google/kati&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;hashicorp/raft: &lt;a href=&quot;https://github.com/hashicorp/raft&quot;&gt;https://github.com/hashicorp/raft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lots-of-code-in-package-main&quot;&gt;Lots of code in package main&lt;/h1&gt;

&lt;p&gt;There are no modules or classes or other namespace systems in Go, outside of packages, so there’s a
temptation to make packages just to create namespaces. But it feels like packages that aren’t reusable
subsystems aren’t really packages.&lt;/p&gt;

&lt;p&gt;One answer is to just have lots of code in package main. There’s always a ton of code that is unique
to your program; for example, the specific command-line processing that you have.&lt;/p&gt;

&lt;h1 id=&quot;other-notes&quot;&gt;Other notes&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://herman.asia/open-source-go-projects-to-learn-from&quot;&gt;Excellent Open Source Go Projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gophergala/go_report&quot;&gt;Go Report Card&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/golang/go/wiki/Projects&quot;&gt;Go Projects index&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://larry-price.com/blog/2015/06/25/architecture-for-a-golang-web-app&quot;&gt;Architecture for a Golang Web App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.onebigfluke.com/2014/12/generic-programming-go-generate.html&quot;&gt;Generic programming in Go using “go generate”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I assume you’ve read at least these&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://blog.golang.org/organizing-go-code&lt;/li&gt;
  &lt;li&gt;http://blog.golang.org/godoc-documenting-go-code&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 07 Jan 2016 22:27:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/07/organizing-go-source-code.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/07/organizing-go-source-code.html</guid>
        
        <category>go</category>
        
        <category>programming</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 05 Jan 2017 07:59:41 -0800</pubDate>
    <lastBuildDate>Thu, 05 Jan 2017 07:59:41 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://jeremykun.com/2015/04/06/markov-chain-monte-carlo-without-all-the-bullshit/&quot;&gt;Markov Chain Monte Carlo Without all the Bullshit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jeremykun.com/2014/02/12/simulating-a-biased-coin-with-a-fair-coin/&quot;&gt;Simulating a Biased Coin with a Fair Coin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/book-No-Solutions-Aug-21-2014.pdf&quot;&gt;Foundations of Data Science&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mcmchandbook.net/HandbookChapter1.pdf&quot;&gt;Introduction to Markov Chain Monte Carlo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stats.stackexchange.com/questions/165/how-would-you-explain-markov-chain-monte-carlo-mcmc-to-a-layperson&quot;&gt;How would you explain Markov Chain Monte Carlo (MCMC) to a layperson?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mlwhiz.com/blog/2015/08/19/MCMC_Algorithms_Beta_Distribution/&quot;&gt;My Tryst With MCMC Algorithms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mlwhiz.com/blog/2015/08/21/MCMC_Algorithms_Cryptography/&quot;&gt;Behold the power of MCMC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twiecki.github.io/blog/2015/11/10/mcmc-sampling/&quot;&gt;MCMC sampling for dummies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.cornell.edu/selman/cs475/lectures/intro-mcmc-lukas.pdf&quot;&gt;Introduction to Markov Chain Monte Carlo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.princeton.edu/courses/archive/spr06/cos598C/papers/AndrieuFreitasDoucetJordan2003.pdf&quot;&gt;An Introduction to MCMC for Machine Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=h1NOS_wxgGg&quot;&gt;Markov Chain Monte Carlo and the Metropolis Algorithm (video)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vTUwEu53uzs&quot;&gt;A Beginner’s Guide to MCMC (video)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=uSAE1-wfIKU&quot;&gt;Introduction to Bayesian Methods (video)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.stats.ox.ac.uk/~cholmes/Courses/BDA/bda_mcmc.pdf&quot;&gt;Markov Chain Monte Carlo and Applied Bayesian Statistics: a short course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3619958/&quot;&gt;Markov Chain Monte Carlo: an introduction for epidemiologists&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stats.stackexchange.com/questions/214724/how-do-abc-and-mcmc-differ-in-their-applications&quot;&gt;How do ABC and MCMC differ in their applications?&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Jan 2017 10:46:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2017/01/03/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/01/03/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Compiling C++</title>
        <description>&lt;p&gt;This is a continuation of my last post.&lt;/p&gt;

&lt;p&gt;The C++ standard lists 9 phases of translation. Some are trivial, some are massive (phase 7 is “compile
after preprocessing”).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Map physical source file characters to the basic source character set&lt;/li&gt;
  &lt;li&gt;Splice lines together as needed&lt;/li&gt;
  &lt;li&gt;Break text into sequences of preprocessing tokens&lt;/li&gt;
  &lt;li&gt;Evaluate preprocessing directives and expand macros&lt;/li&gt;
  &lt;li&gt;Convert character and string literals from source character set to execution character set&lt;/li&gt;
  &lt;li&gt;Concatenate adjacent string literals&lt;/li&gt;
  &lt;li&gt;Compile: convert preprocessing tokens to tokens and compile into translation units&lt;/li&gt;
  &lt;li&gt;Combine translation units and instantiation units (for templates)&lt;/li&gt;
  &lt;li&gt;Resolve external references and produce final program image&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;phase-1---map-to-basic-source-character-set&quot;&gt;Phase 1 - map to basic source character set&lt;/h1&gt;

&lt;p&gt;This can be a no-op in compilers if the physical source file characters are identical to the basic
source character set. In modern compilers, there may be some text to text translation, especially
for handling newline characters.&lt;/p&gt;

&lt;p&gt;Without loss of generality, we could state that the basic source character set is UTF-8 and that
newline characters are linefeeds, e.g. 0x0A. We would translate our input file to match this.&lt;/p&gt;

&lt;p&gt;As a reminder, this is the basic character set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
0 1 2 3 4 5 6 7 8 9
_ { } [ ] # ( ) &amp;lt; &amp;gt; % : ; . ? * + - / ^ &amp;amp; | ~ ! = , \ &quot; ’
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is augmented with universal-character-name characters for any character outside this range.
In theory, this means the use of escapes like &lt;code&gt;\u00F6&lt;/code&gt; instead of direct Unicode characters like
&lt;code&gt;ö&lt;/code&gt;. However, the “as-if” rule applies here: the standard states that “an implementation may use
any internal encoding, so long as…” it works out the same.&lt;/p&gt;

&lt;p&gt;This also includes conversion of trigraphs, if trigraphs are supported. Trigraph support is not required
as of C++14 and is slated to be removed in C++17. No one should be using trigraphs.&lt;/p&gt;

&lt;p&gt;Raw string literals: Trigraph and universal character translations would be reversed in phase 3. It is
ignored here because identifying raw string literals is done in the preprocessor tokenization phase.&lt;/p&gt;

&lt;h1 id=&quot;phase-2---splice-lines-together&quot;&gt;Phase 2 - splice lines together&lt;/h1&gt;

&lt;p&gt;The C++ standard says that lines ending in backlash &lt;code&gt;\&lt;/code&gt; are joined together with the following line
to create a single logical line. The main reason for this is for long string literals and for long
preprocessor directives. The preprocessor is line-based in that a preprocessor directive must be on
a single logical line. By splicing lines together before interpreting directives, we can make macros
that are more readable than they would be otherwise.&lt;/p&gt;

&lt;h1 id=&quot;phase-3---decompose-file-into-preprocessor-tokens&quot;&gt;Phase 3 - decompose file into preprocessor tokens&lt;/h1&gt;

&lt;p&gt;This phase is an “as-if” phase. A compiler could elect to work with the text itself instead of the
preprocessor tokens. However, there are some subtleties that make it a lot easier to talk about the
process as if there were tokens.&lt;/p&gt;

&lt;p&gt;Raw string literals are an interesting exception. If the start of a raw-string literal is detected,
then the universal-character-name translation in phase 1 and the line-splicing in phase 2 are reverted,
and the raw string is the shortest sequence of characters that match the raw string pattern. This
means for example that a raw string defined as such:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;char* s = R&quot;(my\
string)&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would be the literal characters &lt;code&gt;my\&amp;lt;newline&amp;gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, does this mean that it’s the newline from the physical file? While the standard reads as ambiguous,
I’m pretty sure this has to be a newline character - if the execution character set is UTF-8, then
the string would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;74 68 69 73 5c 0a 73 74 72 69 6e 67 00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;regardless of the type of newline in the physical file.&lt;/p&gt;

&lt;p&gt;Another exception is the &lt;code&gt;&amp;lt;:&lt;/code&gt; digraph; if the sequence &lt;code&gt;&amp;lt;::&lt;/code&gt; is followed by anything other than &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt;, then
this is treated as the token &lt;code&gt;&amp;lt;&lt;/code&gt; and not the digraph &lt;code&gt;&amp;lt;:&lt;/code&gt;. This is a little hard to puzzle out. The string &lt;code&gt;&amp;lt;::&amp;gt;&lt;/code&gt;
would be digraphs for &lt;code&gt;[]&lt;/code&gt;, so that part makes sense, e.g a declaration such as &lt;code&gt;int main(int argc, char* argv[])&lt;/code&gt;.
But it’s a little harder to see what &lt;code&gt;&amp;lt;:::&lt;/code&gt; would mean.&lt;/p&gt;

&lt;p&gt;Personally, I think compilers should refuse to implement the punctuation diagraphs, and it look like MSVC
does not support them (and maybe never did). I’m neutral on the keyword “diagraphs” like &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; etc.
I feel like those are too much like trying to pretend C++ is a different language. I also notice that
MSVC doesn’t directly support them, only through a header file &lt;iso646.h&gt; where it creates macros for them...
so not really digraphs. Just say no to digraphs.&lt;/iso646.h&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Jan 2017 03:27:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2017/01/03/compiling-c++.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/01/03/compiling-c++.html</guid>
        
        <category>C++</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Using Hugo for a blog</title>
        <description>&lt;p&gt;Near the end of 2012, I started a blog using Wordpress. At the end of 2014, it fell prey to a
hack that inserted hundreds of thousands of spam comments. I’d already been dissatisfied with
Wordpress as being awkward to write in, so I spent no effort to fix it.&lt;/p&gt;

&lt;p&gt;In May 2015, I started a new blog using Jekyll. This was somewhat better than using Wordpress;
it went backwards on features, but was a lot easier to write new blog posts, and was a lot faster.
Well, at first. Once I had a hundred blog posts, I noticed Jekyll getting slower and slower, to the
point now that it takes 30 seconds to rebuild. That’s annoying. Plus, I hate Liquid, and I’m not
really a Ruby fan.&lt;/p&gt;

&lt;p&gt;So, after months of light agonizing, I’m going to switch to Hugo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Big plus is that it’s written in Go, which means it’s almost as good as writing it in C++, both
speed-wise and the likelihood that I would ever actually add a feature to it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/spf13/hugo&quot;&gt;Hugo source - Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hugo has a Jekyll site importer which I’ll be trying out, but I’m not too worried about that part
(and someday I’ll import all the content from my older Wordpress blog):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gohugo.io/tutorials/migrate-from-jekyll/&quot;&gt;Migrate to Hugo from Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a showcase of Hugo blogs that I imagine I’ll pick through to find an initial template that
I like - while I’m picky on look&amp;amp;feel, it’s not to the point where I want to spend a lot of time
writing CSS myself.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gohugo.io/showcase/&quot;&gt;Hugo Site Showcase&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That said, I’ve been enjoying using Sphinx and reStructuredText for writing documentation, and
I’m not really a blogger as in “writing to be read”, instead I write to remember or as reference.
I’m ok with using multiple systems, I think.&lt;/p&gt;

&lt;p&gt;I expect that whatever I do, I’ll use Disqus to have blog comments. Those are always useful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am also considering using Netlify.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot;&gt;Netlify&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, Netlify has this cool list of static site generators&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.staticgen.com/&quot;&gt;StaticGen - Top Open-Source Static Site Generators&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Honorable mention - I toyed with the idea of Nikola, because it was at least written in Python.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://getnikola.com/&quot;&gt;Nikola&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another honorable mention is Forestry, which purports to create a CMS from your Jekyll or Hugo blog.
I don’t think I need a CMS, but we’ll see. However, this does sound useful for non-technical people.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 03:39:00 -0800</pubDate>
        <link>http://neurocline.github.io/blog/2017/01/02/using-hugo.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/blog/2017/01/02/using-hugo.html</guid>
        
        <category>hugo</category>
        
        <category>blog</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.the-adam.com/adam/rantrave/st02.pdf&quot;&gt;A Description of One Programmer’s Programming Style Revisited&lt;/a&gt;. Written in 1990, updated in 2001.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://canonical.org/~kragen/memory-models/&quot;&gt;The memory models that underlie programming languages&lt;/a&gt;. Interesting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://statweb.stanford.edu/~cgates/PERSI/papers/The%20MCMC%20Revolution.pdf&quot;&gt;The Markov Chain Monte Carlo Revolution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1412.6621&quot;&gt;Why does Deep Learning work? - A perspective from Group Theory&lt;/a&gt;. This feels like a seminal paper.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/clockworksoul/smudge&quot;&gt;clockworksoul/smudge&lt;/a&gt;. Smudge is a lightweight Go library that provides group member discovery, status dissemination, and failure detection using the SWIM epidemic protocol.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://idea.popcount.org/2013-07-24-ir-is-better-than-assembly/&quot;&gt;IR is better than assembly&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.nelhage.com/2016/12/how-i-test/&quot;&gt;How I Write Tests&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 08:57:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2017/01/01/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2017/01/01/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Compiling C++</title>
        <description>&lt;p&gt;To all C fans - everything I’m writing applies equally to C and C++, I just got tired of saying
C/C++, so picked the covering term. Also, I apologize in advance for anyone who runs across this;
I’m writing this as notes for myself, and while this will end up in a more polished form, I will
probably forget to put a link from here to the final version.&lt;/p&gt;

&lt;p&gt;I am working from the C++14 standard draft N4296, which is freely available (the formal version
of the standard costs money, but is functionally identical to the last draft). And none of this
stuff changes with C++17, I believe.&lt;/p&gt;

&lt;p&gt;The standard uses language that keeps options open, but this means the standard doesn’t talk about
the really interesting bits. Let’s start with files.&lt;/p&gt;

&lt;h1 id=&quot;files&quot;&gt;Files&lt;/h1&gt;

&lt;p&gt;We put source code into files with names; these are often organized in hierarchical file systems.
This does not mean that this will be the only way we ever work with source code, but we do work
with it this way at the moment.&lt;/p&gt;

&lt;p&gt;What is a file? It’s a sequence of bytes. It’s also a sequence of bits, but no known file system
handles a file of say 1023 bits, it handles files with an integral number of bytes. But if you
want to be pedantic, substitute “sequence of bits” for everything I write and it will work.
It’s just extra mental work that will go unused until some future date where such a bit-oriented
file system comes into existence.&lt;/p&gt;

&lt;p&gt;We can also think of this as a stream of bytes, and you’ll see a lot of file APIs expressed
as stream APIs. I prefer to not use this terminology, because the length of a stream is not
nececessarily known until the end of the stream is encountered. A sequence is a predetermined
and finite list.&lt;/p&gt;

&lt;p&gt;The model of “file” that I use here is of an immutable sequence of bytes; if
we have a different sequence, we have a different file. We have ambiguity if the same name refers
to two different sequences of bytes. This will be important later.&lt;/p&gt;

&lt;p&gt;Of course, it’s not just any sequence of bytes. The bytes have to be comprehendable as C++ source
characters. This is the basic C++ source character set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
0 1 2 3 4 5 6 7 8 9
_ { } [ ] # ( ) &amp;lt; &amp;gt; % : ; . ? * + - / ^ &amp;amp; | ~ ! = , \ &quot; ’
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The standard also allows for characters as identifed by universal-character-name, e.g. Unicode.&lt;/p&gt;

&lt;p&gt;Also note that while this set includes all the printable ASCII characters except &lt;code&gt;@&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt;,
most compilers accept those characters as well - &lt;code&gt;@&lt;/code&gt; is needed for Objective-C, and the Gnu docs
say something about &lt;code&gt;$&lt;/code&gt; used for VMS compatibility (still a thing, but HP announced end-of-life
for OpenVMS in 2020).&lt;/p&gt;

&lt;h1 id=&quot;separate-translation&quot;&gt;Separate translation&lt;/h1&gt;

&lt;p&gt;Per 2.1 in the standard, the source program is handled in independent translation units; each
translation unit is handled by itself and the output of all translation units is combined
together to create the executable program.&lt;/p&gt;

&lt;p&gt;A translation unit is a source file and all the files inserted with &lt;code&gt;#include&lt;/code&gt; preprocessor
directives. Since files inserted by &lt;code&gt;#include&lt;/code&gt; are themselves source files, there is some
external mechanism that decides which source files are the starts of translation units.&lt;/p&gt;

&lt;p&gt;One reason for the persistent use of stream APIs is that files couldn’t necessarily fit into
memory, even just the files for a single translation unit. Since C++ can be parsed with a
context-free grammar augmented with semantic rules, a source file can be processed in a
linear sequence from beginning to end, and so could be processed with stream API calls. It
adds just enough complexity that it bleeds into the various steps of the compiler, so we
will ignore this.&lt;/p&gt;

&lt;p&gt;Not considering anything else, we have this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;file ... ==&amp;gt; compiler ==&amp;gt; linker ==&amp;gt; executable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where translation of each file could be done in any arbitrary order or even in parallel.&lt;/p&gt;

&lt;h1 id=&quot;character-sets&quot;&gt;Character sets&lt;/h1&gt;

&lt;p&gt;When compiling C++, there are three character sets we will encounter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;File character set&lt;/li&gt;
  &lt;li&gt;Source character set&lt;/li&gt;
  &lt;li&gt;Execution character set&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These may all be the same, or may be distinct. A file may have an arbitrary character set, as
long as the compiler can translate this into the source character set. In practice, compilers
only deal with a few character sets, and may require that this be specified in some manner by
the user. GCC expects that the file character set is isomorphic with ISO 10646 - this does not
mean that it must be Unicode, just that there is a 1-to-1 translation between the file character
set and Unicode. Also, note that UTF-8 is a very common file encoding.&lt;/p&gt;

&lt;p&gt;The source character set was mentioned above. It’s not ISO 646 or Unicode, and it can be unique
to a specific compiler. The standard just says that a certain set of characters must be
supported. In practice, modern compilers use ISO 10646 internally. The entire reason to have
the formality of a source character set is that real-world files are messy, so this gives the
compiler writer a chance to fix things up to be canonical. Microsoft used to put a BOM into
UTF-8 files even though this is not needed and makes invalid files. Or the author of a file
mixed line endings due to copy/paste (lines with LF and lines with CRLF). Or really horrible things
like mixed encodings, where lines were merged from a CP1252-encoded file into a UTF-8 encoded file.&lt;/p&gt;

&lt;p&gt;The execution character set is the character set that strings in the executable are formatted in.
This is very implementation-specific, and driven by the target platform. Note that only strings
and character constants need to be translated - the C++ source at this point is gone, converted to
whatever execution language was targetted. Again, UTF-8 is a common execution character set, because
Unix operating systems have converged to that as the default system character set. Since the compiler
is in charge of this, it generally comes out pristine, although garbage-in-garbage-out applies here.&lt;/p&gt;

&lt;h1 id=&quot;translate-to-basic-source-character-set&quot;&gt;Translate to basic source character set&lt;/h1&gt;

&lt;p&gt;The first step in the C++ compilation process is to translate characters from the in-file format
to the source-character format. This is section 2.2.1 in the C++14 standard&lt;/p&gt;

&lt;p&gt;Now, there are trivial ways to solve this. If source files are encoded in ASCII, ISO/IEC 10646,
or UTF-8, and if the compiler knows about UTF-8, then all these characters would be the same
in the file and in the source representation. And this is how compilers worked for many years.&lt;/p&gt;

&lt;p&gt;However, the world is polyglot, and the standard has advanced. Newer versions of the standard
mention that you can use Unicode characters, inserted with universal character names, and that
means that the character set is now much larger than it used to be. And these Unicode characters
can be used in identifiers, not just in comments and strings.&lt;/p&gt;

&lt;p&gt;You don’t literally need to encode characters with universal-character-names, which would look
like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
\u00F6
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(which is the letter ö, if you were curious). The standard uses very careful language to allow
for old file encodings that cannot contain Unicode characters; by using universal-character-name
sequences, you can put Unicode characters into any file format that can hold all of the basic
characters.&lt;/p&gt;

&lt;p&gt;So now we have&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;file ... ==&amp;gt; source-chars ==&amp;gt; compiler ==&amp;gt; linker ==&amp;gt; executable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But really, it’s a pipeline&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;file1 ==&amp;gt; source-chars ==&amp;gt; compiler ==&amp;gt; object1
file2 ==&amp;gt; source-chars ==&amp;gt; compiler ==&amp;gt; object2
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each stage of the pipeline transforms a sequence of bytes, although the transform may be the
identify transform. For source character translation, if the file is already in the source character
format, then nothing needs to happen.&lt;/p&gt;

&lt;p&gt;This is a part where the standard is either insufficient or not fully implemented, because GCC
only supports identifiers with &lt;code&gt;\u&lt;/code&gt; or &lt;code&gt;\U&lt;/code&gt; escapes, and not the Unicode characters themselves.&lt;/p&gt;

&lt;h1 id=&quot;other&quot;&gt;other&lt;/h1&gt;

&lt;p&gt;With the include model, we have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(file, file, ...) ==&amp;gt; logical-source ==&amp;gt; compiler ==&amp;gt; executable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;logical-source&lt;/code&gt; is the file that would be created by inserting contents of files
in place of &lt;code&gt;#include&lt;/code&gt; preprocessor directives.&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Dec 2016 19:11:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/12/30/compiling-c++.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/12/30/compiling-c++.html</guid>
        
        <category>C++</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://intelxed.github.io/&quot;&gt;Intel XED&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.citusdata.com/blog/2016/12/15/citus-replication-model-today-and-tomorrow/&quot;&gt;Citus’ Replication Model: Today and Tomorrow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nothings/single_file_libs&quot;&gt;Single-file public-domain/open source libraries with minimal dependencies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://researcher.watson.ibm.com/researcher/files/us-lmandel/lattner.pdf&quot;&gt;Swift: Challenges and Opportunity for Language and Compiler Research&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/mmc-writes/the-fourth-industrial-revolution-a-primer-on-artificial-intelligence-ai-ff5e7fffcae1#.u1b2hlwp1&quot;&gt;The fourth industrial revolution: a primer on Artificial Intelligence (AI)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.stroustrup.com/good_concepts.pdf&quot;&gt;Concepts: The Future of Generic Programming&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://course.fast.ai/&quot;&gt;Practical Deep Learning For Coders, Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docker-saigon.github.io/post/Docker-Internals/&quot;&gt;Linux Container Internals&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.plover.com/prog/git-tastrophe.html&quot;&gt;Another Git catastrophe cleaned up&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/3853/Wave-a-Standard-conformant-C-preprocessor-library&quot;&gt;Wave: a Standard conformant C++ preprocessor library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cppinternals/&quot;&gt;The GNU C Preprocessor Internals&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mcpp.sourceforge.net/&quot;&gt;mcpp – a portable C preprocessor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/io.html&quot;&gt;Python 3: io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/glossary.html&quot;&gt;Python 3: Glossary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html&quot;&gt;Python 3: Built-in Types&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot;&gt;Python 3: argparse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cplusplus&quot;&gt;ISO C++ Standards Commitee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://isocpp.org/std/the-standard&quot;&gt;ISO C++ The Standard&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Dec 2016 09:21:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/12/21/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/12/21/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Creating packages for C/C++</title>
        <description>&lt;p&gt;If only we had a package manager for C++. By this I mean something that C/C++ developers on
any operating system could use; packages that can only be used from Red Hat don’t do Mac
or Windows or even Debian developers any good.&lt;/p&gt;

&lt;p&gt;But that’s not actually the problem - if only all the libraries we collectively need
were available as packages.&lt;/p&gt;

&lt;p&gt;There are a dozen C++ package managers now. Each of them has 10-50 packages. And then that’s
usually about it. Since any single package manager lacks all the packages one needs, no
package manager gets widespread adoption.&lt;/p&gt;

&lt;p&gt;This is not a chicken-and-egg situation. And it’s not that none of the package managers are
all that terrible. None are great, but many are usable.&lt;/p&gt;

&lt;p&gt;The problem needs to be attacked from the other end. Instead of designing a package manager
and then starting to assemble packages for it, just make all the packages. All the packages.
Thousands and tens of thousands of them. Actually, millions, because source is constantly
updated to keep it working and add features.&lt;/p&gt;

&lt;p&gt;This either means an army of people spending a collective hundred thousand hours,
or a (semi) automated tool.&lt;/p&gt;

&lt;p&gt;I started on this; just barely. Here are some notes towards the system I think is needed.&lt;/p&gt;

&lt;h2 id=&quot;the-basic-idea&quot;&gt;The basic idea&lt;/h2&gt;

&lt;p&gt;Something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make-package curl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and out pops a package for curl. This implies several things.&lt;/p&gt;

&lt;p&gt;First, that we can take the string &lt;code&gt;curl&lt;/code&gt; and find curl source with it. This could be&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;looking on Github or another source repository.&lt;/li&gt;
  &lt;li&gt;looking in a &lt;code&gt;make-package&lt;/code&gt; forwarding list&lt;/li&gt;
  &lt;li&gt;searching in Google&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, we need to analyze what we downloaded, whether it is a Git repo, tar/zip file, or
some other collection.&lt;/p&gt;

&lt;p&gt;Since purely automated analysis is unlikely to result in a usable package for all but the
most trivial of projects, we will have to add a little human input from time to time.&lt;/p&gt;

&lt;p&gt;Once we know how to assemble our package, we do so, in whatever format of the day is desired.&lt;/p&gt;

&lt;p&gt;Then, repeat, for all versions of all projects that we wish as packages.&lt;/p&gt;

&lt;p&gt;There is a common engine fronted by one or more input systems and backed by one or more output
systems.&lt;/p&gt;

&lt;h2 id=&quot;input-systems&quot;&gt;Input systems&lt;/h2&gt;

&lt;p&gt;Git - Github, Gitorius, Gitlab, arbitrary Git upstreams.&lt;/p&gt;

&lt;p&gt;Launchpad - https://launchpad.net/&lt;/p&gt;

&lt;p&gt;Sourceforge, although no one cares any more, do they?&lt;/p&gt;

&lt;p&gt;Maybe every Linux distribution can serve as an upstream?&lt;/p&gt;

&lt;p&gt;Private company source control systems.&lt;/p&gt;

&lt;p&gt;FTP sites.&lt;/p&gt;

&lt;p&gt;Google can help us find things, but it will likely require human sifting. I assume eventually
that there will be a master repository - not of source, but of pointers to source.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;Jumping to the end, package source will have metadata, a manifest, that instructs how to
assemble the source into a package. That is best kept with the source, but that’s clearly
not going to happen right away. So we keep it and associate it with the source on need. Someday,
maybe, once we have packages for everything, package authors will take over the maintenance
of the package metadata. But we will not count on that.&lt;/p&gt;

&lt;p&gt;In fact, this is the key. We have to do all of it and keep it running without expecting
anyone else to participate. Oddly enough, I think that’s the best way to guarantee
that everyone else does join in.&lt;/p&gt;

&lt;h2 id=&quot;output-systems&quot;&gt;Output systems&lt;/h2&gt;

&lt;p&gt;We are very definitely not going to presume the one true package format. That is just as mad
as trying to have everyone adopt a package metadata format.&lt;/p&gt;

&lt;p&gt;For this, we embrace a polyglot nature. Whatever package format is desired, we write a generator
for it. This is actually not very hard. Every existing package format to date is pretty simple,
it’s some kind of simple container with one or more manifest files embedded. This is very close
to how compilers work - the compiler itself can be generic, with several backends to generate
code in the appropriate format, and several front-ends to parse text into syntax trees.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 13:11:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/12/18/creating-packages-for-c++.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/12/18/creating-packages-for-c++.html</guid>
        
        <category>C++</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Using Matplotlib</title>
        <description>&lt;p&gt;Matplotlib is worth using, but it’s very finicky, and the defaults are aimed at
a class of user that doesn’t include me.&lt;/p&gt;

&lt;h2 id=&quot;matlab-style-with-pyplot&quot;&gt;MATLAB style with pyplot&lt;/h2&gt;

&lt;p&gt;I started with the simple declarative style via &lt;code&gt;matplotlib.pyplot&lt;/code&gt;, but that quickly
gets limited. It looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Agg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;lines.linewidth&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;lines.color&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;figure.figsize&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Orgs by create date&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year_fraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;created_at&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ticklabel_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;useOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savefig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbox_inches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;tight&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For example, without the &lt;code&gt;useOffset=False&lt;/code&gt; bit, my X axis was numbered 0-5 with
an offset written above it, rathern than 2012-2017 as I intended. I suppose this is
useful for scientific plots. I spent 30 minutes combing through documentation trying
to figure this out before resorting to StackOverflow. Similarly, I had to use other
StackOverflow entries to tell me how to write the graph as a file and not to show
it in an interactive window. Again, I’m not the target audience.&lt;/p&gt;

&lt;h2 id=&quot;object-oriented-matplotlib&quot;&gt;object-oriented Matplotlib&lt;/h2&gt;

&lt;p&gt;This is the right way for me, I think. Note that the code example above had to dip
into the object layer anyway, in order to configure the X axis.&lt;/p&gt;

&lt;h2 id=&quot;xkcd-style&quot;&gt;xkcd style&lt;/h2&gt;

&lt;p&gt;One cool thing is that someone made an xkcd style for Matplotlib. Just wrap your
code in this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xkcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# your code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and your graphics will have that hand-drawn xkcd style applied to them.&lt;/p&gt;

&lt;p&gt;Here is the example from the Matplotlib docs&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xkcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Based on &amp;quot;Stove Ownership&amp;quot; from XKCD by Randall Monroe&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# http://xkcd.com/418/&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_axes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;THE DAY I REALIZED&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;I COULD COOK BACON&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;WHENEVER I WANTED&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrowprops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrowstyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;-&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xytext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;my overall health&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;quot;Stove Ownership&amp;quot; from xkcd by Randall Monroe&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Based on &amp;quot;The Data So Far&amp;quot; from XKCD by Randall Monroe&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# http://xkcd.com/373/&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_axes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.125&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.125&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xaxis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_ticks_position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_xticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_xlim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;110&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_xticklabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;CONFIRMED BY&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;EXPERIMENT&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;REFUTED BY&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;EXPERIMENT&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;CLAIMS OF SUPERNATURAL POWERS&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;quot;The Data So Far&amp;quot; from xkcd by Randall Monroe&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;ggplot&quot;&gt;ggplot&lt;/h2&gt;

&lt;p&gt;I wish Matplotlib learned more lessons from Leland Wilkinson’s Grammar of Graphics.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://seaborn.pydata.org/index.html#&quot;&gt;Seaborn&lt;/a&gt; is an interesting start.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9303728/matplotlib-yaxis-range-display-using-absolute-values-rather-than-offset-values&quot;&gt;Matplotlib yaxis range display using absolute values rather than offset values?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3677368/matplotlib-format-axis-offset-values-to-whole-numbers-or-specific-number&quot;&gt;matplotlib: format axis offset-values to whole numbers or specific number&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dansaber.wordpress.com/2016/10/02/a-dramatic-tour-through-pythons-data-visualization-landscape-including-ggplot-and-altair/&quot;&gt;A Dramatic Tour through Python’s Data Visualization Landscape (including ggplot and Altair)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.yhat.com/posts/ggplot-for-python.html&quot;&gt;ggplot for python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jakevdp.github.io/blog/2013/03/23/matplotlib-and-the-future-of-visualization-in-python/&quot;&gt;Matplotlib and the Future of Visualization in Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Exploratory-Data-Analysis-John-Tukey/dp/0201076160&quot;&gt;Exploratory Data Analysis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Semiology-Graphics-Diagrams-Networks-Maps/dp/1589482611&quot;&gt;Semiology of Graphics: Diagrams, Networks, Maps&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Nov 2016 13:11:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/11/29/using-matplotlib.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/11/29/using-matplotlib.html</guid>
        
        <category>python</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://mpld3.github.io/&quot;&gt;mpld3: Bringing Matplotlib to the Browser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bokeh.pydata.org/en/latest/&quot;&gt;Bokeh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://vispy.org/&quot;&gt;VisPy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.scipy.org/&quot;&gt;SciPy.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://matplotlib.org/&quot;&gt;Matplotlib&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.scipy-lectures.org/intro/matplotlib/matplotlib.html&quot;&gt;1.4. Matplotlib: plotting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rouge.jneen.net/&quot;&gt;{Rouge}&lt;/a&gt; with lots of &lt;a href=&quot;https://github.com/jneen/rouge/wiki/List-of-supported-languages-and-lexers&quot;&gt;supported languages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt; with lots of &lt;a href=&quot;http://pygments.org/docs/lexers/&quot;&gt;supported languages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9622163/save-plot-to-image-file-instead-of-displaying-it-using-matplotlib-so-it-can-be&quot;&gt;Save plot to image file instead of displaying it using Matplotlib&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://matplotlib.org/faq/howto_faq.html#generate-images-without-having-a-window-appear&quot;&gt;http://matplotlib.org/faq/howto_faq.html#generate-images-without-having-a-window-appear&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers&quot;&gt;https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Nov 2016 17:53:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/11/28/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/11/28/recent-links.html</guid>
        
        <category>text</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Python virtualenv</title>
        <description>&lt;p&gt;Lately I use virtualenv reflexively, because big packages have lots of dependencies. It’s
mildly annoying, I wish version conflicts didn’t happen, but that’s life. This happens 
at the OS level, but it’s epochal - the transition from DOS to Windows, say, or from
Mac OS 9 to Mac OS X.&lt;/p&gt;

&lt;p&gt;That said, there is an advantage to using virtualenv, and that is that it makes it
a little easier to use multiple major versions of Python on the same machine, because
activating a virtualenv environment fiddles with paths.&lt;/p&gt;

&lt;p&gt;I have two main reasons for using virtualenv. First, I actually do have conflicts from
time to time with package versions, and I also do need to run both Python 2 and Python 3
(sigh). But the second reason is equally nice - I can install something to try it out, and
if it fails, I just trash a virtualenv directory. This is also why people use Docker, and
why things like Vagrant or Puppet also started seeing widespread use; it’s easy to screw
things up when everything is installed globally, so until operating systems get fixed, use
systems like this to pretend to have a global system, or to hide the pain of constantly
re-installing. For Python, we have &lt;code&gt;pip freeze&lt;/code&gt; and &lt;code&gt;pip install -r&lt;/code&gt; to somewhat automate
that, and Ruby has Bundler.&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;The basic operations are these&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a virtualenv environment based on a physical Python install; this is essentially a
new custom Python install.&lt;/li&gt;
  &lt;li&gt;Activate a specific virtualenv environment&lt;/li&gt;
  &lt;li&gt;Deactivate the current virtualenv environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t think this is a stack, but it might be (I’ve never experimented).&lt;/p&gt;

&lt;p&gt;That’s it. Best practice would probably be to put all these virtualenv directories
in one place, maybe alongside the physical Python installs, because the virtualenv
folders point back to your physical installs; you can’t just copy these to a new system.&lt;/p&gt;

&lt;p&gt;They are fairly small, on the order of 20 MB, so not too painful to have lots of them, and
they only take a few seconds to create.&lt;/p&gt;

&lt;h1 id=&quot;windows&quot;&gt;Windows&lt;/h1&gt;

&lt;p&gt;Using virtualenv on Windows is a little different than on Unix (Linux/Mac). Creating is
pretty much the same, but activating is a little different.&lt;/p&gt;

&lt;p&gt;Note: My command prompts are using the &lt;code&gt;$&lt;/code&gt; character because the syntax highlighter I’m
using doesn’t work for DOS/Powershell style consoles. I’ll fix that at some point. I also
transcribed &lt;code&gt;\\&lt;/code&gt; to &lt;code&gt;/&lt;/code&gt; for the same reason. Microsoft really needs to abandon &lt;code&gt;\\&lt;/code&gt; as 
the path separator char.&lt;/p&gt;

&lt;p&gt;For the following, I have two versions of Python installed in these global directories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C:/Python27&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C:/Python35&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-new-virtualenv-environment&quot;&gt;Create new virtualenv environment&lt;/h2&gt;

&lt;p&gt;The simple version is this - create a new virtual environment into the directory &lt;code&gt;matplotlib&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; virtualenv matplotlib
&lt;span class=&quot;go&quot;&gt;Using base prefix &amp;#39;C:/python35&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;New python executable in C:/w/matplotlib/Scripts/python.exe&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Installing setuptools, pip, wheel...done.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want, you can specify a specific version. For running Jekyll, I need Python 2.7
(because I’m using Pygments).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; virtualenv -p C:/Python27/python.exe py-jekyll
&lt;span class=&quot;go&quot;&gt;Using base prefix &amp;#39;c:/python35&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;New python executable in C:/w/py-jekyll/Scripts/python.exe&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Installing setuptools, pip, wheel...done.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By default, the packages you already had installed in your base Python version are not carried
over into your new version. This is a good thing, but it means you’ll have to install packages.&lt;/p&gt;

&lt;h2 id=&quot;activate-environment&quot;&gt;Activate environment&lt;/h2&gt;

&lt;p&gt;From whatever command prompt you’re going to issue further Python commands from:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;matplotlib
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; Scripts/activate
&lt;span class=&quot;go&quot;&gt;(matplotlib) $&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the prompt changes to remind you which virtual environment you have active.&lt;/p&gt;

&lt;p&gt;If you’re going to install packages, make sure you do this first. All this does is fiddle with
the environment variables to put your &lt;code&gt;virtualenv&lt;/code&gt; Python version first.&lt;/p&gt;

&lt;h2 id=&quot;deactivate-environment&quot;&gt;Deactivate environment&lt;/h2&gt;

&lt;p&gt;Since this is Windows, you could just close the command window. Or you can deactivate the
environment to get back to whatever you had set globally:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;(matplotlib) $ deactivate&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 28 Nov 2016 12:11:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/11/28/python-virtualenv.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/11/28/python-virtualenv.html</guid>
        
        <category>python</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

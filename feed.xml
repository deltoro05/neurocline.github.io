<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 27 Aug 2015 01:35:04 -0700</pubDate>
    <lastBuildDate>Thu, 27 Aug 2015 01:35:04 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>REST, JSON, etc</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://jansson.readthedocs.org/en/2.7/&quot;&gt;Jansson&lt;/a&gt; - C library for encoding/decoding JSON&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lethargy.org/~jesus/writes/why-json-sucks/#.Vd5r2PlVhBc&quot;&gt;Why JSON sucks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm&quot;&gt;Architectural Styles and the Design of Network-based Software Architectures&lt;/a&gt; - Roy Fielding’s dissertation that introduced REST to the world.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/articles/webber-rest-workflow&quot;&gt;How to GET a Cup of Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.looah.com/source/view/2284&quot;&gt;How I Explained REST to My Wife&lt;/a&gt; - a copy, since the original was taken down.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.steveklabnik.com/posts/2011-08-07-some-people-understand-rest-and-http&quot;&gt;Some People Understand REST and HTTP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.steveklabnik.com/posts/2011-07-03-nobody-understands-rest-or-http&quot;&gt;Nobody Understands REST or HTTP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://json-schema.org/&quot;&gt;json-schema.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/JSON&quot;&gt;JSON&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;GitHub API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc5988&quot;&gt;RFC 5988&lt;/a&gt; - web linking&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.twitter.com/rest/public&quot;&gt;Twitter REST APIs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jsonapi.org/&quot;&gt;json:api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://spacetelescope.github.io/understanding-json-schema/index.html&quot;&gt;Understanding JSON Schema&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/articles/richardsonMaturityModel.html&quot;&gt;Richardson Maturity Model&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://restcookbook.com/&quot;&gt;The RESTful CookBook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://restful-api-design.readthedocs.org/en/latest/&quot;&gt;Thoughts on RESTful API Design&lt;/a&gt; - Lessons learnt from designing the Red Hat Enterprise Virtualization API&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Aug 2015 18:44:00 -0700</pubDate>
        <link>http://neurocline.github.io/programming/2015/08/26/rest-json-etc.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/programming/2015/08/26/rest-json-etc.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Recent Links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://konradzemek.com/2015/08/16/asio-ssl-and-scalability/&quot;&gt;Asio, SSL, and scalability&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/mnot/382aca0b23b6bf082116&quot;&gt;Edward Snowden at IETF 93&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hal.inria.fr/hal-01100647/document&quot;&gt;Branch Prediction and the Performance of Interpreters - Don’t Trust Folklore&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gpfault.net/posts/pointer-ownership-comments.txt.html&quot;&gt;You Can Stop Writing Comments About Pointer Ownership&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://acko.net/blog/how-to-fold-a-julia-fractal/&quot;&gt;How to Fold a Julia Fractal&lt;/a&gt;. Awesome.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cooking.nytimes.com/&quot;&gt;The New York Times Cooking&lt;/a&gt;. The New York Times posted 17,000 recipes in an easily browsable and searchable format.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/22290501/can-i-download-the-visual-c-command-line-compiler-without-visual-studio&quot;&gt;Piecing out Visual Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.windows.com/en-US/downloads/windows-10-sdk&quot;&gt;Windows SDK for Windows 10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.windows.com/en-us/downloads&quot;&gt;Downloads and tools for Windows 10&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Aug 2015 20:01:00 -0700</pubDate>
        <link>http://neurocline.github.io/programming/2015/08/20/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/programming/2015/08/20/recent-links.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Recent Links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/dynomite&quot;&gt;Dynomite&lt;/a&gt;. Dynomite, inspired by Dynamo whitepaper, is a thin, distributed dynamo layer for different storages and protocols. &lt;a href=&quot;http://techblog.netflix.com/2014/11/introducing-dynomite.html&quot;&gt;Netflix blog article on Dynomite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamo_(storage_system)&quot;&gt;Dynamo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Cassandra&quot;&gt;Apache Cassandra&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Riak&quot;&gt;Riak&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Voldemort_(distributed_data_store)&quot;&gt;Voldemort&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/adrianco/architectures-for-high-availability-qconsf&quot;&gt;Architectures for High Availability&lt;/a&gt;. From QConf.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/articles/architects-should-code-bryson&quot;&gt;Architects Should Code: The Architect’s Misconception&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://theburningmonk.com/2015/05/craftconf15-takeaways-from-scaling-micro-services-at-gilt/&quot;&gt;CraftConf 15–Takeaways from “Scaling micro-services at Gilt”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.simplicityitself.com/learning/getting-started-microservices/service-discovery-overview/&quot;&gt;Service Discovery Overview&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Aug 2015 18:45:00 -0700</pubDate>
        <link>http://neurocline.github.io/programming/2015/08/13/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/programming/2015/08/13/recent-links.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Microservices</title>
        <description>&lt;p&gt;They’re good.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/articles/microservices.html&quot;&gt;Microservices&lt;/a&gt; definition from Martin Fowler.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/presentations/netflix-ipc&quot;&gt;Scalable Microservices at Netflix. Challenges and Tools of the Trade&lt;/a&gt;.
Talk by Sudhir Tonse at QCon 2014. &lt;a href=&quot;http://www.slideshare.net/stonse/microservices-at-netflix&quot;&gt;Subset of slides for skimming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://microservices.io/&quot;&gt;Microservice architecture patterns and best practices&lt;/a&gt;. Chris Richardson&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nginx.com/blog/microservices-at-netflix-architectural-best-practices/&quot;&gt;Adopting Microservices at Netflix: Lessons for Architectural Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nginx.com/blog/adopting-microservices-at-netflix-lessons-for-team-and-process-design/&quot;&gt;Adopting Microservices at Netflix: Lessons for Team and Process Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/eureka&quot;&gt;Netflix/eureka&lt;/a&gt;. Eureka is a REST (Representational State Transfer) based service that is primarily used in the AWS cloud for locating services for the purpose of load balancing and failover of middle-tier servers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/ribbon&quot;&gt;Netflix/ribbon&lt;/a&gt;. Ribbon is a client side IPC library that provides load balancing, fault tolerance, multiple protocols in a async and reactive model, and caching and balancing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/Hystrix&quot;&gt;Netflix/Hystrix&lt;/a&gt;. Hystrix is a latency and fault tolerance library designed to isolate points of access to remote systems, services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems where failure is inevitable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cloud/library/cl-bluemix-microservices-in-action-part-1-trs/&quot;&gt;Microservices in action, Part 1: Introduction to microservices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html&quot;&gt;Microservices: Not a Free Lunch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.fiercedevops.com/story/best-practices-monitoring-microservices-containers/2015-05-25&quot;&gt;Best practices for monitoring microservices, containers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;InfoQ has a ton of Microservices articles.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Aug 2015 18:01:00 -0700</pubDate>
        <link>http://neurocline.github.io/programming/2015/08/13/microservices.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/programming/2015/08/13/microservices.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Telling time in seconds</title>
        <description>&lt;p&gt;Our current time system has multiple bases - base 60 for seconds and minutes, base 24 for hours, base 7 for
weeks, base 12 for months - and that’s an approximation, of course.&lt;/p&gt;

&lt;p&gt;What if we just told time in seconds?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;100 seconds = 1.67 minutes&lt;/li&gt;
  &lt;li&gt;1000 seconds = 1 kilosecond = 16.7 minutes&lt;/li&gt;
  &lt;li&gt;10000 seconds = 10 kiloseconds = 2.78 hours&lt;/li&gt;
  &lt;li&gt;100000 seconds = 100 kiloseconds = 1.16 days&lt;/li&gt;
  &lt;li&gt;1000000 seconds = 1 megasecond = 1.65 weeks&lt;/li&gt;
  &lt;li&gt;10000000 seconds = 10 megaseconds = 3.81 months&lt;/li&gt;
  &lt;li&gt;100000000 seconds = 100 megaseconds = 3.17 years&lt;/li&gt;
  &lt;li&gt;1000000000 seconds = 1 gigasecond = 31.7 years&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, if we want to approximate our current time references, here’s what we’d say&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 hour is close to 4 kiloseconds&lt;/li&gt;
  &lt;li&gt;1 day is close to 100 kiloseconds&lt;/li&gt;
  &lt;li&gt;1 week is close to 1 megasecond&lt;/li&gt;
  &lt;li&gt;1 month is close to 3 megaseconds&lt;/li&gt;
  &lt;li&gt;1 year is close to 32 megaseconds&lt;/li&gt;
  &lt;li&gt;1 century is close to 3 gigaseconds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it’s certainly a lot easier to compare kiloseconds to megaseconds than it is to compare
hours to weeks.&lt;/p&gt;

&lt;p&gt;Once we go into space for real and start living in orbit or on other planets, “day” means
something very relative, and so does “year”. So we will have to give up parochial time spans
and go to something useful, and it could be as simple as SI prefixes combined with seconds.&lt;/p&gt;

&lt;p&gt;Credit to Vernor Vinge for being the first person I saw writing about this, in A Deepness In The Sky (1999).&lt;/p&gt;

&lt;p&gt;And now that I search, amusingly Wikipedia has pages for megasecond and gigasecond, where
someone has listed various time durations in fractions of these values.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Megasecond&quot;&gt;Megasecond&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Gigasecond&quot;&gt;Gigasecond&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hadn’t thought about it, but Gigaseconds covers human history, since the next biggest step up,
terasecond, is talking about timeframes in units of 31,588 years. And teraseconds covers the range
up through 32 million years, which is a respectable amount of time.&lt;/p&gt;

&lt;p&gt;And the universe is less than half an exasecond old.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Aug 2015 12:42:00 -0700</pubDate>
        <link>http://neurocline.github.io/programming/2015/08/13/telling-time-in-seconds.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/programming/2015/08/13/telling-time-in-seconds.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Recent Links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.usenix.org/legacy/events/hotos03/tech/full_papers/candea/candea.pdf&quot;&gt;Crash-only software&lt;/a&gt;.
2003. Provocative but useful idea that, once you have software that can perfectly recover from crashes,
never bother to shut down other than by crashing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nms.csail.mit.edu/~stavros/pubs/hstore.pdf&quot;&gt;The End of an Architectural Era (It’s Time for a Complete Rewrite)&lt;/a&gt;.
2007. Michael Stonebreaker and co-authors argue that relational databases need a reboot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-28.pdf&quot;&gt;Above the Clouds: A Berkeley View of Cloud Computing&lt;/a&gt;.
2009.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.eecs.harvard.edu/~mdw/papers/seda-sosp01.pdf&quot;&gt;SEDA: An Architecture for Well-Conditioned, Scalable Internet Services&lt;/a&gt;.
2001. Describes a method for controlling load presented to services.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://conferences.sigcomm.org/sigcomm/2015/pdf/papers/p183.pdf&quot;&gt;Jupiter Rising: A Decade of Clos Topologies and Centralized Control in Google’s Datacenter Network&lt;/a&gt;. 2015.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://highscalability.com/blog/2012/9/4/changing-architectures-new-datacenter-networks-will-set-your.html&quot;&gt;Changing Architectures: New Datacenter Networks Will Set Your Code And Data Free&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://highscalability.com/blog/2015/8/10/how-google-invented-an-amazing-datacenter-network-only-they.html/&quot;&gt;How Google Invented An Amazing Datacenter Network Only They Could Create&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/eureka/wiki/Eureka-at-a-glance&quot;&gt;Eureka at a glance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://research.cs.wisc.edu/adsl/Publications/fbmessages-fast14.pdf&quot;&gt;Analysis of HDFS Under HBase: A Facebook Messages Case Study&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forum.treode.com/t/the-minitransaction-an-alternative-to-multi-paxos-and-raft/25&quot;&gt;The Minitransaction: An Alternative to Multi-Paxos and Raft&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Aug 2015 18:45:00 -0700</pubDate>
        <link>http://neurocline.github.io/programming/2015/08/12/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/programming/2015/08/12/recent-links.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Session state</title>
        <description>&lt;p&gt;Some kinds of network interations are best thought of in the context of a session that is
initiated, used, and then destroyed. The states in the session are represented by data
we store, usually at the “server” end, but sometimes both.&lt;/p&gt;

&lt;p&gt;Once we have session state, however, we have to make sure that our session gets exclusive
access to this session state data, and that we can get access to it even if the underlying
connection changes, or even if the machines we are using as part of the session change
underneath us. For example, a server might crash or be restarted for maintenance reasons
in the middle of our session.&lt;/p&gt;

&lt;p&gt;So we’d like to persist session state beyond any single machine, and yet not have this
be so expensive that sessions are slow. This means we need to store session state data on more
than just the server endpoint, and ideally this data is stored redundantly so that we are
fault-tolerant to normal failure cases (hardware fails, at inopportune times).&lt;/p&gt;

&lt;p&gt;And we’d even like to entertain scalability far beyond what is possible now. At the moment, sessions
are typically tied to servers located in a single datacenter, but for both elasticity and for
reliability, we’d like to be able to move sessions not just between servers in a data center, but
between data centers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://research.microsoft.com/pubs/74713/ssm-nsdi.pdf&quot;&gt;Session State: Beyond Soft State&lt;/a&gt;. 2003
paper by Benjamin C. Ling, Emre Kiciman and Armando Fox, talking about a system they designed
called SSM, which is highly fault-tolerant, and designed towards the needs of session state.
This also includes some auto-tuning methods for detecting and handling load.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://delivery.acm.org/10.1145/1970000/1965751/p121-ousterhout.pdf&quot;&gt;The Case For RAMClouds: Scalable High-Performance Storage Entirely in DRAM &lt;/a&gt;. 2011 update of 2009 paper by John Ousterhout and his group at Stanford, making a case for RAM-only data storage that is still fault-tolerant.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://web.stanford.edu/~ouster/cgi-bin/papers/ramcloud-recovery.pdf&quot;&gt;Fast Crash Recovery in RAMCloud&lt;/a&gt;.
2011. Describes RAMCloud’s recovery technique. RAMCloud doesn’t replicate data in RAM, instead it replicates
logs across many servers, allowing both redundant and fast recovery.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.usenix.org/system/files/conference/fast14/fast14-paper_rumble.pdf&quot;&gt;Log-structured Memory for DRAM-based Storage&lt;/a&gt;.
2014. Describes RAMCloud’s main innovation, log-structured memory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://perso.telecom-paristech.fr/~kuznetso/INF346/papers/pnuts.pdf&quot;&gt;PNUTS: Yahoo!’s Hosted Data Serving Platform&lt;/a&gt;.
2008 paper by Brian F. Cooper and company describing Yahoo’s distributed database system. They decided
that eventual consistency was sufficient.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://redis.io/topics/sentinel&quot;&gt;Redis Sentinel&lt;/a&gt;. From Redis documentation, describes how to use Redis in
a high-availability mode.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://redis.io/topics/cluster-spec&quot;&gt;Redis Cluster&lt;/a&gt;. From Redis documentation, describes the new (as of 3.0)
clustering system allowing for a distributed implementation of Redis.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/soundcloud/roshi&quot;&gt;roshi&lt;/a&gt;. Github repo. Distributed storage of timestamped events.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Session_(computer_science)&quot;&gt;Session&lt;/a&gt; definition from Wikipedia.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Aug 2015 17:27:00 -0700</pubDate>
        <link>http://neurocline.github.io/programming/2015/08/12/session-state.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/programming/2015/08/12/session-state.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Recent Links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://ramcloud.atlassian.net/wiki/display/RAM/RAMCloud&quot;&gt;RAMCloud&lt;/a&gt; from &lt;a href=&quot;http://web.stanford.edu/~ouster/cgi-bin/home.php&quot;&gt;John Ousterhout&lt;/a&gt;’s group at Stanford. Also see the &lt;a href=&quot;https://ramcloud.atlassian.net/wiki/display/RAM/Design+Review&quot;&gt;Design Review&lt;/a&gt; that happened early in RAMCloud’s development cycle.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://webhome.cs.uvic.ca/~ycoady/&quot;&gt;Yvonne Coady&lt;/a&gt; working on modularity of system infrastructure software.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cs.brown.edu/~mph/Herlihy91/p124-herlihy.pdf&quot;&gt;Wait-Free Synchronization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ongardie.net/blog/exceptions/&quot;&gt;The Cost of Exceptions of C++&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Aug 2015 23:25:00 -0700</pubDate>
        <link>http://neurocline.github.io/programming/2015/08/11/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/programming/2015/08/11/recent-links.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Recent Links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://deconcentration-of-attention.com/&quot;&gt;Deconcentration of Attention: Addressing the Complexity of Software Engineering&lt;/a&gt; - interesting article on the complexity of software systems and the thinking that is required, and promoting the idea of deconcentration.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/danluu/post-mortems&quot;&gt;post-mortems&lt;/a&gt; - a hopefully growing collection of software project post-mortems, most of them modern.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dave.2heney.net/2015/08/08/performance-without-the-event-loop&quot;&gt;Performance without the event loop&lt;/a&gt; - good if basic talk on scalable software architecture and how Go fits in, mostly about network dispatch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dave.cheney.net/2015/06/09/gb-a-project-based-build-tool-for-the-go-programming-language&quot;&gt;gb, a project based build tool for the Go programming language&lt;/a&gt; - describes a project-centric build tool, meaning all your source (including vendor code) is present but clearly separated.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=10027102&quot;&gt;Ask HN: Books with a high signal to noise ratio?&lt;/a&gt; - a surprisingly good curated list of books.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://intelligence.org/files/PredictingAI.pdf&quot;&gt;How We’re Predicting AI—or Failing To&lt;/a&gt; - article by Stuart Armstrong and Kay Sotala analyzing all the (wrong so far) predictions about AI.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://intelligence.org/blog/&quot;&gt;MIRI blog&lt;/a&gt; - blog from Machine Intelligence Research Institute. Also see papers.&lt;/p&gt;

&lt;p&gt;A kerfluffle between Steven Pinker and Nicolas Nassim Taleb over Pinker’s book The Better Angels of
Our Nature (Pinker comes off the better):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fooledbyrandomness.com/longpeace.pdf&quot;&gt;The “Long Peace” is a Statistical Illusion&lt;/a&gt; - Taleb’s attack on the book and Pinker.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stevenpinker.com/files/pinker/files/comments_on_taleb_by_s_pinker.pdf&quot;&gt;Fooled by Belligerence&lt;/a&gt; - Pinker responds to Taleb broadside.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://code.facebook.com/posts/321111638043166/hydrabase-the-evolution-of-hbase-facebook/&quot;&gt;HydraBase&amp;amp;emdash;The evolution of HBase@Facebook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://devo.ps/blog/zookeeper-vs-doozer-vs-etcd/&quot;&gt;ZooKeeper vs. Doozer vs. Etcd&lt;/a&gt; - evaluating systems used to share configurtion across a cluster of servers. With &lt;a href=&quot;https://news.ycombinator.com/item?id=6366665&quot;&gt;commentary on Hacker News&lt;/a&gt;. TLDR: ZooKeeper complex and written in Java implementing Paxos, Doozer is dead, etcd is a very young project written in Go and implementing Raft.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.yahoo.com/blogs/hadoop/apache-zookeeper-making-417.html&quot;&gt;Apache ZooKeeper: the making of&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Youtube uses Zookeeper: see &lt;a href=&quot;http://godoc.org/code.google.com/p/vitess/go/zk/zkocc&quot;&gt;package zkocc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=YbZ3zDzDnrw#t=1481&quot;&gt;Raft lecture&lt;/a&gt; on Youtube from John Osterhout. Probably more videos, look for them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arakoon.org/&quot;&gt;Arakoon&lt;/a&gt; is another distributed key-value store.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jasonwilder.com/blog/2014/02/04/service-discovery-in-the-cloud/&quot;&gt;Open-Source Service Discovery&lt;/a&gt;. Covers Zookeeper, Doozer and Etcd, but also looks at other solutions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=9791739&quot;&gt;Good tech talks on Youtube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://media.defcon.org/DEF%20CON%2023/DEF%20CON%2023%20presentations/Speaker%20&amp;amp;%20Workshop%20Materials/Bruce%20Potter/DEFCON-23-Bruce-Potter-Hackers-Guide-to-Risk.pdf&quot;&gt;A Hacker’s Guide to Risk&lt;/a&gt; Talk at DefCon.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chrislusf/seaweedfs&quot;&gt;Seaweed-FS&lt;/a&gt;. Simple and highly scalable distributed file system. Based off of Haystack.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf&quot;&gt;Finding a needle in a Haystack: Facebook’s photo storage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.gahcep.com/cpp-internals-stl-vector-part-3/&quot;&gt;C++ Internals :: STL vector, Part III&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mqtt.org/&quot;&gt;MQTT&lt;/a&gt; is a machine-to machine connectivity protocol, intended to be very lightweight.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/knight666/utf8rewind/&quot;&gt;utf8rewind&lt;/a&gt; - the size of it seems insane.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=3jg1AheF4n0&quot;&gt;Working Hard to Keep It Simple&lt;/a&gt; 2011 talk by Martin Odersky.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbu/userland-slab-allocator&quot;&gt;Userland Slab Allocator&lt;/a&gt;. Uses bitvectors, looks interesting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/uwplse/verdi/pull/16&quot;&gt;Verdi proves Raft correct&lt;/a&gt;. Verdi is a framework for formally verifying distributed systems using Coq. This is the pull request that contains the Raft verification.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aphyr.com/posts/291-call-me-maybe-zookeeper&quot;&gt;Call me maybe: Zookeeper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&quot;&gt;The Log: What every software engineer should know about real-time data’s unifying abstraction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://book.mixu.net/distsys/single-page.html&quot;&gt;Distributed systems for fun and profit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BKqgGpAOv1w&quot;&gt;Practicalities of Productionizing Distributed Systems&lt;/a&gt; Talk by Jeff Hodges at RICON West 2013.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://swtch.com/semaphore.pdf&quot;&gt;Semaphores in Plan 9&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pollenpub.com/&quot;&gt;How to make a book with Pollen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ruslanspivak.com/lsbasi-part2/&quot;&gt;Let’s Build a Simple Interpreter. Part 2.&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 11:49:00 -0700</pubDate>
        <link>http://neurocline.github.io/programming/2015/08/09/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/programming/2015/08/09/recent-links.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Consensus algorithms</title>
        <description>&lt;p&gt;I’m going to start talking about data replication, and the first and probably most
important topic is that of consensus algorithms. I don’t want to regurgitate what
others have written, so at first this is going to be a reading list. But, at some
point, it will contain original bits, and then all of this will turn into a bibliography.&lt;/p&gt;

&lt;h2 id=&quot;what-went-before&quot;&gt;What went before&lt;/h2&gt;

&lt;p&gt;Here are a handful of the papers I think are important.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/lamport/pubs/time-clocks.pdf&quot;&gt;Time, Clocks and the Ordering of Events in a Distributed System&lt;/a&gt;. 1978 - brilliant or obvious, or both, this provided a more formal description of partial orders (which is all we get in our universe where relativity applies).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;consensus-algorithms&quot;&gt;Consensus algorithms&lt;/h2&gt;

&lt;p&gt;This sub-field was launched with a paper from Lamport titled The Byzantine Generals Problem.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/lamport/pubs/byz.pdf&quot;&gt;The Byzantine Generals Problem&lt;/a&gt;. 1982 - making progress in the presence of conflicting information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wikipedia has a decent article&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Consensus_(computer_science)&quot;&gt;Consensus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that state machine replication and consensus algorithms go together, and we’ll be diving
into that as well, since that’s the actual fun/hard work.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/State_machine_replication&quot;&gt;State machine replication&lt;/a&gt; on Wikipedia.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More reading on consensus:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.uic.edu/~ajayk/Chapter14.pdf&quot;&gt;Chapter 14: Consensus and Agreement&lt;/a&gt;, from the book Distributed Computing: Principles, Algorithms and Systems.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.duke.edu/courses/fall07/cps212/consensus.pdf&quot;&gt;Distributed Systems, Failures, and Consensus&lt;/a&gt;, from a class by Jeff Chase at Duke University on distributed systems.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.cornell.edu/home/rvr/papers/icdcn08.pdf&quot;&gt;The Building Blocks of Consensus&lt;/a&gt;. 2008.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/people/weic/ipl_bincons.pdf&quot;&gt;Bounded Cost Algorithms for Multivalued Consensus Using Binary Consensus Instances&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.utexas.edu/users/psp/consensus.pdf&quot;&gt;A Simple Proof of a Simple Consensus Algorithm&lt;/a&gt;. 1990?&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.yale.edu/homes/aspnes/papers/randomized-consensus-survey.pdf&quot;&gt;Randomized Protocols for Asynchronous Consensus&lt;/a&gt;. 2002.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.toronto.edu/~samvas/teaching/2221/handouts/benor-paper.pdf&quot;&gt;The correctness proof of Ben-Or’s randomized consensus algorithm&lt;/a&gt;. 2011.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And Papers We Love has a whole section on distributed systems&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/papers-we-love/papers-we-love/tree/master/distributed_systems&quot;&gt;papers-we-love/distributed_systems&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pc---two-phase-commit&quot;&gt;2PC - two-phase commit&lt;/h2&gt;

&lt;p&gt;Conceptually, two-phase commit is straightforward; the commit-request phase (or call it the voting
phase), and the commit phase, where the coordinator decides whether to commit or not, based on the
information gathered in the voting phase.&lt;/p&gt;

&lt;p&gt;This is a widely-used technique, although it has problems in the presence of failures. E.g. it assumes
there is storage that can be trusted at each node, that no node crashes, and that nodes can communicate
with each other. And it’s a blocking protocol. Other than that, it’s great :)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Two-phase_commit_protocol&quot;&gt;Two-phase commit protocol&lt;/a&gt; from Wikipedia.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://the-paper-trail.org/blog/consensus-protocols-two-phase-commit/&quot;&gt;Consensus Protocols: Two-Phase Commit&lt;/a&gt;. 2008.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pc---three-phase-commit&quot;&gt;3PC - three-phase commit&lt;/h2&gt;

&lt;p&gt;Fixes much of fragility of 2PC, although it’s still vulnerable to partitions. E3PC tries to address
the problem of partitions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Three-phase_commit_protocol&quot;&gt;Three-phase commit protocol&lt;/a&gt; from Wikipedia.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.purdue.edu/homes/bb/cs542-11Spr/TSE83_SS.pdf&quot;&gt;A Formal Model of Crash Recovery in a Distributed System&lt;/a&gt;. 1983, Skeen and Stonebraker, introduced the three-phase commit protocol.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://the-paper-trail.org/blog/consensus-protocols-three-phase-commit/&quot;&gt;Consensus Protocols: Three-phase Commit&lt;/a&gt;. 2008.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/blampson/21-crashrecovery/acrobat.pdf&quot;&gt;Crash Recovery in a Distributed Data Storage System&lt;/a&gt;. 1979, Butler Lampson and Howard Sturgis.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://webee.technion.ac.il/~idish/Abstracts/jcss.html&quot;&gt;Increasing the Resilience of Distributed and Replicated Data Systems&lt;/a&gt;. 1998, Idit Keidar and Danny Dolev, enhanced three-phase commit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;paxos&quot;&gt;Paxos&lt;/h2&gt;

&lt;p&gt;This was developed by Leslie Lamport in the late 1980s, circulated informally in the
community in the early 1990s, and finally formally published in Transactions on
Computer Systems in 1998. It is an improvement over 2PC and 3PC (two-phase commit and
three-phase commit).&lt;/p&gt;

&lt;p&gt;Paxos has the reputation of being complex, and developers are often warned against
implementing it themselves. This seems a little draconian or elitist to me.&lt;/p&gt;

&lt;p&gt;These are in publication order, but are starred with a reading order for those wanting
to understand Paxos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Paxos_(computer_science)&quot;&gt;Paxos - Wikipedia&lt;/a&gt;. 2015 - recent version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Papers&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/lamport/pubs/lamport-paxos.pdf&quot;&gt;The Part-Time Parliament&lt;/a&gt;. 1998 - the first Leslie Lamport paper on the Paxos algorithm.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-Simple.PDF&quot;&gt;Paxos Made Simple&lt;/a&gt;. 2001 - another paper from Lamport explaining Paxos, presumably in a fashion easier for some people to understand.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/pubs/64634/web-dsn-submission.pdf&quot;&gt;Cheap Paxos&lt;/a&gt;. 2004 - a version of Paxos that is cheaper (less work) when processors aren’t constantly failing.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://msr-waypoint.com/pubs/64624/tr-2005-112.pdf&quot;&gt;Fast Paxos&lt;/a&gt;. 2005 - paper by Lamport proposing a faster version of Paxos that learns in two message delays instead of three (but error-intolerant).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/pubs/64631/tr-2005-33.pdf&quot;&gt;Generalized Consensus and Paxos&lt;/a&gt;. 2005 - allow parallel execution of non-interfering commands.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/lamport/pubs/stoppable.pdf&quot;&gt;Stoppable Paxos&lt;/a&gt;. 2008.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/lamport/pubs/vertical-paxos.pdf&quot;&gt;Vertical Paxos and Primary-Backup Replication&lt;/a&gt;. 2009 - an exploration of the idea that valid master/slave replica systems are a variant of Paxos.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/lamport/pubs/disc-leaderless-web.pdf&quot;&gt;Leaderless Byzantine Paxos&lt;/a&gt;. 2011.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blog articles&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://the-paper-trail.org/blog/consensus-protocols-paxos/&quot;&gt;Consensus Protocols: Paxos&lt;/a&gt;. 2009 - A fairly clear article from the Paper Trail blog on Paxos.&lt;/li&gt;
  &lt;li&gt;Understanding Paxos &lt;a href=&quot;https://distributedthoughts.wordpress.com/2013/09/22/understanding-paxos-part-1/&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;https://distributedthoughts.wordpress.com/2013/09/30/understanding-paxos-part-2/&quot;&gt;Part 2&lt;/a&gt;. 2013 - pair of articles on Paxos.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://harry.me/blog/2014/12/27/neat-algorithms-paxos/&quot;&gt;Neat Algorithms - Paxos&lt;/a&gt;. 2014 - Javascript implementation from Harry Brundage.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.cornell.edu/courses/cs7412/2011sp/paxos.pdf&quot;&gt;Paxos Made Moderately Complex&lt;/a&gt;. 2015 - paper from Robbert van Renesse and Deniz Altinbuken talking about full reconfiguratble multidecree Paxos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Uses of Paxos&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google: the &lt;a href=&quot;http://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf&quot;&gt;Chubby&lt;/a&gt; distributed lock service (&lt;a href=&quot;http://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf&quot;&gt;BigTable&lt;/a&gt; uses Chubby).&lt;/li&gt;
  &lt;li&gt;Yahoo and ZooKeeper.&lt;/li&gt;
  &lt;li&gt;Heroku and Doozerd.&lt;/li&gt;
  &lt;li&gt;Amazon Web Services.&lt;/li&gt;
  &lt;li&gt;Cassandra and Nutanix.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.leonmergen.com/libpaxos-cpp/&quot;&gt;libpaxos-cpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;raft&quot;&gt;Raft&lt;/h2&gt;

&lt;p&gt;Raft was developed as an easier-to-understand consensus algorithm, easier that Paxos, that is.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://raftconsensus.github.io/&quot;&gt;The Raft Consensus Algorithm&lt;/a&gt;. Home page on Github.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Raft_(computer_science)&quot;&gt;Raft&lt;/a&gt; on Wikipedia.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/raft.pdf&quot;&gt;In Search of an Understandable Consensus Algorithm&lt;/a&gt;. 2014, Osterhout paper introducing Raft.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thesecretlivesofdata.com/raft/&quot;&gt;The Secret Lives of Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/~ms705/pub/papers/2015-osr-raft.pdf&quot;&gt;Raft refloated - do we have consensus&lt;/a&gt;. 2015.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.consul.io/docs/internals/consensus.html&quot;&gt;Consensus Protocol&lt;/a&gt;. Consul uses Raft for
its consensus protocol.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/atc14/technical-sessions/presentation/ongaro&quot;&gt;In Search of an Understandable Consensus Algorithm&lt;/a&gt; video of presentation at Usenix 2014.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-857.pdf&quot;&gt;ARC: Analysis of Raft Consensus&lt;/a&gt;. 2014, Heidi Howard.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/logcabin/logcabin/&quot;&gt;logcabin&lt;/a&gt;. LogCabin is a distributed storage system built on Raft; written in C++.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Facebook is using Raft in HydraBase, to replace HBase. CoreOS is using Raft in etcd.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/coreos/etcd&quot;&gt;https://github.com/coreos/etcd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ark&quot;&gt;Ark&lt;/h2&gt;

&lt;p&gt;Introduced for TokuMX and MongoDB.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://arxiv.org/pdf/1407.4765v1.pdf&quot;&gt;Ark: A Real-World Consensus Implementation&lt;/a&gt;. 2014.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.percona.com/blog/2014/07/18/introducing-ark-a-consensus-algorithm-for-tokumx-and-mongodb/&quot;&gt;Introducing Ark: A Consensus Algorithm for TokuMX and MongoDB&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.percona.com/blog/2014/07/25/explaining-ark-part-2-how-elections-and-failover-currently-work/&quot;&gt;Explaining Ark Part 2: How Elections and Failover Currently Work&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.percona.com/blog/2014/07/30/explaining-ark-part-3-why-data-may-be-lost-on-a-failover/&quot;&gt;Explaining Ark Part 3: Why Data May Be Lost on a Failover&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.percona.com/blog/2014/08/07/explaining-ark-part-4-fixing-majority-write-concern/&quot;&gt;Explaining Ark Part 4: Fixing Majority Write Concern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;names-in-consensus-algorithms&quot;&gt;Names in consensus algorithms&lt;/h2&gt;

&lt;p&gt;Major names&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lamport.org/&quot;&gt;Leslie Lamport&lt;/a&gt;. Also wrote TLA+, and LaTeX.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/gray/&quot;&gt;Jim Gray&lt;/a&gt;. Two-tier transaction commit semantics, described ACID semantics.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/blampson/&quot;&gt;Butler Lampson&lt;/a&gt;. One of the key names for Xerox PARC and the Alto.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pmg.csail.mit.edu/~liskov/&quot;&gt;Barbara Liskov&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Implementors&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://harry.me/&quot;&gt;Harry Brundage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Henry Robinson &lt;a href=&quot;https://www.linkedin.com/in/henrynrobinson&quot;&gt;LinkedIn&lt;/a&gt;, &lt;a href=&quot;http://the-paper-trail.org/&quot;&gt;Paper Trail&lt;/a&gt;, &lt;a href=&quot;https://github.com/henryr&quot;&gt;henryr on Github&lt;/a&gt; - Cloudera, ZooKeeper.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 03:18:00 -0700</pubDate>
        <link>http://neurocline.github.io/programming/2015/08/09/consensus-algorithms.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/programming/2015/08/09/consensus-algorithms.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 02 Nov 2015 10:15:43 -0800</pubDate>
    <lastBuildDate>Mon, 02 Nov 2015 10:15:43 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>A history of the Internet</title>
        <description>&lt;p&gt;Recently, an ill-worded phrase by a near-friend of mine (“TCP/IP, a poorly designed protocol”),
and his overlying thesis (“95% of the work in developing networking was done by commercial
companies, DARPA shouldn’t get credit for the Internet”), caused me to do a lot of reading. I
didn’t start hard-core software development myself until 1981, so while I knew a lot of this
anecdotally, I quickly realized that I didn’t know as much as I thought.&lt;/p&gt;

&lt;p&gt;I need to write all this up, but here’s a few nuggets.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The French nearly invented the Internet.&lt;/li&gt;
  &lt;li&gt;Virtually all of the work on networking was funded by governments.&lt;/li&gt;
  &lt;li&gt;The sole exception was Xerox PARC, but Xerox shot themselves in the foot.&lt;/li&gt;
  &lt;li&gt;Davies, a Brit, came up with packet switching in 1959 (although perhaps it was simulataneously conceived of by Paul Baran).&lt;/li&gt;
  &lt;li&gt;Cerf et al worked on creating ARPANET, a packet-switched network, but with a host-to-host, or connection-oriented, system called NCP, first public demonstration in 1972 (showing email, among other things).&lt;/li&gt;
  &lt;li&gt;The University of Hawaii launched ALOHANet, a radio network using random packet transmission, in 1970.&lt;/li&gt;
  &lt;li&gt;Then Louis Pouzin, French, came up with datagrams and smart edge/dumb router, the key innovations that turned ARPANET from unworkable to unbeatable.&lt;/li&gt;
  &lt;li&gt;Meanwhile, Metcalfe, having done his Ph.D. thesis on what became Ethernet, was offered a job and major support by Xerox PARC; Ethernet was born in 1973.&lt;/li&gt;
  &lt;li&gt;The French government and European industry said “nope, we like circuit switching just fine”, and even Pouzin himself became convinced, eventually abandoning his approach. But the ARPANET group saw it as a great advance.&lt;/li&gt;
  &lt;li&gt;Then ARPA funded the rest; TCP/IP was invented, coded up, and eventually ARPANET switched over to it.&lt;/li&gt;
  &lt;li&gt;BSD released a TCP/IP stack around 1983 that became the most influential networking stack in history.&lt;/li&gt;
  &lt;li&gt;The actual opening of ARPANET to become the Internet we know was directly due to a $600 million US funding effort willed into existence by Al Gore.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In particular, TCP/IP had about 5 years of careful thought and initial development put to it,
preceeded by 5 years of experimentation and trial, and then another 10 years to roll it out.
Like many innovations that sprang out of nowhere, it did nothing of the same. From original
idea to world-beating dominance was a 20-year timespan of thinking and implementing.&lt;/p&gt;

&lt;p&gt;Note that TCP won because government funding shielded its development from the inter-company
and inter-country politics that caused OSI to eventually become completely irrelevant. And
the government subsidies meant that Interent protocols could be implemented for free, versus
having to buy very expensive ISO docs for OSI. I doubt many of you have purchased ISO docs.&lt;/p&gt;

&lt;p&gt;I like many of the write-ups I’ve read, and the few books on this, but I think there’s a good
business thesis here that goes against the modern interpretation of the startup or corporation
doing all of the work. Certainly, government funding is pitiful compared to what it was in
the 20th century, and definitely in the period from 1950-1990. But what I see in real companies
is that “works in practice” is not just important but “works in theory” is denigrated, and
companies quickly reach local maxima and get stuck in a web of their own making, and stop
advancing. As I re-read the history of efforts by IBM, DEC, ITTU and others, I see that
clearly had happened, and I see it happening today, just less clearly.&lt;/p&gt;

&lt;p&gt;In the past, people published early results, freely talked to each other, and as a result
progress was rapid. Of course, people built on your results, and if you weren’t fast, your
work benefitted others far more than yourself. In the modern era, there is relatively little
sharing, and while progress is still happening, it’s starting to slow down. There are a host
of factors, but large among them is that companies like Apple are very secretive about what
they do, and allow no one to publish anything. Combine that with the relative lack of
government funding, and it’s sad.&lt;/p&gt;

&lt;p&gt;In particular, we should take the lessons of OSI versus TPC to heart. OSI was, in the end,
an attempt by dominant vendors to hold onto their profits. Since telecommunications companies
had circuits, naturally virtual circuits were the right answer, because they could still own
connections. If they had won, we would have a fraction of the world we have today. Vested
interests will rarely make good decisions. Just like the movie industry saw the VHS tape
as a disaster, failing to see that it would cause their revenues and profits to skyrocket, the
telecommunications vendors saw packet-switched networks as threatening their very existence.
This is true for all the vendor-developed network systems; all were invented to prop up
current modes of hardware production, or to allow them to muscle into the market as a new
competitor.&lt;/p&gt;

&lt;p&gt;Things will change. Telecommunications went from fairly open to very regulated and closed off,
and it took a separate challenger (computing) to change that. Now computing is moving towards
being closed off, but eventually we’ll see some other newcomer blossom and hijack attention
and create progress. Maybe the Maker movement, or home bioengineering, will be that vector.&lt;/p&gt;

&lt;h2 id=&quot;reading-list&quot;&gt;Reading list&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Donald_Davies&quot;&gt;Donald Davies&lt;/a&gt; developed the initial idea of packet-switched networks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/CYCLADES&quot;&gt;CYCLADES&lt;/a&gt; project that created datagrams and moved thinking to the edges.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.historyofcomputercommunications.info/index.html&quot;&gt;A HISTORY OF COMPUTER COMMUNICATIONS: 1968 -1988&lt;/a&gt;, book by Jim Pelkey, well worth reading.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://xbbn.weebly.com/bbn-internet-engineering-timeline.html&quot;&gt;BBN Internet Engineering Timeline&lt;/a&gt;. BBN was one of the government-funded companies at the heart of early network development.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/rfc/rfc801.txt&quot;&gt;RFC 801&lt;/a&gt;. Transitioning ARPANET from NCP to TCP.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rina.tssg.org/docs/PSOC-MovingBeyondTCP.pdf&quot;&gt;Moving beyond TCP&lt;/a&gt;, 2010, with some details on Pouzin’s contribution to networking, but largely as a modern “TCP/IP is not good enough, let’s replace it” proposal. Since one of the authors of this paper is John Day, the second half of the paper is a summary of his 2007 book.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Patterns-Network-Architecture-Fundamentals-paperback/dp/0137063385&quot;&gt;Patterns in Network Architecture&lt;/a&gt;, 2007, John Day, is a book both on reimagining networking, but also a good history of the development of TCP/IP and the Internet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.techrepublic.com/blog/classics-rock/does-anyone-actually-still-use-token-ring/&quot;&gt;Does anyone still use TokenRing?&lt;/a&gt;. TokenRing was IBM’s attempt to compete with Ethernet, developed in the early 1980s as a superior approach, but a combination of royalty pricing and Ethernet advancing far past TokenRing speeds killed it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://spectrum.ieee.org/computing/networks/osi-the-internet-that-wasnt&quot;&gt;OSI: The Internet that wasn’t&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Inventing-Internet-Inside-Technology-Abbate/dp/0262511150&quot;&gt;Inventing the Internet&lt;/a&gt;, 1999, Jane Abbate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cambridge.org/us/academic/subjects/history/twentieth-century-american-history/open-standards-and-digital-age-history-ideology-and-networks&quot;&gt;Open Standards and the Digital Age History, Ideology, and Networks&lt;/a&gt;, 2014, Andrew L. Russell.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.circleid.com/posts/84259_microsofts_contribution_tcp_ip/&quot;&gt;Microsoft’s Contribution Was TCP/IP&lt;/a&gt;, 2008, positing Microsoft helped put TCP/IP on the map.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.newmedia.org/history-of-the-internet.html&quot;&gt;History of the Internet&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Nov 2015 08:36:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/11/02/A-history-of-the-internet.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/11/02/A-history-of-the-internet.html</guid>
        
        <category>internet</category>
        
        <category>network</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Generalized Deterministic Parsers (GLR, GLL and more)</title>
        <description>&lt;p&gt;Generalized deterministic parsing is an extension to deterministic parsing that
temporarily handles ambiguous grammars under the idea that further input will resolve
apparent conflicts.
The first such one was called Generalized LR or GLR, under the idea that this technique
(forking and parsing parallel parse trees each time an ambiguity was found) would only
work with LR. Then, once a GLL parser was demonstrated, it was hard to call the
method GLR. I’m going by the naming that Grune and Jacobs gave it in their 2007
masterpiece Parsing techniques.&lt;/p&gt;

&lt;p&gt;Bison supports GLR, and I don’t know why it’s not the default. GLR only costs more than
LR when you have ambiguities in the grammar, and even C++ has only temporary ambiguities
that resolve quickly. Also, you don’t need to try to rewrite the grammar to create a
LALR parser.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.researchgate.net/publication/269645727_A_Practical_GLR_Parser_Generator_for_Software_Reverse_Engineering&quot;&gt;A Practical GLR Parser Generator for Software Reverse Engineering&lt;/a&gt; is a paper behind a gate in ResearchGate, e.g. &lt;a href=&quot;http://ojs.academypublisher.com/index.php/jnw/article/download/jnw0903769776/8857&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dparser.sourceforge.net/&quot;&gt;DParser&lt;/a&gt;, although doesn’t seem to have had much activity since initial creation in 2006.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.researchgate.net/publication/241755950_Integrating_a_GLR_Parser_Generator_in_Eli&quot;&gt;Integrating a GLR Parser Generator in Eli&lt;/a&gt; 2007 thesis. Direct PDF link &lt;a href=&quot;http://ag-kastens.uni-paderborn.de/paper/Bachelor_Schwekendiek.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pure.royalholloway.ac.uk/portal/en/publications/island-grammarbased-parsing-using-gll-and-tom(1bccc756-7ebc-4b14-abd2-8910ef5dcbeb).html&quot;&gt;Island Grammar-Based Parsing Using GLL and Tom&lt;/a&gt;. I think Adrian Johnstone is the one who demonstrated the possibility of GLL parsers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pure.royalholloway.ac.uk/portal/en/publications/gll-parsetree-generation(bdbcf5af-d176-4389-bfcc-ecc86a5a5f77).html&quot;&gt;GLL parse-tree generation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pure.royalholloway.ac.uk/portal/en/publications/modular-grammar-specification(f73cedc9-678f-4115-8802-2add7aa0763d).html&quot;&gt;Modular grammar specification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pure.royalholloway.ac.uk/portal/en/publications/modelling-gll-parser-implementations(2c1e93df-746c-4271-8de6-534141d0c9b5).html&quot;&gt;Modelling GLL parser implementations&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Nov 2015 23:05:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/11/01/generalized-deterministic-parsers.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/11/01/generalized-deterministic-parsers.html</guid>
        
        <category>compiler</category>
        
        <category>parser</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://radek.io/2015/10/20/httpie/&quot;&gt;httpie&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yahoohadoop.tumblr.com/post/129872361846/large-scale-distributed-deep-learning-on-hadoop&quot;&gt;Large Scale Distributed Deep Learning on Hadoop Clusters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/NicolasLM/nucleon&quot;&gt;nucleon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://01.org/hyperscan&quot;&gt;hyperscan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rinuboney.github.io/2015/10/18/theoretical-motivations-deep-learning.html&quot;&gt;Theoretical Motivations for Deep Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codewords.recurse.com/issues/four/the-language-of-choice&quot;&gt;The language of choice&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/MagicStack/MagicPython&quot;&gt;MagicPython&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.gopl.io/ch1.pdf&quot;&gt;The Go Programming Language&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gitpython.readthedocs.org/en/latest/index.html&quot;&gt;GitPython&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://git-for-windows.github.io/&quot;&gt;Git For Windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.utexas.edu/users/EWD/transcriptions/EWD10xx/EWD1036.html&quot;&gt;On the cruelty of really teaching computing science&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html&quot;&gt;Watch a Directory for Changes&lt;/a&gt;, and &lt;a href=&quot;http://brunorocha.org/python/watching-a-directory-for-file-changes-with-python.html&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;http://stackoverflow.com/questions/182197/how-do-i-watch-a-file-for-changes-using-python&quot;&gt;this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C++ Blogs&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/151974/c-blogs-that-you-regularly-follow&quot;&gt;C++ blogs that you regularly follow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://meetingcpp.com/index.php/blog.html&quot;&gt;Meeting C++&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cpptruths.blogspot.com/&quot;&gt;c++ truths&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://herbsutter.com/&quot;&gt;Sutter’s mill&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/vcblog/&quot;&gt;Visual C++ Team Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lonecpluspluscoder.com/&quot;&gt;The Lone C++ Coder’s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 20 Oct 2015 23:59:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/20/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/20/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Python doc links</title>
        <description>&lt;p&gt;Python 2&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/argparse.html&quot;&gt;15.4 - argparse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/logging.html&quot;&gt;15.7 - logging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/threading.html&quot;&gt;16.2 - threading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/multiprocessing.html&quot;&gt;16.6 - multiprocessing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/mmap.html&quot;&gt;16.7 - mmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python 3&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/library/argparse.html&quot;&gt;16.4 - argparse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/library/logging.html&quot;&gt;16.6 - logging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/library/threading.html&quot;&gt;17.1 - threading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/library/multiprocessing.html&quot;&gt;17.2 - multiprocessing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/library/asyncio.html&quot;&gt;18.5 - asyncio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/library/mmap.html&quot;&gt;18.9 - mmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 20 Oct 2015 23:33:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/20/python-docs.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/20/python-docs.html</guid>
        
        <category>python</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>SIGINT clean handling in Python</title>
        <description>&lt;p&gt;This is #1 in the series “It seems to be hard to make Python robust”. A robust program
won’t crash malfunction when ctrl-c is pressed, it will abort down clealy if possible.
This is important with multiprocessing programs, because naive code will actually hang
when you try to interrupt it with ctrl-c.&lt;/p&gt;

&lt;p&gt;SIGINT (the exception raised when you press ctrl-c) will raise an exception when
I/O operations return. This is pretty annoying. This happens even on time.sleep().&lt;/p&gt;

&lt;p&gt;The way around this to catch ctrl-c is to install a handler, and put try blocks around
IO operations. Real code won’t ignore IOError like this, this is just a sample.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# sigint-clean.py&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# A SIGINT will cause an I/O operation to raise exceptions on return. This happens&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# even on Windows. This means even with a ctrl-c handler, you must wrap I/O calls&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# in a try/catch IOError block and check for interrupted. Annoying&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;signal&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;catch_sigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caught_sigint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;note_sigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caught_sigint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__enter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldsigint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note_sigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__exit__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldsigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caught_sigint&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catch_sigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;got_sigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;got_sigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Caught SIGINT!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# without this try/except, you&amp;#39;ll get an IOError when ctrl-c pressed&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;IOError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the other other answer is to write your serious programs in C++ (or maybe Go)? I still
like Python, but the effort to get to silky smooth reliability is erasing all the gains from
using Python in the first place. The answer of course is to make C++ as easy to use as Python.
That’s not a language issue, it’s an environment/packages issue.&lt;/p&gt;

&lt;p&gt;Perl, Python and R should give incredible credit to CTAN (Comprehensive Tex Archive Network) for
blazing the trail. That’s the real reason Perl became successful. Python lives more on its own
merits but would still be somewhat neutered without PyPI.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Oct 2015 13:00:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/17/sigint-clean-handling-python.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/17/sigint-clean-handling-python.html</guid>
        
        <category>python</category>
        
        <category>exception</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://rystsov.info/2015/09/16/how-paxos-works.html&quot;&gt;A memo on how Paxos works&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://darksi.de/d.sea-of-nodes/&quot;&gt;Sea of nodes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/warriorguo/zertcore5&quot;&gt;zertcore5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://casual-effects.com/markdeep/&quot;&gt;Markdeep&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/showcases/package-managers&quot;&gt;Package Managers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.elbeno.com/blog/?p=1254&quot;&gt;C++11 compile-time string hashing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://readthedocs.org/&quot;&gt;Read The Docs&lt;/a&gt; and repo &lt;a href=&quot;https://github.com/rtfd/readthedocs.org&quot;&gt;rtfd/readthedocs.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sphinx-doc.org/&quot;&gt;Sphinx&lt;/a&gt; Python Documentation Generator.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docutils.sourceforge.net/rst.html&quot;&gt;reStructuredText&lt;/a&gt; and &lt;a href=&quot;http://sphinx-doc.org/rest.html&quot;&gt;reStructuredText Primer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PyPI&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pip.readthedocs.org/en/stable/reference/pip_install/&quot;&gt;pip install&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jfrog.com/confluence/display/RTF/PyPI+Repositories&quot;&gt;PyPI Repositories&lt;/a&gt;. Artifactory can be a PyPI repository&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/18052217/how-to-create-local-own-pypi-repository-index-without-mirror&quot;&gt;how to create local own pypi repository index without mirror?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/pypiserver&quot;&gt;pypiserver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pythonhosted.org/Basket/&quot;&gt;Basket - a local static PyPI repository builder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bitofcheese.blogspot.com/2013/05/local-pypi-options.html&quot;&gt;Local PyPI Options&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/devpi&quot;&gt;devpi 2.1.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 16 Oct 2015 23:55:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/16/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/16/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>More quorums</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/otoolep/hraftd&quot;&gt;hraftd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/goraft/raftd&quot;&gt;raftd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hashicorp/raft&quot;&gt;Hashicorp Raft&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rystsov.info/2015/09/16/how-paxos-works.html&quot;&gt;A memo on how Paxos works&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rystsov.info/2015/10/09/epaxos700.html&quot;&gt;EPaxos, transactions and the next 700 Paxos systems&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 23:50:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/13/more-quorums.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/13/more-quorums.html</guid>
        
        <category>consensus</category>
        
        <category>quorum</category>
        
        <category>go</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Blogs to look at</title>
        <description>&lt;p&gt;These are interesting blogs to study.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bitquabit.com/page/projects/&quot;&gt;bitquabit&lt;/a&gt; and &lt;a href=&quot;https://bitbucket.org/bpollack/blag&quot;&gt;source code&lt;/a&gt;. Look at revision history to make sense of it.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 23:46:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/13/blogs-to-look-at.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/13/blogs-to-look-at.html</guid>
        
        <category>python</category>
        
        <category>blog</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Current work links</title>
        <description>&lt;p&gt;Python docs&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/functions.html&quot;&gt;2. Built-in functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/exceptions.html#exceptions.Exception&quot;&gt;6. Built-in exceptions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/signal.html&quot;&gt;17.4. signal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python snippets&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ianlewis.org/en/dynamically-adding-method-classes-or-class-instanc&quot;&gt;Dynamically Adding a Method to Classes or Class Instances in Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://igorsobreira.com/2011/02/06/adding-methods-dynamically-in-python.html&quot;&gt;Adding methods dynamically in Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/972/adding-a-method-to-an-existing-object&quot;&gt;Adding a Method to an Existing Object&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3232613/how-to-stop-sigint-being-passed-to-subprocess-in-python&quot;&gt;How to stop SIGINT being passed to subprocess in python?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://andrewbrookins.com/tech/how-to-get-the-name-of-the-class-of-a-decorated-method-in-python/&quot;&gt;Python: How to tell what class a decorated method is in at runtime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/8804830/python-multiprocessing-pickling-error&quot;&gt;Python multiprocessing pickling error&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/842557/how-to-prevent-a-block-of-code-from-being-interrupted-by-keyboardinterrupt-in-py&quot;&gt;How to prevent a block of code from being interrupted by KeyboardInterrupt in Python?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://noswap.com/blog/python-multiprocessing-keyboardinterrupt&quot;&gt;Python: Using KeyboardInterrupt with a Multiprocessing Pool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1408356/keyboard-interrupts-with-pythons-multiprocessing-pool&quot;&gt;Keyboard Interrupts with python’s multiprocessing Pool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python articles&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sebastianraschka.com/Articles/2014_multiprocessing_intro.html&quot;&gt;An introduction to parallel programming:using Python’s multiprocessing module&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rafekettler.com/magicmethods.html&quot;&gt;A Guide to Python’s Magic Methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimmaniac.com/blog/codejunkie/safe-use-of-unix-signals-with-multiprocessing-module-in-python/&quot;&gt;Safe use of unix signals with multiprocessing module in python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jtushman.github.io/blog/2014/01/14/python-%7C-multiprocessing-and-interrupts/&quot;&gt;Python Multiprocessing and Interrupts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://migrateup.com/python-concurrency-story-pt1/#&quot;&gt;The Python Concurrency Story, Part 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://migrateup.com/python-concurrency-story-pt2/#&quot;&gt;The Python Concurrency Story, Part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.python.org/moin/Concurrency/&quot;&gt;Concurrency (Python Wiki)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python&quot;&gt;Python Multithreading Tutorial: Concurrency and Parallelism&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bogotobogo.com/python/Multithread/python_multithreading_Event_Objects_between_Threads.php&quot;&gt;Multithreading - Event Objects between Threads&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://m7i.org/tutorials/python-event-queue-concurrency-modeling/&quot;&gt;Making an event queue in python: a concurrency and modeling tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://effbot.org/zone/thread-synchronization.htm&quot;&gt;Thread Synchronization Mechanisms in Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://glyph.twistedmatrix.com/2014/02/unyielding.html&quot;&gt;Unyielding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python Videos&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HTLu2DFOdTg&quot;&gt;Python’s Class Development Toolkit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=MCs5OvhV9S4&quot;&gt;David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Distributed systems&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stevenpoitras.com/the-nutanix-bible/&quot;&gt;The Nutanix Bible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ec2/instance-types/&quot;&gt;Amazon EC2 Instances&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://progrium.com/blog/&quot;&gt;Progrium (Jeff Lindsay)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://book.mixu.net/distsys/single-page.html&quot;&gt;Distributed systems for fun and profit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.empathybox.com/post/19574936361/getting-real-about-distributed-system-reliability&quot;&gt;Getting Real About Distributed System Reliability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://static.usenix.org/publications/login/2012-02/pdfs/Chansler.pdf&quot;&gt;Data Availability and Durability with the Hadoop Distributed File System&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pbs.cs.berkeley.edu/#demo&quot;&gt;PBS: Probabilistically Bounded Staleness&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn589797.aspx&quot;&gt;Sharding Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://thrift.apache.org/&quot;&gt;Apache Thrift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://avro.apache.org/&quot;&gt;Apache Avro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tagide.com/blog/academia/research-in-programming-languages/&quot;&gt;Research in Programming Languages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.dreamsongs.com/RiseOfWorseIsBetter.html&quot;&gt;The Rise of Worse is Better&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nichol.as/zeromq-an-introduction&quot;&gt;ZeroMQ an introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://queues.io/&quot;&gt;Queues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 09 Oct 2015 07:26:00 -0700</pubDate>
        <link>http://neurocline.github.io/programming/2015/10/09/work-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/programming/2015/10/09/work-links.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Python: threading and multiprocessing</title>
        <description>&lt;p&gt;The basic threading model in Python is extremely simple.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# simmple thread example&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I am thread %d&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I am not a thread&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Python threads have some advantages and disadvantages, and they spring from the same source;
you can do threads, but only one thread can execute Python code at a time. There are still
big advantages to using threads, but you can’t take advantage of multiple processors/cores.&lt;/p&gt;

&lt;p&gt;Why use threads? Threads are still useful for simplifying complex flows. Events are better,
but event processing has a higher minimum of complexity.&lt;/p&gt;

&lt;p&gt;Threads are also very useful for I/O; the I/O is not done in Python code, and I/O calls often
are waiting on hardware. This means that you can have multiple threads doing I/O and all of them
can make parallel progress.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Sep 2015 15:12:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/27/python-threading-and-multiprocessing.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/27/python-threading-and-multiprocessing.html</guid>
        
        <category>python</category>
        
        <category>threads</category>
        
        <category>multiprocessing</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

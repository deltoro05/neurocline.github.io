<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 23 Nov 2015 01:04:36 -0800</pubDate>
    <lastBuildDate>Mon, 23 Nov 2015 01:04:36 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://libmill.org/index.html&quot;&gt;libmill&lt;/a&gt;: Go-style concurrency in C. &lt;a href=&quot;https://github.com/sustrik/libmill&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nanomsg.org/&quot;&gt;nanomsg&lt;/a&gt; and &lt;a href=&quot;https://github.com/nanomsg/nanomsg&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mistune.readthedocs.org/en/latest/&quot;&gt;mistune&lt;/a&gt; is a markdown parser in Python, &lt;a href=&quot;https://github.com/lepture/mistune&quot;&gt;Github repo&lt;/a&gt; here.&lt;/p&gt;

&lt;p&gt;Oh yeah, and &lt;a href=&quot;https://readthedocs.org/&quot;&gt;ReadTheDocs&lt;/a&gt; itself is starting a small revolution.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Nov 2015 12:06:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/11/20/go-style-concurrency-in-c.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/11/20/go-style-concurrency-in-c.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>C++ functions</title>
        <description>&lt;p&gt;The subroutine is the original programming innovation, introduced in 1952
(see &lt;a href=&quot;http://www.laputan.org/pub/papers/wheeler&quot;&gt;The Use of Sub-routines in Programmes&lt;/a&gt;).
Before subroutines, we used to program by writing the whole
program in a single block of code. Libraries were just collections of snippets;
we copied lines of code from libraries and inserted them in place in program.&lt;/p&gt;

&lt;p&gt;In C++, we call these functions, and we have a variety of function types to
choose from.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;plain functions&lt;/li&gt;
  &lt;li&gt;pointer to function&lt;/li&gt;
  &lt;li&gt;class member functions&lt;/li&gt;
  &lt;li&gt;functors, operator()&lt;/li&gt;
  &lt;li&gt;pointer to member function&lt;/li&gt;
  &lt;li&gt;template functions&lt;/li&gt;
  &lt;li&gt;lambda expressions&lt;/li&gt;
  &lt;li&gt;inline functions&lt;/li&gt;
  &lt;li&gt;constexpr functions&lt;/li&gt;
  &lt;li&gt;bind expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all of these, a function has the same basic definition: a name, a list of zero or
more parameters, a return type, and a body. Functions are invoked through the call
operator, which is a pair of parentheses. The return type doesn’t get or need a name,
because it is only operated on anonymously, through a return statement.&lt;/p&gt;

&lt;h2 id=&quot;plain-old-function&quot;&gt;Plain old function&lt;/h2&gt;

&lt;p&gt;There is the original kind of function, inherited from C, and still relevant today.
It takes one or more parameters, and can return a value (which could be
a reference or an efficient move of a value, and not just a copy of a value).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;augend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;augend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In C++, functions can be overloaded on number and type of parameter, but not on
return type: originally, overloading worked because C++ did name mangling
to encode types into the function name, and the return type was not part
of the name-mangling.&lt;/p&gt;

&lt;p&gt;OK, yes, it still works that way today, but there’s no real need. We’re smart
people, and we could do overloading without needing name mangling.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;complex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can overload on integral types that have promotion rules, but this
can be tricky. You can declare the functions, and they’ll get called, but
unless you master the promotion rules, you can end up with situations
where the wrong overload is called.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; (int)&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; (short)&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// this prints &amp;quot;0 (short)&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this prints &amp;quot;1 (int)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;pointer-to-function&quot;&gt;Pointer to function&lt;/h2&gt;

&lt;p&gt;A function definition matches a function name to a function body. Further
use of that function name in a call operator results in calling the function
body in that definition.&lt;/p&gt;

&lt;p&gt;Just like we can have pointers to data types, we can have pointers to
function types, assign bodies to pointers, and then invoke bodies through
pointers.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;funcptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pfact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// a pointer to a function&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pfact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pfact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;amp; is allowed but not required&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pfact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pfact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// dereference is allowed but not required&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The C++11 &lt;code&gt;decltype&lt;/code&gt; keyword can come in handy when declaring function
pointers. Since &lt;code&gt;decltype&lt;/code&gt; returns the exact function type, we need to add a &lt;code&gt;*&lt;/code&gt;
to declare a pointer:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pfact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// copy function signature from factorial&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;class-member-function&quot;&gt;Class member function&lt;/h2&gt;

&lt;p&gt;Classes can have members that are functions. These behave almost exactly
like plain old functions, except that each function has an automatic
first parameter called “this” that is the pointer to the object. And
inside the body of class member functions, the this is implicit; if
name lookup finds a class member function or variable, the this pointer
is applied automatically.&lt;/p&gt;

&lt;p&gt;Here we have a memoizing factorial implemented as a class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Factorial&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printfact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Factorial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;factorial of %d is %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While the results are still out on object-oriented programming itself, the
idea of structured programming is still running strong, and classes without
inheritance are a form of structured programming.&lt;/p&gt;

&lt;h2 id=&quot;functors-with-operator&quot;&gt;Functors with operator()&lt;/h2&gt;

&lt;p&gt;The call operator can be overloaded. When it is overloaded, this creates
a functor, a function-like object. The main advantage of functors is
state, and we often use this pattern in callbacks.&lt;/p&gt;

&lt;p&gt;Consider the classic C style callback.&lt;/p&gt;

&lt;h2 id=&quot;template-function&quot;&gt;Template function&lt;/h2&gt;

&lt;p&gt;There is the C++ template function, which is still just a function
that can take parameterized types. It can return parameterized types as well,
although you can’t overload on just return type.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.llvm.org/2009/12/dreaded-two-phase-name-lookup.html&quot;&gt;The Dreaded Two-Phase Name Lookup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2012/02/06/dependent-name-lookup-for-c-templates&quot;&gt;Dependent name lookup for C++ templates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/356950/c-functors-and-their-uses&quot;&gt;C++ Functors - and their uses&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Nov 2015 10:48:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/11/17/c++-functions.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/11/17/c++-functions.html</guid>
        
        <category>c++</category>
        
        <category>programming</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>C++11, C++14, C++17</title>
        <description>&lt;p&gt;So, what exactly is here now and coming soon for C++?&lt;/p&gt;

&lt;p&gt;First off, compilers. Clang is the front-runner, GCC is close, and Visual Studio 2015 is catching up but still incomplete.&lt;/p&gt;

&lt;p&gt;Most annoyingly, VS 2015 doesn’t fully support C++11. It doesn’t have expression SFINAE, and its constexpr support is close but complete.&lt;/p&gt;

&lt;p&gt;Clang 3.4 and GCC 4.9 both fully support C++14. Visual Studio 2015 lacks variable templates, extended constexpr, and aggregate member initialization in its core langauge support. I think that library support for Visual Studio is complete except for the bits that can’t be done due to missing core language features.&lt;/p&gt;

&lt;h2 id=&quot;c11&quot;&gt;C++11&lt;/h2&gt;

&lt;p&gt;There are now a lot of books covering C++11 in depth. Some precis:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.stroustrup.com/C++11FAQ.html&quot;&gt;C++11 - the new ISO C++ standard&lt;/a&gt; - Stroustroup FAQ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c14&quot;&gt;C++14&lt;/h2&gt;

&lt;p&gt;Not much was added to the core language with C++14, true, but on the other hand, these changes made so-so features in C++11 into much better, more useful features. Some other write-ups on these features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://isocpp.org/wiki/faq/cpp14-language&quot;&gt;C++14 Language Extensions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B14&quot;&gt;C++14 Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.drdobbs.com/cpp/the-c14-standard-what-you-need-to-know/240169034&quot;&gt;The C++14 Standard: What You Need to Know&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/news/2014/08/cpp14-here-features&quot;&gt;C++14 Is Here: Summary of New Features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://clang.llvm.org/cxx_status.html&quot;&gt;C++ Support in Clang&lt;/a&gt; - Clang 3.4 and up&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gcc.gnu.org/projects/cxx1y.html&quot;&gt;C++1y/C++14 Support in GCC&lt;/a&gt; - GCC 4.9 and up&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/vcblog/archive/2015/06/19/c-11-14-17-features-in-vs-2015-rtm.aspx&quot;&gt;C++11/14/17 Features In VS 2015 RTM&lt;/a&gt; - VS2015 still missing Expression SFINAE from C++11, and Variable templates, extended constexpr, and aggregate member initialization (minor) in C++14.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;binary-literals-and-digits-separator&quot;&gt;Binary literals and digits separator.&lt;/h3&gt;

&lt;p&gt;I just wish that the digits separator wasn’t so unusual, but I’ll get used to it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b100&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ASCII &amp;#39;A&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3472.pdf&quot;&gt;Binary Literals in the C++ Core Language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3781.pdf&quot;&gt;Single-Quotation-Mark as a Digit Separator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;variable-templates&quot;&gt;Variable templates&lt;/h3&gt;

&lt;p&gt;Not to be confused with variadic templates - this allows you to have templates that wrap variables. Now you can have a template that is a templated variable, and really largely to write parameterized constants with constexpr in a more straightforward fashion.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// math constant with precision dictated by actual type&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14159265358979323846&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3651.pdf&quot;&gt;Variable Templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;extended-constexpr&quot;&gt;Extended constexpr&lt;/h3&gt;

&lt;p&gt;This is huge, because it extends what you can do with constexpr functions. You can write loops as opposed to resorting to recursion. Specifically, your constexpr functions can have local variables, and use if, switch, for, while, or do…while (just not goto).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html&quot;&gt;Relaxing constraints on constexpr functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c17&quot;&gt;C++17&lt;/h2&gt;

&lt;p&gt;Obviously, C++17 is still baking. What’s likely to be in it?&lt;/p&gt;

&lt;p&gt;First off, an internal position paper that Stroustroup wrote escaped to the wild, so he re-published it: &lt;a href=&quot;https://isocpp.org/files/papers/D4492.pdf&quot;&gt;Thoughts about C++17&lt;/a&gt;. His goals are roughly “better support for large-scale programs, better support for concurrency, simplify core language use”.&lt;/p&gt;

&lt;p&gt;The best thing to read at the moment is this: &lt;a href=&quot;https://botondballo.wordpress.com/2015/11/09/trip-report-c-standards-meeting-in-kona-october-2015/&quot;&gt;Trip Report: C++ Standards Meeting in Kona, October 2015&lt;/a&gt;). It’s long but well worth your time.&lt;/p&gt;

&lt;p&gt;My favorite small things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UTF-8 character literals: u8”string”&lt;/li&gt;
  &lt;li&gt;default message for static_assert&lt;/li&gt;
  &lt;li&gt;std::auto_ptr is gone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Something that’s baking but has hope&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;std::variant&lt;t&gt; (similar to [Variant v5](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0088r0.pdf) but it throws on invalid move).&lt;/t&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some medium things&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;operator dot (“operator.”) - fixing a hole in original C++ overloaded operators.&lt;/li&gt;
  &lt;li&gt;uniform call syntax&lt;/li&gt;
  &lt;li&gt;namespace and enumerator attributes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some big things&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;concepts light&lt;/li&gt;
  &lt;li&gt;coroutines&lt;/li&gt;
  &lt;li&gt;await (part of stackless coroutines, but might make it as a keyword on its own)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s a lot on the library front&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;asio likely to be the official C++ network library&lt;/li&gt;
  &lt;li&gt;stackful coroutines can be done at the library level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What’s almost certainly not going to make C++17?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;modules - I find both current proposals half-baked, so this is a relief.&lt;/li&gt;
  &lt;li&gt;contracts - similar, don’t think it’s thought through enough yet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s the list of C++17 candidate papers&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/&quot;&gt;JTC1/SC22/WG21 - Papers 2015 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 16 Nov 2015 19:00:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/11/16/cpp-11-14-17.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/11/16/cpp-11-14-17.html</guid>
        
        <category>C++</category>
        
        <category>programming</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Electronic Music Bands</title>
        <description>&lt;p&gt;layout: post
title:  “Electronic bands to listen to”
date:   2015-11-13 15:29:00 PM
categories: music
tags: electronic
—&lt;/p&gt;

&lt;p&gt;This is not an inclusive list by any means. I have favorites that I forget and then
rediscover (and wonder how I forgot them), and so I expect I’ll update this list over
time. It’s mostly for me to remember and to discover.&lt;/p&gt;

&lt;p&gt;Some of my all-time favorites&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stockhausen&lt;/li&gt;
  &lt;li&gt;Walter/Wendy Carlos&lt;/li&gt;
  &lt;li&gt;Synergy&lt;/li&gt;
  &lt;li&gt;Tangering Dream&lt;/li&gt;
  &lt;li&gt;Vangelis&lt;/li&gt;
  &lt;li&gt;Jean-Michel Jarre&lt;/li&gt;
  &lt;li&gt;Tomita&lt;/li&gt;
  &lt;li&gt;Brian Eno&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some newer favorites&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VNV Nation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And even newer (just started listening to)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Symbion Project&lt;/li&gt;
  &lt;li&gt;Kodomo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Others I want to follow up on&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Freezepop&lt;/li&gt;
  &lt;li&gt;Splashdown&lt;/li&gt;
  &lt;li&gt;Yellow Magic Orchestra&lt;/li&gt;
  &lt;li&gt;Gary Numan&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two useful Wikipedia pages for you&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Timeline_of_electronic_music_genres&quot;&gt;Timeline of electronic music genres&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_electronic_music_genres&quot;&gt;List of electronic music genres&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the 1980s and 1990s, I listened to the radio show &lt;a href=&quot;https://www.hos.com/&quot;&gt;Hearts of Space&lt;/a&gt;
a lot; as the name indicates, it focuses on slower electronic music: ambient and new-age. It
can still be found on a lot of radio channels across the US.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Nov 2015 00:00:00 -0800</pubDate>
        <link>http://neurocline.github.io/2015/11/13/electronic-music-bands.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/2015/11/13/electronic-music-bands.html</guid>
        
        
      </item>
    
      <item>
        <title>TCP auto-tuning</title>
        <description>&lt;p&gt;TCP auto-tuning is not new, but it’s still not well-known. TCP performance has
two competing environmental issues tugging at it. If you queue too much, then
you have wild swings when congestion happens, causing your transmission rate
to swing between maximum and near-zero. If you don’t have enough packets in
flight, then you are waiting in ACKs to be returned, and thus using only a
fraction of available bandwidth. Both of these have one input from you, the
size of the receive buffer (and lesser but still somewhat important, the
size of the send buffer).&lt;/p&gt;

&lt;p&gt;TCP auto-tuning’s insight was to let the TCP stack participate in setting the
size of TCP buffers. In the past 10 years, most major operating systems have
added TCP auto-tuning to their TCP network stacks. Linux as of 2.6, Windows
as of Vista, Mac OS X as of 10.5.&lt;/p&gt;

&lt;p&gt;I think that most operating system disable auto-tuning if you manually set socket
buffer sizes. In BSD, this is done with setsockopt:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SO_SNDBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bufferSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SO_RCVBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://fasterdata.es.net/host-tuning/&quot;&gt;Host Tuning&lt;/a&gt; - details for various operating systems on manual and automatic tuning.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.switch.ch/network/tools/tcp_throughput/&quot;&gt;TCP Throughput Calculator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.psc.edu/index.php/networking/641-tcp-tune&quot;&gt;Enabling High Performance Data Transfers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://serverfault.com/questions/608060/windows-tcp-window-scaling-hitting-plateau-too-early&quot;&gt;Windows TCP Window Scaling Hitting plateau too early&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.acc.umu.se/~maswan/linux-netperf.txt&quot;&gt;TCP performance tuning - how to tune linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://littledaemons.wordpress.com/2009/03/25/linux-tcp-auto-tuning/&quot;&gt;LINUX TCP AUTO-TUNING&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.riccardoriva.info/blog/?p=1286&quot;&gt;How-To disable Windows 7 TCP/IP auto-tuning&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Nov 2015 09:19:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/11/12/tcp-auto-tuning.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/11/12/tcp-auto-tuning.html</guid>
        
        <category>network</category>
        
        <category>internet</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://radar.oreilly.com/2015/10/swarm-v-fleet-v-kubernetes-v-mesos.html&quot;&gt;Swarm v. Fleet v. Kubernetes v. Mesos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python.html&quot;&gt;27 languages to improve your Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tympanus.net/codrops/2015/11/04/rain-water-effect-experiments/&quot;&gt;Rain &amp;amp; Water Effect Experiments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/android-platform/Hhl_4hfOONg/discussion&quot;&gt;Re: ANN: AOSP builds with ninja&lt;/a&gt; - Android builds are now done with Ninja.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cryptography.readthedocs.org/en/latest/fernet/&quot;&gt;Fernet (symmetric encryption)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://eng.lyft.com/announcing-confidant-an-open-source-secret-management-service-from-lyft-1e256fe628a3&quot;&gt;Announcing Confidant: an open source secret management service from Lyft&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.ibm.com/open/systemml/&quot;&gt;SystemML&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.quora.com/What-is-the-difference-between-Data-Analytics-Data-Analysis-Data-Mining-Data-Science-Machine-Learning-and-Big-Data-1&quot;&gt;What is the difference between Data Analytics, Data Analysis, Data Mining, Data Science, Machine Learning, and Big Data?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hangtwenty/dive-into-machine-learning&quot;&gt;hangtwenty/dive-into-machine-learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gizmodo.com/can-these-glasses-help-the-colorblind-we-put-en-chroma-1739433668&quot;&gt;Can These Glasses Help the Colorblind? We Put EnChroma to the Test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.arcanoae.com/blue-lion-go/&quot;&gt;Blue Lion is Go!&lt;/a&gt;. A new OS/2 distribution!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.siftscience.com/blog/2015/how-fraudulent-users-slip-under-the-radar&quot;&gt;How Fraudulent Users Slip Under the Radar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@brandonmchu/the-black-box-of-product-management-3feb65db6ddb&quot;&gt;The Black Box of Product Management&lt;/a&gt;. “What does a product manager do, anyway?”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.khoslaventures.com/wp-content/uploads/Good_Product_Manager_Bad_Product_Manager_KV.pdf&quot;&gt;Good Product Manager Bad Product Manager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://techcrunch.com/2015/11/03/prop-f/&quot;&gt;Airbnb, Proposition F And The Shared Hypocrisy Of Bay Area Housing&lt;/a&gt;. Article chock-full of information, although ostensibly about Airbnb and the (failed) Proposition F in November 2015.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/symisc/libcox&quot;&gt;Symisc Libcox - Cross Platform System Calls &amp;amp; Utilities&lt;/a&gt;. Cross-platform ANSI-C library for making system calls. Dubious at the moment, but could become something great.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://homepage.ntlworld.com/jonathan.deboynepollard/Softwares/nosh.html&quot;&gt;The nosh package&lt;/a&gt;. Managing daemons, terminals and logging.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://shkspr.mobi/blog/2015/11/google-secret-screenshot-api/&quot;&gt;Google’s Secret Screenshot API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pgbovine.net/cpython-internals.htm&quot;&gt;CPython internals: A ten-hour codewalk through the Python interpreter source code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/659199/&quot;&gt;tcp/dccp: lockless listener&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lemire.me/blog/2015/10/26/crazily-fast-hashing-with-carry-less-multiplications/&quot;&gt;Crazily fast hashing with carry-less multiplications&lt;/a&gt;. This is insanely fast. If it really produces good dispersion, this would become the preferred hash function for long strings that don’t need cryptographic behavior.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Nov 2015 17:32:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/11/08/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/11/08/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Command-line argument parsing</title>
        <description>&lt;p&gt;One of the many things I want to see, because I want to use it, is the definitive
library for command-line argument parsing. There are a lot of these, and yet I
see programs doing ad-hoc command-line parsing, because most of the libraries
are verbose to use and require effort to understand. I’ve certainly done my share of
both ad-hoc and “real” command-line parsers, as well as used a dozen or so argument
parsing libraries.&lt;/p&gt;

&lt;p&gt;The code you write to do command-line argument parsing needs to be as straightforward
as possible, showing the intent of the command-line. Otherwise you’ll be tempted to
avoid it for simple command-lines, and you’ll be spending significant effort
maintaining it for complex command-lines.&lt;/p&gt;

&lt;p&gt;It also need to be flexible, as there are multiple styles of command lines. I don’t
mind defaulting to the GNU getopt style, with single-dash and combining for single-character
commands and double-dash for word commands. However, we do have Microsoft with their
default disaster (command lines preceded by slash characters), and there are ecosystems
that are stubborn with their oddball styles. Suborn by making it easy, but don’t put
up walls.&lt;/p&gt;

&lt;p&gt;And this library needs to be something that can be copied easily; any license more
onerous than the 2-clause BSD license is yet another excuse to make a new system. It’s
a command-line, and we don’t need 50 different ways to parse it.&lt;/p&gt;

&lt;p&gt;I also want this to be multi-language. Some languages are converging towards a single
stock library that are used for command-line parsing. The best of the breed to date I’ve
seen is Python’s argparse. However, argparse is something that I have to read documentation
for in order to learn to use. Instead, what I want is the same library, tweaked for language
specifics, across all languages - where possible, of course; languages that diverge from
procedural make that harder.&lt;/p&gt;

&lt;p&gt;Of course, if you can use a descriptive definition instead of a proscriptive one, then
you could have a common command-line argument parsing system. I just don’t know if more
complex operations can be done in a descriptive fashion. There is one system that has
made a valiant try, and that’s &lt;a href=&quot;http://docopt.org/&quot;&gt;docopt&lt;/a&gt;. The test of this would be
to try to implement a large command line (like, say Git) in this system.&lt;/p&gt;

&lt;p&gt;As with a lot of other things I want, this is interesting enough that I will eventually
work on it, but if someone else gets to it first, I’ll happily use what they make.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;The contradiction here is: ignore what others are done so that you don’t limit yourself;
and yet know what others have done so you make something better and different (e.g don’t
painfully re-invent the wheel). No problem. Here’s a sampling of what already exists. I don’t
know how many hundreds of command-line argument parsing libraries exist, but I’m sure it
is many hundreds.&lt;/p&gt;

&lt;p&gt;Also, I’m not endorsing docopt. Yet. But it’s a good start.&lt;/p&gt;

&lt;p&gt;Multiple languages&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docopt.org/&quot;&gt;docopt&lt;/a&gt;. Describe command lines to generate parser. Lots of languages supported, see &lt;a href=&quot;https://github.com/docopt&quot;&gt;docopt GitHub repo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot;&gt;argparse&lt;/a&gt;. Python’s command-line processing library.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/piranha/opster&quot;&gt;opster&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://plac.googlecode.com/hg/doc/plac.html&quot;&gt;Plac&lt;/a&gt;. Has decent minimal complexity, uses code structure to create argument parsing.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/Clap/0.7&quot;&gt;Clap&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://apenwarr.ca/log/?m=201111&quot;&gt;options.py&lt;/a&gt; from Bup. Another descriptive approach.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ruby-doc.org/stdlib-2.2.3/libdoc/optparse/rdoc/index.html&quot;&gt;optparse&lt;/a&gt;. Stock Ruby argument parser; see &lt;a href=&quot;https://gist.github.com/rtomayko/1190547&quot;&gt;decent example&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/soveran/clap&quot;&gt;clap&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mdub/clamp&quot;&gt;clamp&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/erikhuda/thor&quot;&gt;Thor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://clip.rubyforge.org/&quot;&gt;clip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_node/Getopt.html&quot;&gt;getopt&lt;/a&gt;. Dates back to 1980, in POSIX.2 standard.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_node/Getopt.html&quot;&gt;GNU getopt_long&lt;/a&gt;. The GNU code is GPL, but there are BSD-license clones written by others.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://manpages.ubuntu.com/manpages/hardy/man1/genparse.1.html&quot;&gt;genparse&lt;/a&gt;. Parser generator, creates code for getopt_long.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.nongnu.org/arg-parser/arg_parser.html&quot;&gt;Arg_parser&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.google.com/p/getoptpp/&quot;&gt;getoptpp&lt;/a&gt;. A getopt variant.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://google-gflags.googlecode.com/svn/trunk/doc/gflags.html&quot;&gt;Google Commandline flags&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://directory.fsf.org/wiki/Popt&quot;&gt;popt&lt;/a&gt; and &lt;a href=&quot;http://linux.die.net/man/3/popt&quot;&gt;man&lt;/a&gt;. RedHat, X11 license.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C#&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitdiff/synoptic&quot;&gt;synoptic&lt;/a&gt;. Argument parsing through code structure. Not sure I like this for large command lines, but it’s an interesting approach for simple ones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C++&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://codesynthesis.com/projects/cli/&quot;&gt;cli&lt;/a&gt;. DSL approach, so slight negative for simple command-line programs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mih.voxindeserto.de/argvparser.html&quot;&gt;ArgvParser&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://optionparser.sourceforge.net/&quot;&gt;OptionParser&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0/doc/html/program_options.html&quot;&gt;Boost.Program_options&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tclap.sourceforge.net/&quot;&gt;TCLAP&lt;/a&gt;. Templates.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://getpot.sourceforge.net/&quot;&gt;GetPot&lt;/a&gt;. Also has Java, Ruby and Python versions. Uses DSL and runtime parser to describe command-line argument parsing.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bradapp.com/ftp/src/libs/C++/CmdLine.html&quot;&gt;CmdLine&lt;/a&gt;. Has descriptive/DSL mode.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ccdw.org/~cjj/prog/arg/arg_manual.xhtml&quot;&gt;arg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://commons.apache.org/proper/commons-cli/&quot;&gt;Commons CLI&lt;/a&gt;. Default Java library (?)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://args4j.kohsuke.org/&quot;&gt;args4j&lt;/a&gt;. Anotations-based.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jcommander.org/&quot;&gt;JCommander&lt;/a&gt;. Best tagline: “Because life is too short to parse command line parameters”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://argparse4j.sourceforge.net/&quot;&gt;ArgParse4j&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Javascript&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/substack/node-optimist&quot;&gt;Optimist&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://golang.org/pkg/flag/&quot;&gt;Flag&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 04 Nov 2015 11:06:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/11/04/command-line-argument-parsing.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/11/04/command-line-argument-parsing.html</guid>
        
        <category>command-line</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>A history of the Internet</title>
        <description>&lt;p&gt;Recently, an ill-worded phrase by a near-friend of mine (“TCP/IP, a poorly designed protocol”),
and his overlying thesis (“95% of the work in developing networking was done by commercial
companies, DARPA shouldn’t get credit for the Internet”), caused me to do a lot of reading. I
didn’t start hard-core software development myself until 1981, so while I knew a lot of this
anecdotally, I quickly realized that I didn’t know as much as I thought.&lt;/p&gt;

&lt;p&gt;I need to write all this up, but here’s a few nuggets.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The French nearly invented the Internet.&lt;/li&gt;
  &lt;li&gt;Virtually all of the work on networking was funded by governments.&lt;/li&gt;
  &lt;li&gt;The sole exception was Xerox PARC, but Xerox shot themselves in the foot.&lt;/li&gt;
  &lt;li&gt;Davies, a Brit, came up with packet switching in 1959 (although perhaps it was simulataneously conceived of by Paul Baran).&lt;/li&gt;
  &lt;li&gt;Cerf et al worked on creating ARPANET, a packet-switched network, but with a host-to-host, or connection-oriented, system called NCP, first public demonstration in 1972 (showing email, among other things).&lt;/li&gt;
  &lt;li&gt;The University of Hawaii launched ALOHANet, a radio network using random packet transmission, in 1970.&lt;/li&gt;
  &lt;li&gt;Then Louis Pouzin, French, came up with datagrams and smart edge/dumb router, the key innovations that turned ARPANET from unworkable to unbeatable.&lt;/li&gt;
  &lt;li&gt;Meanwhile, Metcalfe, having done his Ph.D. thesis on what became Ethernet, was offered a job and major support by Xerox PARC; Ethernet was born in 1973.&lt;/li&gt;
  &lt;li&gt;The French government and European industry said “nope, we like circuit switching just fine”, and even Pouzin himself became convinced, eventually abandoning his approach. But the ARPANET group saw it as a great advance.&lt;/li&gt;
  &lt;li&gt;Then ARPA funded the rest; TCP/IP was invented, coded up, and eventually ARPANET switched over to it.&lt;/li&gt;
  &lt;li&gt;BSD released a TCP/IP stack around 1983 that became the most influential networking stack in history.&lt;/li&gt;
  &lt;li&gt;The actual opening of ARPANET to become the Internet we know was directly due to a $600 million US funding effort willed into existence by Al Gore.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In particular, TCP/IP had about 5 years of careful thought and initial development put to it,
preceeded by 5 years of experimentation and trial, and then another 10 years to roll it out.
Like many innovations that sprang out of nowhere, it did nothing of the same. From original
idea to world-beating dominance was a 20-year timespan of thinking and implementing.&lt;/p&gt;

&lt;p&gt;Note that TCP won because government funding shielded its development from the inter-company
and inter-country politics that caused OSI to eventually become completely irrelevant. And
the government subsidies meant that Interent protocols could be implemented for free, versus
having to buy very expensive ISO docs for OSI. I doubt many of you have purchased ISO docs.&lt;/p&gt;

&lt;p&gt;I like many of the write-ups I’ve read, and the few books on this, but I think there’s a good
business thesis here that goes against the modern interpretation of the startup or corporation
doing all of the work. Certainly, government funding is pitiful compared to what it was in
the 20th century, and definitely in the period from 1950-1990. But what I see in real companies
is that “works in practice” is not just important but “works in theory” is denigrated, and
companies quickly reach local maxima and get stuck in a web of their own making, and stop
advancing. As I re-read the history of efforts by IBM, DEC, ITTU and others, I see that
clearly had happened, and I see it happening today, just less clearly.&lt;/p&gt;

&lt;p&gt;In the past, people published early results, freely talked to each other, and as a result
progress was rapid. Of course, people built on your results, and if you weren’t fast, your
work benefitted others far more than yourself. In the modern era, there is relatively little
sharing, and while progress is still happening, it’s starting to slow down. There are a host
of factors, but large among them is that companies like Apple are very secretive about what
they do, and allow no one to publish anything. Combine that with the relative lack of
government funding, and it’s sad.&lt;/p&gt;

&lt;p&gt;In particular, we should take the lessons of OSI versus TPC to heart. OSI was, in the end,
an attempt by dominant vendors to hold onto their profits. Since telecommunications companies
had circuits, naturally virtual circuits were the right answer, because they could still own
connections. If they had won, we would have a fraction of the world we have today. Vested
interests will rarely make good decisions. Just like the movie industry saw the VHS tape
as a disaster, failing to see that it would cause their revenues and profits to skyrocket, the
telecommunications vendors saw packet-switched networks as threatening their very existence.
This is true for all the vendor-developed network systems; all were invented to prop up
current modes of hardware production, or to allow them to muscle into the market as a new
competitor.&lt;/p&gt;

&lt;p&gt;Things will change. Telecommunications went from fairly open to very regulated and closed off,
and it took a separate challenger (computing) to change that. Now computing is moving towards
being closed off, but eventually we’ll see some other newcomer blossom and hijack attention
and create progress. Maybe the Maker movement, or home bioengineering, will be that vector.&lt;/p&gt;

&lt;h2 id=&quot;reading-list&quot;&gt;Reading list&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Donald_Davies&quot;&gt;Donald Davies&lt;/a&gt; developed the initial idea of packet-switched networks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/CYCLADES&quot;&gt;CYCLADES&lt;/a&gt; project that created datagrams and moved thinking to the edges.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.historyofcomputercommunications.info/index.html&quot;&gt;A HISTORY OF COMPUTER COMMUNICATIONS: 1968 -1988&lt;/a&gt;, book by Jim Pelkey, well worth reading.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://xbbn.weebly.com/bbn-internet-engineering-timeline.html&quot;&gt;BBN Internet Engineering Timeline&lt;/a&gt;. BBN was one of the government-funded companies at the heart of early network development.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/rfc/rfc801.txt&quot;&gt;RFC 801&lt;/a&gt;. Transitioning ARPANET from NCP to TCP.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rina.tssg.org/docs/PSOC-MovingBeyondTCP.pdf&quot;&gt;Moving beyond TCP&lt;/a&gt;, 2010, with some details on Pouzin’s contribution to networking, but largely as a modern “TCP/IP is not good enough, let’s replace it” proposal. Since one of the authors of this paper is John Day, the second half of the paper is a summary of his 2007 book.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Patterns-Network-Architecture-Fundamentals-paperback/dp/0137063385&quot;&gt;Patterns in Network Architecture&lt;/a&gt;, 2007, John Day, is a book both on reimagining networking, but also a good history of the development of TCP/IP and the Internet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.techrepublic.com/blog/classics-rock/does-anyone-actually-still-use-token-ring/&quot;&gt;Does anyone still use TokenRing?&lt;/a&gt;. TokenRing was IBM’s attempt to compete with Ethernet, developed in the early 1980s as a superior approach, but a combination of royalty pricing and Ethernet advancing far past TokenRing speeds killed it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://spectrum.ieee.org/computing/networks/osi-the-internet-that-wasnt&quot;&gt;OSI: The Internet that wasn’t&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Inventing-Internet-Inside-Technology-Abbate/dp/0262511150&quot;&gt;Inventing the Internet&lt;/a&gt;, 1999, Jane Abbate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cambridge.org/us/academic/subjects/history/twentieth-century-american-history/open-standards-and-digital-age-history-ideology-and-networks&quot;&gt;Open Standards and the Digital Age History, Ideology, and Networks&lt;/a&gt;, 2014, Andrew L. Russell.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.circleid.com/posts/84259_microsofts_contribution_tcp_ip/&quot;&gt;Microsoft’s Contribution Was TCP/IP&lt;/a&gt;, 2008, positing Microsoft helped put TCP/IP on the map.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.newmedia.org/history-of-the-internet.html&quot;&gt;History of the Internet&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Nov 2015 08:36:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/11/02/A-history-of-the-internet.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/11/02/A-history-of-the-internet.html</guid>
        
        <category>internet</category>
        
        <category>network</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Generalized Deterministic Parsers (GLR, GLL and more)</title>
        <description>&lt;p&gt;Generalized deterministic parsing is an extension to deterministic parsing that
temporarily handles ambiguous grammars under the idea that further input will resolve
apparent conflicts.
The first such one was called Generalized LR or GLR, under the idea that this technique
(forking and parsing parallel parse trees each time an ambiguity was found) would only
work with LR. Then, once a GLL parser was demonstrated, it was hard to call the
method GLR. I’m going by the naming that Grune and Jacobs gave it in their 2007
masterpiece Parsing techniques.&lt;/p&gt;

&lt;p&gt;Bison supports GLR, and I don’t know why it’s not the default. GLR only costs more than
LR when you have ambiguities in the grammar, and even C++ has only temporary ambiguities
that resolve quickly. Also, you don’t need to try to rewrite the grammar to create a
LALR parser.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.researchgate.net/publication/269645727_A_Practical_GLR_Parser_Generator_for_Software_Reverse_Engineering&quot;&gt;A Practical GLR Parser Generator for Software Reverse Engineering&lt;/a&gt; is a paper behind a gate in ResearchGate, e.g. &lt;a href=&quot;http://ojs.academypublisher.com/index.php/jnw/article/download/jnw0903769776/8857&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dparser.sourceforge.net/&quot;&gt;DParser&lt;/a&gt;, although doesn’t seem to have had much activity since initial creation in 2006.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.researchgate.net/publication/241755950_Integrating_a_GLR_Parser_Generator_in_Eli&quot;&gt;Integrating a GLR Parser Generator in Eli&lt;/a&gt; 2007 thesis. Direct PDF link &lt;a href=&quot;http://ag-kastens.uni-paderborn.de/paper/Bachelor_Schwekendiek.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pure.royalholloway.ac.uk/portal/en/publications/island-grammarbased-parsing-using-gll-and-tom(1bccc756-7ebc-4b14-abd2-8910ef5dcbeb).html&quot;&gt;Island Grammar-Based Parsing Using GLL and Tom&lt;/a&gt;. I think Adrian Johnstone is the one who demonstrated the possibility of GLL parsers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pure.royalholloway.ac.uk/portal/en/publications/gll-parsetree-generation(bdbcf5af-d176-4389-bfcc-ecc86a5a5f77).html&quot;&gt;GLL parse-tree generation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pure.royalholloway.ac.uk/portal/en/publications/modular-grammar-specification(f73cedc9-678f-4115-8802-2add7aa0763d).html&quot;&gt;Modular grammar specification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pure.royalholloway.ac.uk/portal/en/publications/modelling-gll-parser-implementations(2c1e93df-746c-4271-8de6-534141d0c9b5).html&quot;&gt;Modelling GLL parser implementations&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Nov 2015 23:05:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/11/01/generalized-deterministic-parsers.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/11/01/generalized-deterministic-parsers.html</guid>
        
        <category>compiler</category>
        
        <category>parser</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://radek.io/2015/10/20/httpie/&quot;&gt;httpie&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yahoohadoop.tumblr.com/post/129872361846/large-scale-distributed-deep-learning-on-hadoop&quot;&gt;Large Scale Distributed Deep Learning on Hadoop Clusters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/NicolasLM/nucleon&quot;&gt;nucleon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://01.org/hyperscan&quot;&gt;hyperscan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rinuboney.github.io/2015/10/18/theoretical-motivations-deep-learning.html&quot;&gt;Theoretical Motivations for Deep Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codewords.recurse.com/issues/four/the-language-of-choice&quot;&gt;The language of choice&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/MagicStack/MagicPython&quot;&gt;MagicPython&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.gopl.io/ch1.pdf&quot;&gt;The Go Programming Language&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gitpython.readthedocs.org/en/latest/index.html&quot;&gt;GitPython&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://git-for-windows.github.io/&quot;&gt;Git For Windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.utexas.edu/users/EWD/transcriptions/EWD10xx/EWD1036.html&quot;&gt;On the cruelty of really teaching computing science&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html&quot;&gt;Watch a Directory for Changes&lt;/a&gt;, and &lt;a href=&quot;http://brunorocha.org/python/watching-a-directory-for-file-changes-with-python.html&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;http://stackoverflow.com/questions/182197/how-do-i-watch-a-file-for-changes-using-python&quot;&gt;this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C++ Blogs&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/151974/c-blogs-that-you-regularly-follow&quot;&gt;C++ blogs that you regularly follow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://meetingcpp.com/index.php/blog.html&quot;&gt;Meeting C++&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cpptruths.blogspot.com/&quot;&gt;c++ truths&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://herbsutter.com/&quot;&gt;Sutter’s mill&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/vcblog/&quot;&gt;Visual C++ Team Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lonecpluspluscoder.com/&quot;&gt;The Lone C++ Coder’s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 20 Oct 2015 23:59:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/20/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/20/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

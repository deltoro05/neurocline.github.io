<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 14 Oct 2015 00:11:39 -0700</pubDate>
    <lastBuildDate>Wed, 14 Oct 2015 00:11:39 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>More quorums</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/otoolep/hraftd&quot;&gt;hraftd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/goraft/raftd&quot;&gt;raftd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hashicorp/raft&quot;&gt;Hashicorp Raft&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 23:50:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/13/more-quorums.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/13/more-quorums.html</guid>
        
        <category>consensus</category>
        
        <category>quorum</category>
        
        <category>go</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Blogs to look at</title>
        <description>&lt;p&gt;These are interesting blogs to study.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bitquabit.com/page/projects/&quot;&gt;bitquabit&lt;/a&gt; and &lt;a href=&quot;https://bitbucket.org/bpollack/blag&quot;&gt;source code&lt;/a&gt;. Look at revision history to make sense of it.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 23:46:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/13/blogs-to-look-at.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/13/blogs-to-look-at.html</guid>
        
        <category>python</category>
        
        <category>blog</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Python: threading and multiprocessing</title>
        <description>&lt;p&gt;The basic threading model in Python is extremely simple.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# simmple thread example&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I am thread %d&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I am not a thread&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Python threads have some advantages and disadvantages, and they spring from the same source;
you can do threads, but only one thread can execute Python code at a time. There are still
big advantages to using threads, but you can’t take advantage of multiple processors/cores.&lt;/p&gt;

&lt;p&gt;Why use threads? Threads are still useful for simplifying complex flows. Events are better,
but event processing has a higher minimum of complexity.&lt;/p&gt;

&lt;p&gt;Threads are also very useful for I/O; the I/O is not done in Python code, and I/O calls often
are waiting on hardware. This means that you can have multiple threads doing I/O and all of them
can make parallel progress.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Sep 2015 15:12:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/27/python-threading-and-multiprocessing.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/27/python-threading-and-multiprocessing.html</guid>
        
        <category>python</category>
        
        <category>threads</category>
        
        <category>multiprocessing</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Engineering at scale</title>
        <description>&lt;p&gt;Twitter talk at &lt;a href=&quot;http://www.atscaleconference.com/&quot;&gt;@Scale 2015&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://spectrum.ieee.org/view-from-the-valley/computing/software/twitters-tips-for-making-software-engineers-more-efficient&quot;&gt;Twitter’s Tips for Making Software Engineers More Efficient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unpacking this a bit:&lt;/p&gt;

&lt;p&gt;Peter Seibel, currently the tech lead of Twitter’s engineering effectiveness group, is the author of two books&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Coders At Work, interviews with a few dozen influential programmers&lt;/li&gt;
  &lt;li&gt;Practical Common Lisp: two editions, 2005 and 2012&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He tried to start a new online programmer magazine in 2010 called &lt;a href=&quot;&quot;&gt;Code Quarterly&lt;/a&gt; but &lt;a href=&quot;https://gigamonkeys.wordpress.com/2011/10/17/end-of-the-line-for-code-quarterly/&quot;&gt;pulled the plug on it&lt;/a&gt; a year and change later, which is too bad, because there is still a need for something like this.&lt;/p&gt;

&lt;p&gt;In a nutshell, here’s what he said about concerted efforts to make engineers more efficient&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if you have 1 to 10 people, don’t devote anyone&lt;/li&gt;
  &lt;li&gt;at 100 people, you need 2 people devoted to tools and the like, and those 2 will be as effective as 101 engineers&lt;/li&gt;
  &lt;li&gt;at 1000, you need 255 to support the rest, and they’ll be as effective as 1400&lt;/li&gt;
  &lt;li&gt;at 10,000, you need 1/3rd of your group devoted to this&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Twitter has 2,000 engineers. For what it does, that seems excessive.&lt;/p&gt;

&lt;p&gt;Facebook has 10,000 engineers now. Holy moley.&lt;/p&gt;

&lt;p&gt;Apple had around 12,000 engineers in 2014 in the US, and an unknown amount outside the US.
Total number probably around 16,000 (at least so says LinkedIn).&lt;/p&gt;

&lt;p&gt;Google has about 28,000 engineers. Current headcount as of June 30 2015 is 57,148. As of December 31 2014, total headcount was 53,600 with 20,832 in R&amp;amp;D and 7,637 in operations.&lt;/p&gt;

&lt;p&gt;Samsung has about 40,00 engineers (as of 2013). Still less than Microsoft, although Samsung
has more total employees.&lt;/p&gt;

&lt;p&gt;Microsoft has around 55,000 engineers.
http://news.microsoft.com/facts-about-microsoft/#EmploymentInfo&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arstechnica.com/gadgets/2014/09/samsung-has-more-employees-than-google-apple-and-microsoft-combined/&quot;&gt;Samsung has more employees than Google, Apple, and Microsoft combined&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon has more than 1000, but can’t find numbers. Low thousands of software engineers.&lt;/p&gt;

&lt;p&gt;IBM probably still has 50,000 software engineers?&lt;/p&gt;

&lt;p&gt;Oracle probably has 10,000 or more&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Sep 2015 15:12:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/27/engineering-at-scale.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/27/engineering-at-scale.html</guid>
        
        <category>process</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Peeking into Python</title>
        <description>&lt;p&gt;There are a number of ways to peek into Python code and data.&lt;/p&gt;

&lt;h2 id=&quot;built-in-functions-for-output&quot;&gt;Built-in functions for output&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.python.org/2/library/functions.html&quot;&gt;built-in primitives&lt;/a&gt; that are relevant are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;dir()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;vars()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;dir(object)&lt;/code&gt; shows all the attributes for the object. Of course, not all objects
have attributes. It’s really made for use at an interactive prompt, not as
an in-code method. Basically, it either calls &lt;code&gt;__dir__()&lt;/code&gt;, or it looks at
the &lt;code&gt;__dict__&lt;/code&gt; attribute and shows some of the information.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;repr(object)&lt;/code&gt; returns a printable representation of an object. Again, this sounds
good until you use it, because anything other than built-in types just returns
a string with the class name and the address of the object. Still, it’s the gateway
to something useful if you also add &lt;code&gt;__repr__()&lt;/code&gt; methods to your classes, because &lt;code&gt;repr()&lt;/code&gt;
will call the &lt;code&gt;__repr__&lt;/code&gt; method if it exists. Of course, the downside is that you need
a systematic and consistent approach, and you have to write that code yourself.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vars(object)&lt;/code&gt; is more useful for printing than &lt;code&gt;dir&lt;/code&gt; - it returns
the &lt;code&gt;__dict__&lt;/code&gt; attribute, which means that if you call &lt;code&gt;print(vars(object))&lt;/code&gt; you’ll
see keys and values together, whereas &lt;code&gt;dir()&lt;/code&gt; just shows the keys.&lt;/p&gt;

&lt;h2 id=&quot;useful-classes-for-output&quot;&gt;Useful classes for output&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;pprint&lt;/code&gt; module sounds useful until you use it. Its utility is largely restricted
to pretty-printing, it doesn’t give you extra disassembly powers on its own. But
see &lt;a href=&quot;https://docs.python.org/2/library/pprint.html&quot;&gt;pprint–Data pretty printer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.python.org/2/library/inspect.html&quot;&gt;&lt;code&gt;inspect&lt;/code&gt;&lt;/a&gt; module is a lot more useful, but it doesn’t do output, it just lets
you get information about objects.&lt;/p&gt;

&lt;h2 id=&quot;built-in-functions-for-introspection&quot;&gt;Built-in functions for introspection&lt;/h2&gt;

&lt;p&gt;Some built-ins are useful for testing objects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;type&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;isinstance&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;hasattr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;type(object)&lt;/code&gt; returns a string indicating the type of the object. As such, it can
be used for both output and testing.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isinstance(object, classinfo)&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an instance
of &lt;code&gt;classinfo&lt;/code&gt; (including inheritance). In general, it’s more appropriate to use
&lt;code&gt;isinstance&lt;/code&gt; for type testing because it does handle inheritance.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;types&lt;/code&gt; module is useful for both &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;isintance&lt;/code&gt; use. And type
output needs this kind of introspection so it knows what it should print.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/library/l-pyint/&quot;&gt;Guide to Python introspection&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Sep 2015 20:47:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/24/peeking-into-python.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/24/peeking-into-python.html</guid>
        
        <category>python,</category>
        
        <category>debugging</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>eBPF: extended Berkeley Packet Filter</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.brendangregg.com/blog/2015-05-15/ebpf-one-small-step.html&quot;&gt;eBPF: One Small Step&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.brendangregg.com/blog/2015-09-22/bcc-linux-4.3-tracing.html&quot;&gt;bcc: Taming Linux 4.3+ Tracing Superpowers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/603983/&quot;&gt;Extending extended BPF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kernel.org/doc/Documentation/networking/filter.txt&quot;&gt;Linux Socket Filtering aka Berkeley Packet Filter (BPF)&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Sep 2015 20:18:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/24/ebpf-extended-berkeley-packet-filter.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/24/ebpf-extended-berkeley-packet-filter.html</guid>
        
        <category>algorithms,</category>
        
        <category>linux</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Zig-zag encoding</title>
        <description>&lt;p&gt;Encoding numbers, these abstract counting things, as physical entities requires choices. Ignoring the whole
religious war about big-endian versus little-endian, or the long-since won battles about two’s complement
versus anything else, we are left with “how many bits/bytes do we use?”. If you pick a fixed-length, then
you limit the range of the number you store, and you potentially waste a lot of space.&lt;/p&gt;

&lt;p&gt;Variable length numbers are a compromise - you have either an explicit length prefix, or you have some
sentinel that indicates the end of the number. However, you’re faced with a challenge when it comes to
negative numbers - two’s complement is good for fixed-length numbers, but you can’t tell the difference
between a large positive number and a small negative number, leaving all negative numbers to be encoded
as giant variable length strings.&lt;/p&gt;

&lt;p&gt;Google Protocol Buffers, for positive numbers, uses what they call Varint encoding, where there is a
sentinel: numbers are stored in little-endian format, 7 bits per byte, and the most-significant bit
is 0 for the last byte and 1 for all other bytes.&lt;/p&gt;

&lt;p&gt;Reading and writing Varint-encoded numbers looks like this (warning: no checking! not production code!):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For signed numbers, it does what they call zig-zag encoding to interleave positive and negative numbers
so that small negative numbers are still stored with a small number of bytes.&lt;/p&gt;

&lt;p&gt;This actually stores an absolute value of the number with the sign bit stored in the least-significant bit
of the first byte. The math looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zigzag = (n &amp;lt;&amp;lt; 1) ^ (n &amp;gt;&amp;gt; (BIT_WIDTH - 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;BIT_WIDTH&lt;/code&gt; is the number of bits in your fixed-width number (32-bit, 64-bit etc). Remember that
arithmetic shift replicates the sign bit, so shifting right like this will create a number that is &lt;code&gt;000...00&lt;/code&gt;
for positive numbers and &lt;code&gt;111...11&lt;/code&gt; for negative numbers.&lt;/p&gt;

&lt;p&gt;Reading and writing zig-zag encoded numbers looks like this (warning: no checking! not production code!):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_zigzag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BIT_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from_zigzag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A real codebase would combine both together, but it would also handle buffer over/underrun too.&lt;/p&gt;

&lt;p&gt;Note that it would be possible to store negative numbers with a smaller number of bytes with a little more sophistication,
and not require zigzag encoding: you store the number of bytes required by the absolute magnitude of the number, and on
reading, you pick up the MSB of the sequence of stored bytes and recreate the number. I suspect that zig-zag encoding is
used because the amount of code for encoding and decoding is actually less when expressed in a high-level language, and
perhaps faster even in assembly.&lt;/p&gt;

&lt;p&gt;The code listed above could be made faster by operating on the data in 32-bit or 64-bit chunks. It would be interesting
to time naive versus sophisticated code to see how much it’s worth doing it in a more complex fashion.&lt;/p&gt;

&lt;p&gt;As a gateway to more sophisticated methods, look at Apache Orc: &lt;a href=&quot;https://orc.apache.org/docs/run-length.html&quot;&gt;Run Length Encoding&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Sep 2015 17:12:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/17/zig-zag-encoding.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/17/zig-zag-encoding.html</guid>
        
        <category>algorithms</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Distributed Databases</title>
        <description>&lt;p&gt;What are our options if we want a distributed, fault-tolerant database?&lt;/p&gt;

&lt;h2 id=&quot;mysql-cluster-ndb&quot;&gt;MySQL Cluster (NDB)&lt;/h2&gt;

&lt;p&gt;It’s very widely used at scale.&lt;/p&gt;

&lt;h2 id=&quot;cassandra&quot;&gt;Cassandra&lt;/h2&gt;

&lt;p&gt;Cassandra was written initially at Facebook, strongly influenced by Dynamo,
Amazon’s key/value store. It was then moved to be an Apache projec in 2010. Cassandra has been
used at very large scale. The main challenge is that it has an eventual consistency model, which
can be challenging to work with (Facebook moved from Cassandra to HBase due to this).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://cassandra.apache.org/&quot;&gt;Cassandra&lt;/a&gt; home page.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&quot;&gt;Dynamo: Amazon’s Highly Available Key-value Store&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Cassandra&quot;&gt;Apache Cassandra&lt;/a&gt; page on Wikipedia.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.datacenterknowledge.com/archives/2014/07/31/hulu-cassandra-vs-hbase-vs-riak/&quot;&gt;Hulu Chooses Cassandra Over HBase and Riak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;riak&quot;&gt;Riak&lt;/h2&gt;

&lt;p&gt;Riak also follows the thread from Dynamo, and is a key-value store written in Erlang. Riak can do in-memory
or disk storage, or both. Riak is very fault-tolerant but not as fast as something like Redis, leading to the
idea that perhaps Riak is the back-end for a Redis cache?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://basho.com/products/&quot;&gt;Riak&lt;/a&gt; home page and &lt;a href=&quot;http://docs.basho.com/riak/latest/&quot;&gt;docs&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Riak&quot;&gt;Riak&lt;/a&gt; page on Wikipedia.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://compositecode.com/2013/02/10/riak-redis/&quot;&gt;Not So Versus, Riak Versus Redis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://inaka.net/blog/2011/08/25/when-to-use-riak/&quot;&gt;My Year of Riak&lt;/a&gt; from 2011.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.basho.com/riak/1.3.1/references/appendices/comparisons/Riak-Compared-to-Cassandra/&quot;&gt;Riak Compared to Cassandra&lt;/a&gt; potential bias since this is from Riak.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://basho.com/posts/technical/riak-vs-cassandra/&quot;&gt;Riak versus Cassandra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hyperdex&quot;&gt;HyperDex&lt;/h2&gt;

&lt;p&gt;HyperDex is a research project from Cornell turned commercial. I think this project started in 2010, but
it seemed to be at a usable state by 2012.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://hyperdex.org/&quot;&gt;HyperDex&lt;/a&gt; home page and &lt;a href=&quot;http://hyperdex.org/papers/&quot;&gt;papers&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://hyperdex.org/papers/hyperdex.pdf&quot;&gt;HyperDex: A Distributed, Searchable Key-Value Store&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.cornell.edu/people/egs/&quot;&gt;Emin Gün Sirer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rescrv.net/&quot;&gt;Robert Escriva&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HyperDex&quot;&gt;HyperDex&lt;/a&gt; page on Wikipedia&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h2&gt;

&lt;p&gt;We should not use MongoDB.&lt;/p&gt;

&lt;h2 id=&quot;hbase&quot;&gt;HBase&lt;/h2&gt;

&lt;p&gt;HBase is implementation of Google’s BigTable started by Powerset. It moved to the Apache Foundation in 
2009, and is part of the Hadoop project; in fact, it runs on top of the Hadoop File System.&lt;/p&gt;

&lt;p&gt;Facebook started using HBase in 2010 for their new messaging platform, and have now forked it into
HydraBase. One key thing was the switch to RAFT for the consensus algorithm.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.facebook.com/posts/321111638043166/hydrabase-the-evolution-of-hbase-facebook/&quot;&gt;HydraBase – The evolution of HBase@Facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;redis-cluster&quot;&gt;Redis Cluster&lt;/h2&gt;

&lt;p&gt;Not sure.&lt;/p&gt;

&lt;h2 id=&quot;cockroach-db&quot;&gt;Cockroach DB&lt;/h2&gt;

&lt;p&gt;This will be awesome someday&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cockroachlabs.com/&quot;&gt;Cockroach Labs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cockroachdb&quot;&gt;cockroachdb&lt;/a&gt; GitHub organization.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.wired.com/2014/07/cockroachdb/&quot;&gt;Out in the Open: Ex-Googlers Building Cloud Software That’s Almost Impossible to Take Down&lt;/a&gt; 2014 Wired Article&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;general-notes&quot;&gt;General notes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://aphyr.com/tags/Jepsen&quot;&gt;Call Me Maybe - Jepsen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-ajoux.pdf&quot;&gt;Challenges to Adopting Stronger Consistency at Scale&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.nahurst.com/visual-guide-to-nosql-systems&quot;&gt;Visual Guide to NoSQL Systems&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis&quot;&gt;Cassandra vs MongoDB…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://book.mixu.net/distsys/single-page.html&quot;&gt;Distributed systems for fun and profit&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Sep 2015 13:06:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/17/distributed-databases.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/17/distributed-databases.html</guid>
        
        <category>database,</category>
        
        <category>distributed</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Notion, Web-based content editor</title>
        <description>&lt;p&gt;So, this is interesting&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.notion.so/&quot;&gt;Notion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, it’s yet another appealing walled garden. I can create a lot of content
on their site - well, my private section on their site.&lt;/p&gt;

&lt;p&gt;I don’t know if I want to dump a lot of data into something that will probably go away.
But it is very slick.&lt;/p&gt;

&lt;p&gt;Also, the name Notion is very heavily used.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Sep 2015 19:28:00 -0700</pubDate>
        <link>http://neurocline.github.io/blog/2015/09/14/notion.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/blog/2015/09/14/notion.html</guid>
        
        <category>writing</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Recent Links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://enterprisewebbook.com/&quot;&gt;Enterprise Web Development: From Desktop to Mobile&lt;/a&gt;. This is an online version of the &lt;a href=&quot;http://www.amazon.com/Enterprise-Web-Development-Building-Applications/dp/1449356818&quot;&gt;print book&lt;/a&gt;. I think the whole book is online even though the table of contents only points to prolog and epilog material. For example, I ran across &lt;a href=&quot;http://enterprisewebbook.com/ch8_websockets.html&quot;&gt;Chapter 8&lt;/a&gt; on WebSockets while doing a Google search, and once I looked at the &lt;a href=&quot;https://github.com/Farata/EnterpriseWebBook&quot;&gt;GitHub source&lt;/a&gt; for the book, I was able to create the other URLs. I don’t think the text is hidden on purpose.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.methods.co.nz/asciidoc/&quot;&gt;AsciiDoc&lt;/a&gt; has been used to write a number of technical books. Maybe I should try this out. It appears to be a more human-writable version of DocBook. Still, this is more useful to writing structured docs than anything else, I bet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://technologyconversations.com/2015/09/08/service-discovery-zookeeper-vs-etcd-vs-consul/&quot;&gt;Service Discovery: Zookeeper vs etcd vs Consul&lt;/a&gt;. This is in the context of Docker.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codergears.com/Blog/?p=1069&quot;&gt;XRay the LLVM\Clang source code&lt;/a&gt; is interesting, but mostly because I should be looking more closely at tools like &lt;a href=&quot;http://www.cppdepend.com/&quot;&gt;CppDepend&lt;/a&gt; and &lt;a href=&quot;http://cppdepend.com/cqlinq&quot;&gt;CQLinq&lt;/a&gt;, which lets you make LINQ calls on the code database that CppDepend builds up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://libcox.net/&quot;&gt;Libcox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/RaetProtocol/raet&quot;&gt;RAET: Reliable Asynchronous Event Transport Protocol&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kamalmarhubi.com/blog/2015/09/06/kubernetes-from-the-ground-up-the-api-server/&quot;&gt;Kubernetes from the ground up: the API server&lt;/a&gt;. Second in a series about &lt;a href=&quot;http://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;, an open-source cluster manager (from Google). It uses Etcd.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.allthingsdistributed.com/2015/07/under-the-hood-of-the-amazon-ec2-container-service.html&quot;&gt;Under the Hood of Amazon EC2 Container Service&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://adetante.github.io/articles/service-discovery-with-docker-1/&quot;&gt;Service discovery with Docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://book.mixu.net/distsys/single-page.html&quot;&gt;Distributed systems for fun and profit&lt;/a&gt;. A book on distributed systems that’s quite good as an introduction to the concepts and challenges.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mixu/markdown-styles&quot;&gt;Mixu/markdown&lt;/a&gt; converts Markdown to HTML. This and &lt;a href=&quot;https://github.com/mixu/ghost-render&quot;&gt;Ghost&lt;/a&gt; look better than Jekyll.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bost.ocks.org/mike/algorithms/&quot;&gt;Visualizing Algorithms&lt;/a&gt;. Awesome.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/276782/&quot;&gt;Linkers&lt;/a&gt; 20 part series by Ian Lance Taylor for LWN.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://insights.sei.cmu.edu/sei_blog/2015/09/managing-software-complexity-in-models.html&quot;&gt;Managing Software Complexity in Models&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arxiv.org/pdf/1411.1001v2.pdf&quot;&gt;How to Elect a Leader Faster than a Tournament&lt;/a&gt;. Significant advance in leader election.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/&quot;&gt;Dark corners of Unicode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bulldozer00.com/2015/09/14/stack-heap-pool/&quot;&gt;Stack, Heap, Pool&lt;/a&gt;. This “shows” that pools are 33x faster than stack allocation. However, it’s cheating. Object initialization is being billed to
“pool” construction, which is all the time.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Sep 2015 11:32:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/14/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/14/recent-links.html</guid>
        
        <category>service,</category>
        
        <category>microservice</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 21 Oct 2015 00:06:27 -0700</pubDate>
    <lastBuildDate>Wed, 21 Oct 2015 00:06:27 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://radek.io/2015/10/20/httpie/&quot;&gt;httpie&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yahoohadoop.tumblr.com/post/129872361846/large-scale-distributed-deep-learning-on-hadoop&quot;&gt;Large Scale Distributed Deep Learning on Hadoop Clusters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/NicolasLM/nucleon&quot;&gt;nucleon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://01.org/hyperscan&quot;&gt;hyperscan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rinuboney.github.io/2015/10/18/theoretical-motivations-deep-learning.html&quot;&gt;Theoretical Motivations for Deep Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codewords.recurse.com/issues/four/the-language-of-choice&quot;&gt;The language of choice&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/MagicStack/MagicPython&quot;&gt;MagicPython&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.gopl.io/ch1.pdf&quot;&gt;The Go Programming Language&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gitpython.readthedocs.org/en/latest/index.html&quot;&gt;GitPython&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://git-for-windows.github.io/&quot;&gt;Git For Windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.utexas.edu/users/EWD/transcriptions/EWD10xx/EWD1036.html&quot;&gt;On the cruelty of really teaching computing science&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html&quot;&gt;Watch a Directory for Changes&lt;/a&gt;, and &lt;a href=&quot;Watching a directory for file changes with Python&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;http://stackoverflow.com/questions/182197/how-do-i-watch-a-file-for-changes-using-python&quot;&gt;this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C++ Blogs&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/151974/c-blogs-that-you-regularly-follow&quot;&gt;C++ blogs that you regularly follow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://meetingcpp.com/index.php/blog.html&quot;&gt;Meeting C++&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cpptruths.blogspot.com/&quot;&gt;c++ truths&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://herbsutter.com/&quot;&gt;Sutter’s mill&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/vcblog/&quot;&gt;Visual C++ Team Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lonecpluspluscoder.com/&quot;&gt;The Lone C++ Coder’s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 20 Oct 2015 23:59:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/20/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/20/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Python doc links</title>
        <description>&lt;p&gt;Python 2&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/argparse.html&quot;&gt;15.4 - argparse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/logging.html&quot;&gt;15.7 - logging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/threading.html&quot;&gt;16.2 - threading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/multiprocessing.html&quot;&gt;16.6 - multiprocessing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/mmap.html&quot;&gt;16.7 - mmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python 3&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/library/argparse.html&quot;&gt;16.4 - argparse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/library/logging.html&quot;&gt;16.6 - logging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/library/threading.html&quot;&gt;17.1 - threading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/library/multiprocessing.html&quot;&gt;17.2 - multiprocessing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/library/asyncio.html&quot;&gt;18.5 - asyncio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.5/library/mmap.html&quot;&gt;18.9 - mmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 20 Oct 2015 23:33:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/20/python-docs.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/20/python-docs.html</guid>
        
        <category>python</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>SIGINT clean handling in Python</title>
        <description>&lt;p&gt;This is #1 in the series “It seems to be hard to make Python robust”. A robust program
won’t crash malfunction when ctrl-c is pressed, it will abort down clealy if possible.
This is important with multiprocessing programs, because naive code will actually hang
when you try to interrupt it with ctrl-c.&lt;/p&gt;

&lt;p&gt;SIGINT (the exception raised when you press ctrl-c) will raise an exception when
I/O operations return. This is pretty annoying. This happens even on time.sleep().&lt;/p&gt;

&lt;p&gt;The way around this to catch ctrl-c is to install a handler, and put try blocks around
IO operations. Real code won’t ignore IOError like this, this is just a sample.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# sigint-clean.py&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# A SIGINT will cause an I/O operation to raise exceptions on return. This happens&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# even on Windows. This means even with a ctrl-c handler, you must wrap I/O calls&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# in a try/catch IOError block and check for interrupted. Annoying&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;signal&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;catch_sigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caught_sigint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;note_sigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caught_sigint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__enter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldsigint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note_sigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__exit__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldsigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caught_sigint&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catch_sigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;got_sigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;got_sigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Caught SIGINT!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# without this try/except, you&amp;#39;ll get an IOError when ctrl-c pressed&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;IOError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the other other answer is to write your serious programs in C++ (or maybe Go)? I still
like Python, but the effort to get to silky smooth reliability is erasing all the gains from
using Python in the first place. The answer of course is to make C++ as easy to use as Python.
That’s not a language issue, it’s an environment/packages issue.&lt;/p&gt;

&lt;p&gt;Perl, Python and R should give incredible credit to CTAN (Comprehensive Tex Archive Network) for
blazing the trail. That’s the real reason Perl became successful. Python lives more on its own
merits but would still be somewhat neutered without PyPI.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Oct 2015 13:00:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/17/sigint-clean-handling-python.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/17/sigint-clean-handling-python.html</guid>
        
        <category>python</category>
        
        <category>exception</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://rystsov.info/2015/09/16/how-paxos-works.html&quot;&gt;A memo on how Paxos works&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://darksi.de/d.sea-of-nodes/&quot;&gt;Sea of nodes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/warriorguo/zertcore5&quot;&gt;zertcore5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://casual-effects.com/markdeep/&quot;&gt;Markdeep&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/showcases/package-managers&quot;&gt;Package Managers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.elbeno.com/blog/?p=1254&quot;&gt;C++11 compile-time string hashing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://readthedocs.org/&quot;&gt;Read The Docs&lt;/a&gt; and repo &lt;a href=&quot;https://github.com/rtfd/readthedocs.org&quot;&gt;rtfd/readthedocs.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sphinx-doc.org/&quot;&gt;Sphinx&lt;/a&gt; Python Documentation Generator.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docutils.sourceforge.net/rst.html&quot;&gt;reStructuredText&lt;/a&gt; and &lt;a href=&quot;http://sphinx-doc.org/rest.html&quot;&gt;reStructuredText Primer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PyPI&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pip.readthedocs.org/en/stable/reference/pip_install/&quot;&gt;pip install&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jfrog.com/confluence/display/RTF/PyPI+Repositories&quot;&gt;PyPI Repositories&lt;/a&gt;. Artifactory can be a PyPI repository&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/18052217/how-to-create-local-own-pypi-repository-index-without-mirror&quot;&gt;how to create local own pypi repository index without mirror?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/pypiserver&quot;&gt;pypiserver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pythonhosted.org/Basket/&quot;&gt;Basket - a local static PyPI repository builder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bitofcheese.blogspot.com/2013/05/local-pypi-options.html&quot;&gt;Local PyPI Options&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/devpi&quot;&gt;devpi 2.1.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 16 Oct 2015 23:55:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/16/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/16/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>More quorums</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/otoolep/hraftd&quot;&gt;hraftd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/goraft/raftd&quot;&gt;raftd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hashicorp/raft&quot;&gt;Hashicorp Raft&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rystsov.info/2015/09/16/how-paxos-works.html&quot;&gt;A memo on how Paxos works&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rystsov.info/2015/10/09/epaxos700.html&quot;&gt;EPaxos, transactions and the next 700 Paxos systems&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 23:50:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/13/more-quorums.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/13/more-quorums.html</guid>
        
        <category>consensus</category>
        
        <category>quorum</category>
        
        <category>go</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Blogs to look at</title>
        <description>&lt;p&gt;These are interesting blogs to study.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bitquabit.com/page/projects/&quot;&gt;bitquabit&lt;/a&gt; and &lt;a href=&quot;https://bitbucket.org/bpollack/blag&quot;&gt;source code&lt;/a&gt;. Look at revision history to make sense of it.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 23:46:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/10/13/blogs-to-look-at.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/10/13/blogs-to-look-at.html</guid>
        
        <category>python</category>
        
        <category>blog</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Current work links</title>
        <description>&lt;p&gt;Python docs&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/functions.html&quot;&gt;2. Built-in functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/exceptions.html#exceptions.Exception&quot;&gt;6. Built-in exceptions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/signal.html&quot;&gt;17.4. signal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python snippets&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ianlewis.org/en/dynamically-adding-method-classes-or-class-instanc&quot;&gt;Dynamically Adding a Method to Classes or Class Instances in Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://igorsobreira.com/2011/02/06/adding-methods-dynamically-in-python.html&quot;&gt;Adding methods dynamically in Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/972/adding-a-method-to-an-existing-object&quot;&gt;Adding a Method to an Existing Object&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3232613/how-to-stop-sigint-being-passed-to-subprocess-in-python&quot;&gt;How to stop SIGINT being passed to subprocess in python?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://andrewbrookins.com/tech/how-to-get-the-name-of-the-class-of-a-decorated-method-in-python/&quot;&gt;Python: How to tell what class a decorated method is in at runtime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/8804830/python-multiprocessing-pickling-error&quot;&gt;Python multiprocessing pickling error&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/842557/how-to-prevent-a-block-of-code-from-being-interrupted-by-keyboardinterrupt-in-py&quot;&gt;How to prevent a block of code from being interrupted by KeyboardInterrupt in Python?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://noswap.com/blog/python-multiprocessing-keyboardinterrupt&quot;&gt;Python: Using KeyboardInterrupt with a Multiprocessing Pool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1408356/keyboard-interrupts-with-pythons-multiprocessing-pool&quot;&gt;Keyboard Interrupts with python’s multiprocessing Pool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python articles&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sebastianraschka.com/Articles/2014_multiprocessing_intro.html&quot;&gt;An introduction to parallel programming:using Python’s multiprocessing module&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rafekettler.com/magicmethods.html&quot;&gt;A Guide to Python’s Magic Methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimmaniac.com/blog/codejunkie/safe-use-of-unix-signals-with-multiprocessing-module-in-python/&quot;&gt;Safe use of unix signals with multiprocessing module in python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jtushman.github.io/blog/2014/01/14/python-%7C-multiprocessing-and-interrupts/&quot;&gt;Python Multiprocessing and Interrupts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://migrateup.com/python-concurrency-story-pt1/#&quot;&gt;The Python Concurrency Story, Part 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://migrateup.com/python-concurrency-story-pt2/#&quot;&gt;The Python Concurrency Story, Part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.python.org/moin/Concurrency/&quot;&gt;Concurrency (Python Wiki)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python&quot;&gt;Python Multithreading Tutorial: Concurrency and Parallelism&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bogotobogo.com/python/Multithread/python_multithreading_Event_Objects_between_Threads.php&quot;&gt;Multithreading - Event Objects between Threads&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://m7i.org/tutorials/python-event-queue-concurrency-modeling/&quot;&gt;Making an event queue in python: a concurrency and modeling tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://effbot.org/zone/thread-synchronization.htm&quot;&gt;Thread Synchronization Mechanisms in Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://glyph.twistedmatrix.com/2014/02/unyielding.html&quot;&gt;Unyielding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python Videos&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HTLu2DFOdTg&quot;&gt;Python’s Class Development Toolkit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=MCs5OvhV9S4&quot;&gt;David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Distributed systems&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stevenpoitras.com/the-nutanix-bible/&quot;&gt;The Nutanix Bible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ec2/instance-types/&quot;&gt;Amazon EC2 Instances&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://progrium.com/blog/&quot;&gt;Progrium (Jeff Lindsay)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://book.mixu.net/distsys/single-page.html&quot;&gt;Distributed systems for fun and profit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.empathybox.com/post/19574936361/getting-real-about-distributed-system-reliability&quot;&gt;Getting Real About Distributed System Reliability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://static.usenix.org/publications/login/2012-02/pdfs/Chansler.pdf&quot;&gt;Data Availability and Durability with the Hadoop Distributed File System&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pbs.cs.berkeley.edu/#demo&quot;&gt;PBS: Probabilistically Bounded Staleness&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn589797.aspx&quot;&gt;Sharding Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://thrift.apache.org/&quot;&gt;Apache Thrift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://avro.apache.org/&quot;&gt;Apache Avro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tagide.com/blog/academia/research-in-programming-languages/&quot;&gt;Research in Programming Languages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.dreamsongs.com/RiseOfWorseIsBetter.html&quot;&gt;The Rise of Worse is Better&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nichol.as/zeromq-an-introduction&quot;&gt;ZeroMQ an introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://queues.io/&quot;&gt;Queues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 09 Oct 2015 07:26:00 -0700</pubDate>
        <link>http://neurocline.github.io/programming/2015/10/09/work-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/programming/2015/10/09/work-links.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Python: threading and multiprocessing</title>
        <description>&lt;p&gt;The basic threading model in Python is extremely simple.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# simmple thread example&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I am thread %d&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I am not a thread&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Python threads have some advantages and disadvantages, and they spring from the same source;
you can do threads, but only one thread can execute Python code at a time. There are still
big advantages to using threads, but you can’t take advantage of multiple processors/cores.&lt;/p&gt;

&lt;p&gt;Why use threads? Threads are still useful for simplifying complex flows. Events are better,
but event processing has a higher minimum of complexity.&lt;/p&gt;

&lt;p&gt;Threads are also very useful for I/O; the I/O is not done in Python code, and I/O calls often
are waiting on hardware. This means that you can have multiple threads doing I/O and all of them
can make parallel progress.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Sep 2015 15:12:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/27/python-threading-and-multiprocessing.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/27/python-threading-and-multiprocessing.html</guid>
        
        <category>python</category>
        
        <category>threads</category>
        
        <category>multiprocessing</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Engineering at scale</title>
        <description>&lt;p&gt;Twitter talk at &lt;a href=&quot;http://www.atscaleconference.com/&quot;&gt;@Scale 2015&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://spectrum.ieee.org/view-from-the-valley/computing/software/twitters-tips-for-making-software-engineers-more-efficient&quot;&gt;Twitter’s Tips for Making Software Engineers More Efficient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unpacking this a bit:&lt;/p&gt;

&lt;p&gt;Peter Seibel, currently the tech lead of Twitter’s engineering effectiveness group, is the author of two books&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Coders At Work, interviews with a few dozen influential programmers&lt;/li&gt;
  &lt;li&gt;Practical Common Lisp: two editions, 2005 and 2012&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He tried to start a new online programmer magazine in 2010 called &lt;a href=&quot;&quot;&gt;Code Quarterly&lt;/a&gt; but &lt;a href=&quot;https://gigamonkeys.wordpress.com/2011/10/17/end-of-the-line-for-code-quarterly/&quot;&gt;pulled the plug on it&lt;/a&gt; a year and change later, which is too bad, because there is still a need for something like this.&lt;/p&gt;

&lt;p&gt;In a nutshell, here’s what he said about concerted efforts to make engineers more efficient&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if you have 1 to 10 people, don’t devote anyone&lt;/li&gt;
  &lt;li&gt;at 100 people, you need 2 people devoted to tools and the like, and those 2 will be as effective as 101 engineers&lt;/li&gt;
  &lt;li&gt;at 1000, you need 255 to support the rest, and they’ll be as effective as 1400&lt;/li&gt;
  &lt;li&gt;at 10,000, you need 1/3rd of your group devoted to this&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Twitter has 2,000 engineers. For what it does, that seems excessive.&lt;/p&gt;

&lt;p&gt;Facebook has 10,000 engineers now. Holy moley.&lt;/p&gt;

&lt;p&gt;Apple had around 12,000 engineers in 2014 in the US, and an unknown amount outside the US.
Total number probably around 16,000 (at least so says LinkedIn).&lt;/p&gt;

&lt;p&gt;Google has about 28,000 engineers. Current headcount as of June 30 2015 is 57,148. As of December 31 2014, total headcount was 53,600 with 20,832 in R&amp;amp;D and 7,637 in operations.&lt;/p&gt;

&lt;p&gt;Samsung has about 40,00 engineers (as of 2013). Still less than Microsoft, although Samsung
has more total employees.&lt;/p&gt;

&lt;p&gt;Microsoft has around 55,000 engineers.
http://news.microsoft.com/facts-about-microsoft/#EmploymentInfo&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arstechnica.com/gadgets/2014/09/samsung-has-more-employees-than-google-apple-and-microsoft-combined/&quot;&gt;Samsung has more employees than Google, Apple, and Microsoft combined&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon has more than 1000, but can’t find numbers. Low thousands of software engineers.&lt;/p&gt;

&lt;p&gt;IBM probably still has 50,000 software engineers?&lt;/p&gt;

&lt;p&gt;Oracle probably has 10,000 or more&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Sep 2015 15:12:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/27/engineering-at-scale.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/27/engineering-at-scale.html</guid>
        
        <category>process</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Peeking into Python</title>
        <description>&lt;p&gt;There are a number of ways to peek into Python code and data.&lt;/p&gt;

&lt;h2 id=&quot;built-in-functions-for-output&quot;&gt;Built-in functions for output&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.python.org/2/library/functions.html&quot;&gt;built-in primitives&lt;/a&gt; that are relevant are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;dir()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;vars()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;dir(object)&lt;/code&gt; shows all the attributes for the object. Of course, not all objects
have attributes. It’s really made for use at an interactive prompt, not as
an in-code method. Basically, it either calls &lt;code&gt;__dir__()&lt;/code&gt;, or it looks at
the &lt;code&gt;__dict__&lt;/code&gt; attribute and shows some of the information.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;repr(object)&lt;/code&gt; returns a printable representation of an object. Again, this sounds
good until you use it, because anything other than built-in types just returns
a string with the class name and the address of the object. Still, it’s the gateway
to something useful if you also add &lt;code&gt;__repr__()&lt;/code&gt; methods to your classes, because &lt;code&gt;repr()&lt;/code&gt;
will call the &lt;code&gt;__repr__&lt;/code&gt; method if it exists. Of course, the downside is that you need
a systematic and consistent approach, and you have to write that code yourself.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vars(object)&lt;/code&gt; is more useful for printing than &lt;code&gt;dir&lt;/code&gt; - it returns
the &lt;code&gt;__dict__&lt;/code&gt; attribute, which means that if you call &lt;code&gt;print(vars(object))&lt;/code&gt; you’ll
see keys and values together, whereas &lt;code&gt;dir()&lt;/code&gt; just shows the keys.&lt;/p&gt;

&lt;h2 id=&quot;useful-classes-for-output&quot;&gt;Useful classes for output&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;pprint&lt;/code&gt; module sounds useful until you use it. Its utility is largely restricted
to pretty-printing, it doesn’t give you extra disassembly powers on its own. But
see &lt;a href=&quot;https://docs.python.org/2/library/pprint.html&quot;&gt;pprint–Data pretty printer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.python.org/2/library/inspect.html&quot;&gt;&lt;code&gt;inspect&lt;/code&gt;&lt;/a&gt; module is a lot more useful, but it doesn’t do output, it just lets
you get information about objects.&lt;/p&gt;

&lt;h2 id=&quot;built-in-functions-for-introspection&quot;&gt;Built-in functions for introspection&lt;/h2&gt;

&lt;p&gt;Some built-ins are useful for testing objects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;type&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;isinstance&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;hasattr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;type(object)&lt;/code&gt; returns a string indicating the type of the object. As such, it can
be used for both output and testing.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isinstance(object, classinfo)&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;object&lt;/code&gt; is an instance
of &lt;code&gt;classinfo&lt;/code&gt; (including inheritance). In general, it’s more appropriate to use
&lt;code&gt;isinstance&lt;/code&gt; for type testing because it does handle inheritance.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;types&lt;/code&gt; module is useful for both &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;isintance&lt;/code&gt; use. And type
output needs this kind of introspection so it knows what it should print.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/library/l-pyint/&quot;&gt;Guide to Python introspection&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Sep 2015 20:47:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/24/peeking-into-python.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/24/peeking-into-python.html</guid>
        
        <category>python,</category>
        
        <category>debugging</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

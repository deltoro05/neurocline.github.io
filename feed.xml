<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 18 Sep 2015 19:49:27 -0700</pubDate>
    <lastBuildDate>Fri, 18 Sep 2015 19:49:27 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Zig-zag encoding</title>
        <description>&lt;p&gt;Encoding numbers, these abstract counting things, as physical entities requires choices. Ignoring the whole
religious war about big-endian versus little-endian, or the long-since won battles about two’s complement
versus anything else, we are left with “how many bits/bytes do we use?”. If you pick a fixed-length, then
you limit the range of the number you store, and you potentially waste a lot of space.&lt;/p&gt;

&lt;p&gt;Variable length numbers are a compromise - you have either an explicit length prefix, or you have some
sentinel that indicates the end of the number. However, you’re faced with a challenge when it comes to
negative numbers - two’s complement is good for fixed-length numbers, but you can’t tell the difference
between a large positive number and a small negative number, leaving all negative numbers to be encoded
as giant variable length strings.&lt;/p&gt;

&lt;p&gt;Google Protocol Buffers, for positive numbers, uses what they call Varint encoding, where there is a
sentinel: numbers are stored in little-endian format, 7 bits per byte, and the most-significant bit
is 0 for the last byte and 1 for all other bytes.&lt;/p&gt;

&lt;p&gt;Reading and writing Varint-encoded numbers looks like this (warning: no checking! not production code!):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For signed numbers, it does what they call zig-zag encoding to interleave positive and negative numbers
so that small negative numbers are still stored with a small number of bytes.&lt;/p&gt;

&lt;p&gt;This actually stores an absolute value of the number with the sign bit stored in the least-significant bit
of the first byte. The math looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zigzag = (n &amp;lt;&amp;lt; 1) ^ (n &amp;gt;&amp;gt; (BIT_WIDTH - 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;BIT_WIDTH&lt;/code&gt; is the number of bits in your fixed-width number (32-bit, 64-bit etc). Remember that
arithmetic shift replicates the sign bit, so shifting right like this will create a number that is &lt;code&gt;000...00&lt;/code&gt;
for positive numbers and &lt;code&gt;111...11&lt;/code&gt; for negative numbers.&lt;/p&gt;

&lt;p&gt;Reading and writing zig-zag encoded numbers looks like this (warning: no checking! not production code!):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_zigzag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BIT_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from_zigzag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A real codebase would combine both together, but it would also handle buffer over/underrun too.&lt;/p&gt;

&lt;p&gt;Note that it would be possible to store negative numbers with a smaller number of bytes with a little more sophistication,
and not require zigzag encoding: you store the number of bytes required by the absolute magnitude of the number, and on
reading, you pick up the MSB of the sequence of stored bytes and recreate the number. I suspect that zig-zag encoding is
used because the amount of code for encoding and decoding is actually less when expressed in a high-level language, and
perhaps faster even in assembly.&lt;/p&gt;

&lt;p&gt;The code listed above could be made faster by operating on the data in 32-bit or 64-bit chunks. It would be interesting
to time naive versus sophisticated code to see how much it’s worth doing it in a more complex fashion.&lt;/p&gt;

&lt;p&gt;As a gateway to more sophisticated methods, look at Apache Orc: &lt;a href=&quot;https://orc.apache.org/docs/run-length.html&quot;&gt;Run Length Encoding&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Sep 2015 17:12:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/17/zig-zag-encoding.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/17/zig-zag-encoding.html</guid>
        
        <category>algorithms</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Distributed Databases</title>
        <description>&lt;p&gt;What are our options if we want a distributed, fault-tolerant database?&lt;/p&gt;

&lt;h2 id=&quot;mysql-cluster-ndb&quot;&gt;MySQL Cluster (NDB)&lt;/h2&gt;

&lt;p&gt;It’s very widely used at scale.&lt;/p&gt;

&lt;h2 id=&quot;cassandra&quot;&gt;Cassandra&lt;/h2&gt;

&lt;p&gt;Cassandra was written initially at Facebook, strongly influenced by Dynamo,
Amazon’s key/value store. It was then moved to be an Apache projec in 2010. Cassandra has been
used at very large scale. The main challenge is that it has an eventual consistency model, which
can be challenging to work with (Facebook moved from Cassandra to HBase due to this).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://cassandra.apache.org/&quot;&gt;Cassandra&lt;/a&gt; home page.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&quot;&gt;Dynamo: Amazon’s Highly Available Key-value Store&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Cassandra&quot;&gt;Apache Cassandra&lt;/a&gt; page on Wikipedia.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.datacenterknowledge.com/archives/2014/07/31/hulu-cassandra-vs-hbase-vs-riak/&quot;&gt;Hulu Chooses Cassandra Over HBase and Riak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;riak&quot;&gt;Riak&lt;/h2&gt;

&lt;p&gt;Riak also follows the thread from Dynamo, and is a key-value store written in Erlang. Riak can do in-memory
or disk storage, or both. Riak is very fault-tolerant but not as fast as something like Redis, leading to the
idea that perhaps Riak is the back-end for a Redis cache?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://basho.com/products/&quot;&gt;Riak&lt;/a&gt; home page and &lt;a href=&quot;http://docs.basho.com/riak/latest/&quot;&gt;docs&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Riak&quot;&gt;Riak&lt;/a&gt; page on Wikipedia.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://compositecode.com/2013/02/10/riak-redis/&quot;&gt;Not So Versus, Riak Versus Redis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://inaka.net/blog/2011/08/25/when-to-use-riak/&quot;&gt;My Year of Riak&lt;/a&gt; from 2011.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.basho.com/riak/1.3.1/references/appendices/comparisons/Riak-Compared-to-Cassandra/&quot;&gt;Riak Compared to Cassandra&lt;/a&gt; potential bias since this is from Riak.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://basho.com/posts/technical/riak-vs-cassandra/&quot;&gt;Riak versus Cassandra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hyperdex&quot;&gt;HyperDex&lt;/h2&gt;

&lt;p&gt;HyperDex is a research project from Cornell turned commercial. I think this project started in 2010, but
it seemed to be at a usable state by 2012.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://hyperdex.org/&quot;&gt;HyperDex&lt;/a&gt; home page and &lt;a href=&quot;http://hyperdex.org/papers/&quot;&gt;papers&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://hyperdex.org/papers/hyperdex.pdf&quot;&gt;HyperDex: A Distributed, Searchable Key-Value Store&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.cornell.edu/people/egs/&quot;&gt;Emin Gün Sirer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rescrv.net/&quot;&gt;Robert Escriva&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HyperDex&quot;&gt;HyperDex&lt;/a&gt; page on Wikipedia&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h2&gt;

&lt;p&gt;We should not use MongoDB.&lt;/p&gt;

&lt;h2 id=&quot;hbase&quot;&gt;HBase&lt;/h2&gt;

&lt;p&gt;HBase is implementation of Google’s BigTable started by Powerset. It moved to the Apache Foundation in 
2009, and is part of the Hadoop project; in fact, it runs on top of the Hadoop File System.&lt;/p&gt;

&lt;p&gt;Facebook started using HBase in 2010 for their new messaging platform, and have now forked it into
HydraBase. One key thing was the switch to RAFT for the consensus algorithm.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.facebook.com/posts/321111638043166/hydrabase-the-evolution-of-hbase-facebook/&quot;&gt;HydraBase – The evolution of HBase@Facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;redis-cluster&quot;&gt;Redis Cluster&lt;/h2&gt;

&lt;p&gt;Not sure.&lt;/p&gt;

&lt;h2 id=&quot;cockroach-db&quot;&gt;Cockroach DB&lt;/h2&gt;

&lt;p&gt;This will be awesome someday&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cockroachlabs.com/&quot;&gt;Cockroach Labs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cockroachdb&quot;&gt;cockroachdb&lt;/a&gt; GitHub organization.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.wired.com/2014/07/cockroachdb/&quot;&gt;Out in the Open: Ex-Googlers Building Cloud Software That’s Almost Impossible to Take Down&lt;/a&gt; 2014 Wired Article&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;general-notes&quot;&gt;General notes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://aphyr.com/tags/Jepsen&quot;&gt;Call Me Maybe - Jepsen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-ajoux.pdf&quot;&gt;Challenges to Adopting Stronger Consistency at Scale&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.nahurst.com/visual-guide-to-nosql-systems&quot;&gt;Visual Guide to NoSQL Systems&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis&quot;&gt;Cassandra vs MongoDB…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://book.mixu.net/distsys/single-page.html&quot;&gt;Distributed systems for fun and profit&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Sep 2015 13:06:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/17/distributed-databases.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/17/distributed-databases.html</guid>
        
        <category>database,</category>
        
        <category>distributed</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Notion, Web-based content editor</title>
        <description>&lt;p&gt;So, this is interesting&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.notion.so/&quot;&gt;Notion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, it’s yet another appealing walled garden. I can create a lot of content
on their site - well, my private section on their site.&lt;/p&gt;

&lt;p&gt;I don’t know if I want to dump a lot of data into something that will probably go away.
But it is very slick.&lt;/p&gt;

&lt;p&gt;Also, the name Notion is very heavily used.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Sep 2015 19:28:00 -0700</pubDate>
        <link>http://neurocline.github.io/blog/2015/09/14/notion.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/blog/2015/09/14/notion.html</guid>
        
        <category>writing</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Recent Links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://enterprisewebbook.com/&quot;&gt;Enterprise Web Development: From Desktop to Mobile&lt;/a&gt;. This is an online version of the &lt;a href=&quot;http://www.amazon.com/Enterprise-Web-Development-Building-Applications/dp/1449356818&quot;&gt;print book&lt;/a&gt;. I think the whole book is online even though the table of contents only points to prolog and epilog material. For example, I ran across &lt;a href=&quot;http://enterprisewebbook.com/ch8_websockets.html&quot;&gt;Chapter 8&lt;/a&gt; on WebSockets while doing a Google search, and once I looked at the &lt;a href=&quot;https://github.com/Farata/EnterpriseWebBook&quot;&gt;GitHub source&lt;/a&gt; for the book, I was able to create the other URLs. I don’t think the text is hidden on purpose.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.methods.co.nz/asciidoc/&quot;&gt;AsciiDoc&lt;/a&gt; has been used to write a number of technical books. Maybe I should try this out. It appears to be a more human-writable version of DocBook. Still, this is more useful to writing structured docs than anything else, I bet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://technologyconversations.com/2015/09/08/service-discovery-zookeeper-vs-etcd-vs-consul/&quot;&gt;Service Discovery: Zookeeper vs etcd vs Consul&lt;/a&gt;. This is in the context of Docker.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codergears.com/Blog/?p=1069&quot;&gt;XRay the LLVM\Clang source code&lt;/a&gt; is interesting, but mostly because I should be looking more closely at tools like &lt;a href=&quot;http://www.cppdepend.com/&quot;&gt;CppDepend&lt;/a&gt; and &lt;a href=&quot;http://cppdepend.com/cqlinq&quot;&gt;CQLinq&lt;/a&gt;, which lets you make LINQ calls on the code database that CppDepend builds up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://libcox.net/&quot;&gt;Libcox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/RaetProtocol/raet&quot;&gt;RAET: Reliable Asynchronous Event Transport Protocol&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kamalmarhubi.com/blog/2015/09/06/kubernetes-from-the-ground-up-the-api-server/&quot;&gt;Kubernetes from the ground up: the API server&lt;/a&gt;. Second in a series about &lt;a href=&quot;http://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;, an open-source cluster manager (from Google). It uses Etcd.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.allthingsdistributed.com/2015/07/under-the-hood-of-the-amazon-ec2-container-service.html&quot;&gt;Under the Hood of Amazon EC2 Container Service&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://adetante.github.io/articles/service-discovery-with-docker-1/&quot;&gt;Service discovery with Docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://book.mixu.net/distsys/single-page.html&quot;&gt;Distributed systems for fun and profit&lt;/a&gt;. A book on distributed systems that’s quite good as an introduction to the concepts and challenges.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mixu/markdown-styles&quot;&gt;Mixu/markdown&lt;/a&gt; converts Markdown to HTML. This and &lt;a href=&quot;https://github.com/mixu/ghost-render&quot;&gt;Ghost&lt;/a&gt; look better than Jekyll.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bost.ocks.org/mike/algorithms/&quot;&gt;Visualizing Algorithms&lt;/a&gt;. Awesome.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/276782/&quot;&gt;Linkers&lt;/a&gt; 20 part series by Ian Lance Taylor for LWN.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://insights.sei.cmu.edu/sei_blog/2015/09/managing-software-complexity-in-models.html&quot;&gt;Managing Software Complexity in Models&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arxiv.org/pdf/1411.1001v2.pdf&quot;&gt;How to Elect a Leader Faster than a Tournament&lt;/a&gt;. Significant advance in leader election.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/&quot;&gt;Dark corners of Unicode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bulldozer00.com/2015/09/14/stack-heap-pool/&quot;&gt;Stack, Heap, Pool&lt;/a&gt;. This “shows” that pools are 33x faster than stack allocation. However, it’s cheating. Object initialization is being billed to
“pool” construction, which is all the time.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Sep 2015 11:32:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/14/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/14/recent-links.html</guid>
        
        <category>service,</category>
        
        <category>microservice</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Bazel, Google build system</title>
        <description>&lt;p&gt;In a wonderful sense of - irony? - Google has made a cross-platform build system that supports
Linux and OS X, but not (yet) Windows.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://google-opensource.blogspot.com/2015/09/building-build-system-bazel-reaches-beta.html&quot;&gt;Building a Build System: Bazel reaches Beta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bazel.io/&quot;&gt;Bazel&lt;/a&gt; home page.&lt;/p&gt;

&lt;p&gt;Bazel &lt;a href=&quot;https://github.com/bazelbuild/bazel&quot;&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According to the released info, Bazel is now used to build most software at Google. Someday we’ll
see unification on build tools? We still have independent ecosystems.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 19:54:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/09/bazel-build-system.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/09/bazel-build-system.html</guid>
        
        <category>build</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>C++ links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.enkisoftware.com/devlogpost-20150822-1-Implementing_a_lightweight_task_scheduler.html&quot;&gt;Implementing a lightweight task scheduler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.enkisoftware.com/devlogpost-20150905-1-Internals_of_a_lightweight_task_scheduler.html&quot;&gt;Internals of a lightweight task scheduler&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 17:11:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/06/c++-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/06/c++-links.html</guid>
        
        <category>c++,</category>
        
        <category>scheduler</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Git links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://mikegerwitz.com/papers/git-horror-story&quot;&gt;A Git Horror Story: Repository Integrity With Signed Commits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dllhell.net/2012/03/30/on-signing-git-tags-on-windows/&quot;&gt;On Signing Git Tags on Windows&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 16:53:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/06/git-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/06/git-links.html</guid>
        
        <category>git</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Movies I want to watch</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.oblivionisland.com/&quot;&gt;Oblivion Island&lt;/a&gt; released in the US by &lt;a href=&quot;http://www.funimation.com/shows/oblivion-island/home&quot;&gt;Funimation&lt;/a&gt;.
Japanese anime that blends Japanese folklore and Western idioms.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 16:07:00 -0700</pubDate>
        <link>http://neurocline.github.io/blog/2015/09/06/movies-i-want-to-watch.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/blog/2015/09/06/movies-i-want-to-watch.html</guid>
        
        <category>movies</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Not really a blogger</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/JekyllBlogging.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Several times I’ve started a blog and been unsatisfied with the results. Or rather, I want
something more than a blog, more than recording moments.&lt;/p&gt;

&lt;p&gt;I want a place to record things I learn, for two reasons - for later reference by me, and
because sometimes what I learn is also useful to others. I’ve been using blogging software
because that’s what was at hand -first Wordpress and then Jekyll. But Jekyll’s not what I
want either. Perhaps I need to write something.&lt;/p&gt;

&lt;p&gt;I like the idea of Jekyll letting me just write in text, with a little markup. I want
more control than Jekyll gives, because I want more control than what HTML5 gives. And
that’s one challenge, because unless I go far off the beaten path, whatever I make needs
to be accessed through a web browser.&lt;/p&gt;

&lt;p&gt;I want to gather and present large amounts of information. Half book, half magazine, half
blog, half notebook. Search is important. But so are graphics, and I mean diagrams, not
just photos for color or art purposes.&lt;/p&gt;

&lt;p&gt;So&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bend &lt;a href=&quot;https://www.drupal.org/&quot;&gt;Drupal&lt;/a&gt; to the task, or &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;, or Turbogears, etc&lt;/li&gt;
  &lt;li&gt;microframework like Bottle or Flask&lt;/li&gt;
  &lt;li&gt;write my own&lt;/li&gt;
  &lt;li&gt;maybe something using WebGL instead of HTML?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think something in C++ would be interesting. So few web frameworks in C++, I just see&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://cppcms.com/wikipp/en/page/main&quot;&gt;CppCMS — The C++ Web Development Framework&lt;/a&gt; and see &lt;a href=&quot;https://en.wikipedia.org/wiki/CppCMS&quot;&gt;CppCMS&lt;/a&gt; page on Wikipedia.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pocoproject.org/&quot;&gt;POCO Project&lt;/a&gt; and see &lt;a href=&quot;https://en.wikipedia.org/wiki/POCO_C%2B%2B_Libraries&quot;&gt;POCO C++ Libraries&lt;/a&gt; page on Wikipedia.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tntnet.org/&quot;&gt;TntNet&lt;/a&gt; and see &lt;a href=&quot;https://en.wikipedia.org/wiki/Tntnet&quot;&gt;Tntnet&lt;/a&gt; page on Wikipedia.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I remember reading about something else recently, too.&lt;/p&gt;

&lt;p&gt;The main issue, now that I’m looking at web frameworks, is that none of them is what I want.
I don’t want to pump out huge amounts of content written by many people. I want something
better than a Wiki but a little more dynamic than a book.&lt;/p&gt;

&lt;p&gt;And this is a huge distraction from what I really want to be doing. This has the echo of Knuth
spending ten years writing TeX because he wanted a better way to publish math-heavy books.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 14:09:00 -0700</pubDate>
        <link>http://neurocline.github.io/blog/2015/09/06/not-a-blogger.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/blog/2015/09/06/not-a-blogger.html</guid>
        
        <category>blog</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Recent Links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://microservices.io/index.html&quot;&gt;Microservice architecture patterns and best practices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://1wt.eu/projects/libslz/&quot;&gt;Stateless ZIP library - SLZ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://events.linuxfoundation.org/sites/events/files/slides/bpetkov-x86-hacks.pdf&quot;&gt;x86 Instruction Encoding&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://s1.epi.org/files/2015/understanding-productivity-pay-divergence-final.pdf&quot;&gt;UNDERSTANDING THE HISTORIC DIVERGENCE BETWEEN PRODUCTIVITY AND A TYPICAL WORKER’S PAY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cockroachlabs.com/&quot;&gt;Cockroach Labs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jemalloc/jemalloc&quot;&gt;jemalloc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/iogf/vy&quot;&gt;vy&lt;/a&gt;. vim-like editor written in python&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/simongog/sdsl-lite&quot;&gt;SDSL&lt;/a&gt;. Succinct Data Structure Library&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zsaleeba/picoc&quot;&gt;picoc&lt;/a&gt;. A very small C interpreter.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aphyr.com/posts/327-call-me-maybe-mariadb-galera-cluster&quot;&gt;Call me Maybe: MariaDB Galera Cluster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2015-09-04-lets-build-dispatch_queue.html&quot;&gt;Let’s Build dispatch_queue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://libsound.io/&quot;&gt;libsoundio&lt;/a&gt;. cross-platform audio input and output&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mxe.cc/&quot;&gt;MXE&lt;/a&gt;. M cross environment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nats.io/&quot;&gt;NATS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nats-io/gnatsd&quot;&gt;gnatsd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;Literate&quot;&gt;Literate&lt;/a&gt;. A Modern Literate Programming System&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://vega.github.io/&quot;&gt;Vega&lt;/a&gt;. A visualization grammar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.grammaticalframework.org/&quot;&gt;Grammatical Framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tomasz.janczuk.org/2015/09/from-kafka-to-zeromq-for-log-aggregation.html&quot;&gt;From Kafka to ZeroMQ for real-time log aggregation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://depiesml.wordpress.com/2015/09/03/learn-by-implementation-k-nearest-neighbor/&quot;&gt;Learn By Implementation – K-Nearest Neighbor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://win-builds.org/doku.php&quot;&gt;Win-builds&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Sep 2015 17:04:00 -0700</pubDate>
        <link>http://neurocline.github.io/dev/2015/09/04/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/09/04/recent-links.html</guid>
        
        <category>microservice,</category>
        
        <category>algorithms</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

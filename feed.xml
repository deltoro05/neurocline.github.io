<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 25 May 2015 00:23:23 -0700</pubDate>
    <lastBuildDate>Mon, 25 May 2015 00:23:23 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Cryptography links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.cryptol.net/index.html&quot;&gt;Cryptol: The Language of Cryptography&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/tqbf/be58d2d39690c3b366ad&quot;&gt;(Updated) Cryptographic Right Answers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the old version from 2009: &lt;a href=&quot;http://www.daemonology.net/blog/2009-06-11-cryptographic-right-answers.html&quot;&gt;Cryptographic Right Answers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and see &lt;a href=&quot;http://www.reddit.com/r/programming/comments/370l3p/cryptographic_right_answers_from_thomas_ptacek/&quot;&gt;reddit thread&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=9593916&quot;&gt;Hacker News thread&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 24 May 2015 17:17:00 -0700</pubDate>
        <link>http://neurocline.github.io/cryptography/2015/05/24/Cryptography-Links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/cryptography/2015/05/24/Cryptography-Links.html</guid>
        
        
        <category>cryptography</category>
        
      </item>
    
      <item>
        <title>Tracing System calls</title>
        <description>&lt;h2 id=&quot;linux&quot;&gt;Linux&lt;/h2&gt;

&lt;p&gt;Tracing system calls on Linux is straightforward. The &lt;code&gt;ptrace&lt;/code&gt; API lets
one process trace all system calls made by another process, and the
command-line program &lt;code&gt;strace&lt;/code&gt; uses &lt;code&gt;ptrace&lt;/code&gt; to allow a user to do the
same.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://linux.die.net/man/1/strace&quot;&gt;strace(1)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://linux.die.net/man/2/ptrace&quot;&gt;ptrace(2)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.nelhage.com/2010/08/write-yourself-an-strace-in-70-lines-of-code/&quot;&gt;Write Yourself an Strace in 70 Lines of Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mac-os-x&quot;&gt;Mac OS X&lt;/h2&gt;

&lt;p&gt;Tracing system calls on Mac OS X is a little harder, but more powerful.
The &lt;code&gt;dtrace&lt;/code&gt; system ships with Macs starting with Mac OS X 10.5. Unlike
strace, however, support for dtrace has to be built in to programs. Mac
OS X ships with several thousand probes (the attachment points), and most
normal monitoring is covered. Brendan Gregg’s blog has a Mac OS X-specific
dtrace page, as an example, and there are other useful tutorials&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://dtrace.org/blogs/brendan/2011/10/10/top-10-dtrace-scripts-for-mac-os-x/&quot;&gt;Top 10 DTrace scripts for Mac OS X&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bignerdranch.com/blog/hooked-on-dtrace-part-1/&quot;&gt;Hooked on DTrace, part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apple added ptrace to Mac OS X, maybe. There’s a man page for it, but no
strace program for user-level use. I’ll have to try writing some code.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man2/ptrace.2.html&quot;&gt;ptrace(2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are ways to hook/override program and system functions at runtime.
These work but aren’t truly supported, so are of most use for debugging
situations.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rentzsch/mach_override&quot;&gt;mach_override&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rentzsch/mach_override&quot;&gt;mach_inject&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Amit Singh went the kernel extension approach to get access to system calls&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://osxbook.com/book/bonus/ancient/syscall/&quot;&gt;Re-routing System Calls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While there are definitely nefarious uses for this stuff, it can be used for
developers too. For example, this paper talks about rootkits, but the techniques
also make for great developer tools.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.trailofbits.com/resources/advanced_macosx_rootkits_paper.pdf&quot;&gt;Advance Mac OS X Rootkits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bsd&quot;&gt;BSD&lt;/h2&gt;

&lt;p&gt;The equivalent to ptrace on BSD is ktrace. Unfortunately, ktrace is not
available on Mac OS X. That’s annoying, because it is complementary to
DTrace, which is an awesome sysop-level tool, but does not give complete
access to all system calls. Mac OS X had ktrace in 10.4 and earlier.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=ktrace(1)&amp;amp;sektion=&quot;&gt;ktrace(1)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=ktrace&amp;amp;sektion=2&quot;&gt;ktrace(2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;

&lt;p&gt;There is the amazing Process Monitor, which traces all file and registry
actions. However, this is strictly a user-level program, you work with it through
its GUI. It’s very useful, but does not give you system-call level access from
your own source code.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kohei.us/2010/06/25/strace-equivalent-for-windows/&quot;&gt;STRACE EQUIVALENT FOR WINDOWS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a fairly new project called StraceNT. It comes with source code.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://intellectualheaven.com/default.asp?BH=STraceNT&quot;&gt;StraceNT - A System Call Tracer for Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/intellectualheaven/stracent&quot;&gt;github/intellectualheaven/stracent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dr. Memory comes with “strace for Windows” called drstrace.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/DynamoRIO/drmemory&quot;&gt;github/DynamoRIO/drmemory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.drmemory.org/strace_for_windows.html&quot;&gt;System Call Tracer (“strace”) for Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Event Tracing for Windows (ETW) is the Microsoft official technique, and has
several programs layered on top.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/ee412263.aspx&quot;&gt;Core OS Events in Windows 7, Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is Logger and LogView, also Microsoft tools&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/hardware/ff552060(v=vs.85).aspx&quot;&gt;Logger and LogViewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is NtTrace&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.howzatt.demon.co.uk/NtTrace/&quot;&gt;NtTrace - Native API tracing for Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An article&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jbremer.org/intercepting-system-calls-on-x86_64-windows/&quot;&gt;Intercepting System Calls on x86_64 Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fabricate&quot;&gt;fabricate&lt;/h2&gt;

&lt;p&gt;This is a python build tool that watches for files that have changed as a result
of running a command. It uses strace on Linux but does filetime watching on
Windows, so maybe look for how to get Python on Windows to use one of the other
file monitoring solutions?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.google.com/p/fabricate/&quot;&gt;fabricate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.google.com/p/fabricate/issues/detail?id=3&quot;&gt;fabricate issue 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tup&quot;&gt;tup&lt;/h2&gt;

&lt;p&gt;The tup build tool uses DLL injection on Windows to detect file I/O.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://gittup.org/tup/&quot;&gt;tup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ninja&quot;&gt;ninja&lt;/h2&gt;

&lt;p&gt;The ninja tool also does filesystem watching, I think.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://martine.github.io/ninja/&quot;&gt;Ninja&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;google-building-in-the-cloud&quot;&gt;Google “building in the cloud”&lt;/h2&gt;

&lt;p&gt;This is a FUSE-based approach, so not exactly tracing system calls.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://google-engtools.blogspot.com/2011/06/build-in-cloud-accessing-source-code.html&quot;&gt;Build in the Cloud: Accessing Source Code&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 24 May 2015 16:24:00 -0700</pubDate>
        <link>http://neurocline.github.io/blog/2015/05/24/Tracing-System-Calls.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/blog/2015/05/24/Tracing-System-Calls.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Git Tips</title>
        <description>&lt;p&gt;Here are some useful but less-common Git features.&lt;/p&gt;

&lt;h3 id=&quot;git-clean&quot;&gt;git clean&lt;/h3&gt;

&lt;p&gt;This removes untracked files from the working tree. Why would you do this? Let’s say
you run a build process that litters the working tree with temporary files in
dozens of folders, instead of being neat and tidy and putting it in a &lt;code&gt;build&lt;/code&gt;
folder.&lt;/p&gt;

&lt;p&gt;This will remove all untracked files, including ignored ones, and remove untracked
directories as well:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clean -d -x&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are a handful of options, but this is my preferred “make it really clean”
approach. You can use this with &lt;code&gt;git reset&lt;/code&gt; to get back to a pristine working
directory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://git-scm.com/docs/git-clean&quot;&gt;git-clean&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-pull---rebase&quot;&gt;git pull –rebase&lt;/h2&gt;

&lt;p&gt;Prefer to pull with rebasing instead of merging. Generally, your local changes
were meant to be applied to the tip of the remote repository, so why not get
in the habit of keeping your files rebased?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git pull --rebase&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is essentially the same as this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git fetch
git rebase&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also set a few entries in config so that this happens without needing
the &lt;code&gt;--rebase&lt;/code&gt; flag. To set this so &lt;code&gt;master&lt;/code&gt; branch always rebases:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git config branch.master.rebase &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or to set it up so new branches always rebase automatically:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git config --global branch.autosetuprebase always&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There will still be cases where you will want to merge, but generally this would
be an explicit step of merging a (feature) branch onto a (production) branch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://git-scm.com/docs/git-pull&quot;&gt;git-pull&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://git-scm.com/docs/git-rebase&quot;&gt;git-rebase&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;see-whats-been-cherry-picked&quot;&gt;See what’s been cherry-picked&lt;/h2&gt;

&lt;p&gt;If you have a workflow where you are cherry-picking commits from one branch to
another, it’s useful to see what has been cherry-picked. If you want to see what
has and hasn’t been cherry-picked from the current branch to &lt;code&gt;master&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git cherry -v master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This shows all commits on the current branch, prefixed with &lt;code&gt;+&lt;/code&gt; for commits
that have not yet been cherry-picked and with &lt;code&gt;-&lt;/code&gt; for commits that have
already been cherry-picked.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 May 2015 09:50:00 -0700</pubDate>
        <link>http://neurocline.github.io/git/2015/05/24/Git-Tips.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/git/2015/05/24/Git-Tips.html</guid>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Hyde For Blogs</title>
        <description>&lt;p&gt;I’m already running into cases where Jekyll gets in my way. I can either&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;live with it&lt;/li&gt;
  &lt;li&gt;write my own website template system&lt;/li&gt;
  &lt;li&gt;find something else&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While choice 2 is the answer for all software engineers in the end, I’m
trying to put that off for now. I have a few choices.&lt;/p&gt;

&lt;p&gt;First is to use Hyde. It already sounds more appealing to me than Jekyll
(for one, it’s written in Python). It looks like it handles more complex
content better. Of course, it’s a little more complex than Jekyll.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hyde.github.io&quot;&gt;Hyde: A static website generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or I could do the non-blog portions of my blog with something other than
Jekyll. For example, I want to separate real blog posts from the ones where
I’m just remembering stuff I read. Or I want to put documentation online.
I could run this, for example, and just link that from a blog page:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stevelosh.com/projects/d/&quot;&gt;d Documentation generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ll defer this for now, but I imagine I’ll redo this blog/site in something
else. I need search, for one thing.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://philipm.at/2011/jekyll_vs_hyde.html&quot;&gt;Jekyll vs. Hyde - A Comparison Of Two Static Site Generators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stevelosh.com/blog/2010/01/moving-from-django-to-hyde/&quot;&gt;Moving from Django to Hyde&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/library/wa-hyde/&quot;&gt;Build rapid and lightweight static websites with Hyde&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyde/hyde/wiki/Hyde-Powered&quot;&gt;Hyde Powered&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 24 May 2015 09:30:00 -0700</pubDate>
        <link>http://neurocline.github.io/blog/2015/05/24/Hyde-For-Blogs.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/blog/2015/05/24/Hyde-For-Blogs.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;h2 id=&quot;cmake&quot;&gt;CMake&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cmake.org/examples/&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cmake.org/runningcmake/&quot;&gt;Running CMake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source and binaries&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Kitware/CMake&quot;&gt;CMake repo on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CMake Wiki&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cmake.org/Wiki/CMake_FAQ&quot;&gt;CMake FAQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cmake.org/Wiki/CMake:How_To_Find_Libraries&quot;&gt;How To Find Libraries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cmake.org/Wiki/CMake_Generator_Specific_Information&quot;&gt;CMake Generator-Specific Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;premake&quot;&gt;Premake&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://premake.github.io/&quot;&gt;Premake&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;openssl&quot;&gt;OpenSSL&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.covenanteyes.com/building-openssl-for-visual-studio/&quot;&gt;Building OpenSSL For Visual Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.openssl.org/index.php/Compilation_and_Installation&quot;&gt;Compilation and Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://p-nand-q.com/programming/windows/building_openssl_with_visual_studio_2013.html&quot;&gt;Building OpenSSL with Visual Studio 2013&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/openssl/openssl/blob/master/INSTALL.W32&quot;&gt;Install OpenSSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rt.openssl.org/Ticket/Display.html?id=3650&amp;amp;user=guest&amp;amp;pass=guest&quot;&gt;OpenSSL asm bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dos&quot;&gt;DOS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://ss64.com/nt/goto.html&quot;&gt;CMD help&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 24 May 2015 08:58:00 -0700</pubDate>
        <link>http://neurocline.github.io/links/2015/05/24/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/links/2015/05/24/recent-links.html</guid>
        
        
        <category>links</category>
        
      </item>
    
      <item>
        <title>Unix source history in a Git repo</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/assets/UnixFoglio.jpg&quot; width=&quot;340&quot; height=&quot;460&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(1976 Unix artwork by Phil Foglio)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Diomidis Spinellis has put together a Git repo with 44 years of Unix
source code commits, starting with 1972 source from Ken Thompson and Dennis Ritchie.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.dmst.aueb.gr/dds/pubs/conf/2015-MSR-Unix-History/html/Spi15c.html&quot;&gt;A Repository with 44 Years of Unix Evolution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The repo can be found here&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dspinellis/unix-history-repo&quot;&gt;dspinellis/unix-history-repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code that Spinellis used to create the repo can be found here&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dspinellis/unix-history-make&quot;&gt;dspinellis/unix-history-make&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is important stuff. More long-running projects should be put together like
this.&lt;/p&gt;
</description>
        <pubDate>Fri, 22 May 2015 13:50:00 -0700</pubDate>
        <link>http://neurocline.github.io/unix/2015/05/22/unix-source-history.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/unix/2015/05/22/unix-source-history.html</guid>
        
        
        <category>unix</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;Note - I will reorganize how I’m doing this soon, so it’s in a different
section and not as “blog entries”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Cryptographic-Security-Architecture-Design-Verification/dp/0387953876&quot;&gt;Cryptographic Security Architecture: Design and Verification&lt;/a&gt; by Peter Gutmann. Expensive. Textbook?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://secure-resumption.com/tlsauth.pdf&quot;&gt;Triple Handshakes and Cookie Cutters:
Breaking and Fixing Authentication over TLS
&lt;/a&gt;, paper by Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cedric Fournet, Alfredo Pironti and Pierre-Yves Strub. New attacks on TLS. This prompted the Extended Master Secret extension to TLS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tls-session-hash-05&quot;&gt;Transport Layer Security (TLS) Session Hash and Extended Master Secret Extension&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cs.auckland.ac.nz/~pgut001/pubs/vista_cost.html&quot;&gt;A Cost Analysis of Windows Vista Content Protection&lt;/a&gt; - paper by Peter Gutmann on Windows Vista’s content protection measures and problems thereo f(&lt;a href=&quot;http://www.cypherpunks.to/~peter/vista.pdf&quot;&gt;slides here&lt;/a&gt;)&lt;/p&gt;
</description>
        <pubDate>Wed, 13 May 2015 05:27:00 -0700</pubDate>
        <link>http://neurocline.github.io/links/2015/05/13/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/links/2015/05/13/recent-links.html</guid>
        
        
        <category>links</category>
        
      </item>
    
      <item>
        <title>Git Merge 2015</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/GitMerge2015.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Watch these videos&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://git-merge.com/&quot;&gt;Git Merge 2015&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 May 2015 11:24:00 -0700</pubDate>
        <link>http://neurocline.github.io/git/2015/05/12/git-merge.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/git/2015/05/12/git-merge.html</guid>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://community.qualys.com/thread/12315&quot;&gt;Can’t get OCSP stapling to work, despite openssl working fine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.thawte.com/assets/documents/whitepaper/ocsp-stapling.pdf&quot;&gt;Guide to OCSP Stapling&lt;/a&gt; - Thawte.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Revocation_list&quot;&gt;Revocation list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Kerberos_(protocol)&quot;&gt;Kerberos (protocol)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/OCSP_stapling&quot;&gt;OCSP Stapling&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol&quot;&gt;Online Certificate Status Protocol&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.imperialviolet.org/2011/03/18/revocation.html&quot;&gt;Revocation doesn’t work&lt;/a&gt; - from March 2011.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.imperialviolet.org/2014/04/19/revchecking.html&quot;&gt;No, don’t enable revocation checking&lt;/a&gt; - from April 2014&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-hallambaker-muststaple-00&quot;&gt;X.509v3 Extension: OCSP Stapling Required&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-websec-key-pinning-21&quot;&gt;Public Key Pinning Extension for HTTP&lt;/a&gt; - this is known as HPKP. Chrome does this and pre-loaded pins.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.certificate-transparency.org/&quot;&gt;Certificate Transparency&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.webupd8.org/2011/02/how-to-boot-iso-with-grub2-easy-way.html&quot;&gt;HOW TO BOOT AN ISO WITH GRUB2 (THE EASY WAY!)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lifehacker.com/5042630/unetbootin-creates-usb-bootable-linux-the-easy-way&quot;&gt;UNetbootin Creates USB-Bootable Linux the Easy Way&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.instructables.com/id/Make-Your-Regular-Mac-a-NetBoot-Server!/&quot;&gt;Make Your Regular Mac a NetBoot Server!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mike.passwall.com/macnc/macosxs.html&quot;&gt;Netbooting Mac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://technet.microsoft.com/en-us/library/ee619754(WS.10).aspx&quot;&gt;How Certificate Revocation Works&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cise.ufl.edu/~bates/documents/Bates_Ccs14.pdf&quot;&gt;Securing SSL Certificate Verification through Dynamic Linking&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.feistyduck.com/&quot;&gt;Feisty Duck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jayway.com/2014/09/03/creating-self-signed-certificates-with-makecert-exe-for-development/&quot;&gt;Creating self signed certificates with makecert.exe for development&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.serverframework.com/ServerFramework/latest/Docs/examples-schannelechoserver.html&quot;&gt;Example Servers - SChannel Echo Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.coastrd.com/tls-with-schannel&quot;&gt;TLS with Schannel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.coastrd.com/c-schannel-smtp&quot;&gt;C++ SSPI Schannel TLS example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.certificate-transparency.org/log-proofs-work&quot;&gt;How Log Proofs Work&lt;/a&gt; - Merkle hash trees and proving entries are in logs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.emsec.rub.de/media/crypto/attachments/files/2011/04/becker_1.pdf&quot;&gt;Merkle Signature Schemes, Merkle Trees and Their Cryptanalysis&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;books-i-want-to-get&quot;&gt;Books I want to get&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Bulletproof-SSL-TLS-Understanding-Applications/dp/1907117040/&quot;&gt;Bulletproof SSL and TLS&lt;/a&gt; by Ivan Ristic. For some reason this is super-expensive from Amazon, cheaper to get it direct from Feisty Duck.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/SSL-TLS-Designing-Building-Systems/dp/0201615983&quot;&gt;SSL and TLS: Designing and Building Secure Systems&lt;/a&gt; by Eric Rescorla. Old but still good.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Implementing-SSL-TLS-Using-Cryptography/dp/0470920416/&quot;&gt;Implementing SSL / TLS Using Cryptography and PKI&lt;/a&gt; by Joshau Davies.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Network-Security-OpenSSL-John-Viega/dp/059600270X/&quot;&gt;Network Security with OpenSSL&lt;/a&gt; by John Viega.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Secure-Programming-Cookbook-Cryptography-Authentication/dp/0596003943/&quot;&gt;Secure Programming Cookbook for C and C++&lt;/a&gt; by John Viega.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Cryptography-Engineering-Principles-Practical-Applications/dp/0470474246/&quot;&gt;Cryptography Engineering: Design Principles and Practical Applications&lt;/a&gt; by Niels Furguson, Bruce Schneier, Tadayoshi Kohno.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Introduction-Cryptography-Edition-Chapman-Security/dp/1466570261/&quot;&gt;Introduction to Modern Cryptography, Second Edition&lt;/a&gt; by Jonathan Katz, Yehuda Lindell.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 May 2015 07:39:00 -0700</pubDate>
        <link>http://neurocline.github.io/links/2015/05/12/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/links/2015/05/12/recent-links.html</guid>
        
        
        <category>links</category>
        
      </item>
    
      <item>
        <title>Stream ciphers</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/RC4.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Stream ciphers are an approximation of one-time pads. RC4 is the most well-known
stream cipher, but on the edge of being insecure now.&lt;/p&gt;

&lt;h2 id=&quot;general&quot;&gt;General&lt;/h2&gt;

&lt;p&gt;Wikipedia - &lt;a href=&quot;http://en.wikipedia.org/wiki/Stream_cipher&quot;&gt;Stream cipher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tech-faq.com/block-and-stream-ciphers.html&quot;&gt;Block and Stream Ciphers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cosic.esat.kuleuven.be/publications/thesis-124.pdf&quot;&gt;CRYPTANALYSIS AND DESIGN OF SYNCHRONOUS
STREAM CIPHERS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.burtleburtle.net/bob/hash/index.html&quot;&gt;Hash Functions and Block Ciphers&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rc4&quot;&gt;RC4&lt;/h2&gt;

&lt;p&gt;RC4 is the official algorithm, designed by Ron Rivest in 1987. It was initially a
trade secret, but an anonymous poster publishe a description of it to the Cipherpunks
mailing list. The algorithm derived from that description was known as ARC4, for 
“Alleged RC4” (because RC4 was registered as a trademark by RSA). RC4 was historically
widely used in TLS, although now prohibited as of RFC 7465.&lt;/p&gt;

&lt;p&gt;Wikipedia - &lt;a href=&quot;https://en.wikipedia.org/wiki/RC4&quot;&gt;RC4&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;spritz&quot;&gt;Spritz&lt;/h2&gt;

&lt;p&gt;Spritz is a 2014 upgrade of RC4 by Rivest and Schuldt.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.schneier.com/blog/archives/2014/10/spritz_a_new_rc.html&quot;&gt;Spritz: A New RC4-Like Stream Cipher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://people.csail.mit.edu/rivest/pubs/RS14.pdf&quot;&gt;Spritz—a spongy RC4-like stream cipher and hash function&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;salsa20&quot;&gt;Salsa20&lt;/h2&gt;

&lt;p&gt;Salsa20 was designed by Daniel J. Bernstein.&lt;/p&gt;

&lt;p&gt;Wikipedia - &lt;a href=&quot;http://en.wikipedia.org/wiki/Salsa20&quot;&gt;Salsa20&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;chacha20&quot;&gt;ChaCha20&lt;/h2&gt;

&lt;p&gt;ChaCha20, closely related to Salsa20, was also designed by Daniel J. Bernstein, and might be slightly more secure than Salsa20. Google is now using this for Android.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.infosecurity-magazine.com/news/google-swaps-out-crypto-ciphers-in-openssl/&quot;&gt;Google Swaps Out Crypto Ciphers in OpenSSL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-nir-cfrg-chacha20-poly1305-02&quot;&gt;ChaCha20 and Poly1305 for IETF protocols&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;sosemanuk&quot;&gt;SOSEMANUK&lt;/h2&gt;

&lt;p&gt;Wikipedia - &lt;a href=&quot;http://en.wikipedia.org/wiki/SOSEMANUK&quot;&gt;SOSEMANUK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ecrypt.eu.org/stream/p3ciphers/sosemanuk/sosemanuk_p3.pdf&quot;&gt;Sosemanuk, a fast software-oriented stream cipher&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;isaac&quot;&gt;ISAAC&lt;/h2&gt;

&lt;p&gt;Designed by Robert Jenkins (“burtlebob”) in 1996, and used in a handful of places,
including inside GNU Coreutils.&lt;/p&gt;

&lt;p&gt;Wikipedia - &lt;a href=&quot;http://en.wikipedia.org/wiki/ISAAC_(cipher)&quot;&gt;ISAAC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.burtleburtle.net/bob/rand/isaacafa.html&quot;&gt;ISAAC: a fast cryptographic random number generator&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;phelix&quot;&gt;Phelix&lt;/h2&gt;

&lt;p&gt;Designed by Doug Whiting, Bruce Schneier, Stefan Lucks, and Frédéric Muller.&lt;/p&gt;

&lt;p&gt;Wikipedia - &lt;a href=&quot;http://en.wikipedia.org/wiki/Phelix&quot;&gt;Phelix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.schneier.com/paper-helix.pdf&quot;&gt;Helix: Fast Encryption and Authentication in a Single Cryptographic Primitive&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;solitaire&quot;&gt;Solitaire&lt;/h2&gt;

&lt;p&gt;Designed by Bruce Schneier for Neal Stephenson to use in the book Cryptonomicon.&lt;/p&gt;

&lt;p&gt;Wikipedia - &lt;a href=&quot;http://en.wikipedia.org/wiki/Solitaire_(cipher)&quot;&gt;Solitaire&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;one-time-pads&quot;&gt;One-time pads&lt;/h2&gt;

&lt;p&gt;This is the gold standard, but hard to use in practice, except in specific use cases.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://users.telenet.be/d.rijmenants/en/onetimepad.htm&quot;&gt;One-time Pad&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.schneier.com/blog/archives/2015/04/cell_phone_opse.html&quot;&gt;Cell Phone Opsec&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 May 2015 04:34:00 -0700</pubDate>
        <link>http://neurocline.github.io/encryption/2015/05/12/stream-ciphers.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/encryption/2015/05/12/stream-ciphers.html</guid>
        
        
        <category>encryption</category>
        
      </item>
    
  </channel>
</rss>

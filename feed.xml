<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 01 May 2015 23:54:06 -0700</pubDate>
    <lastBuildDate>Fri, 01 May 2015 23:54:06 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Using Jekyll for a blog</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/JekyllBlogging.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been unhappy with Wordpress for a while now - it’s slow, it’s cumbersome to add content,
and it’s riddled with insecurities. Despite not being a “web programmer”, I’ve decided it’s time
to go closer to the bare metal - and a blog is much more suited to a static site. This means I can
keep my blog in source control, which makes me much happier than using some CMS system. I decided
to try Jekyll, instead of writing my own. I may still write my own eventually; that’s what all
engineers seem to do, over time, to exert the most control.&lt;/p&gt;

&lt;p&gt;This has been interesting, because I’ve also managed to avoid using Ruby all these years; Perl and
then Python are what I’d used for “scripting” languages. I also decided to put it up as a GitHub
Pages site, since I of course was using Git for source control.&lt;/p&gt;

&lt;p&gt;So here’s the steps I followed, on a Windows machine, just to be contrary; the Web world prefers
Mac and Linux, and normally so do I. But at the time I wanted to restart my blog, I was on a
Windows 7 machine.&lt;/p&gt;

&lt;h2 id=&quot;install-ruby&quot;&gt;Install Ruby&lt;/h2&gt;

&lt;p&gt;For Windows, you’ll want to use a prebuilt installer from &lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;ruby-installer.org&lt;/a&gt;.
I picked &lt;a href=&quot;http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.1.6.exe&quot;&gt;rubyinstaller-2.1.6&lt;/a&gt; because I didn’t know what I was doing, and
there was a strong suggestion to use 2.1.x.&lt;/p&gt;

&lt;p&gt;I installed a 32-bit build because I’ve had issues with 64-bit Python and Perl in the past - not
all Perl modules or Python packages support 64-bit. So I just assumed the same for Ruby. Also, I’m
not yet writing large programs, so no need for 64-bit. I installed it into C:/Dev/Ruby21, just
because I try to do a minimal amount of organization.&lt;/p&gt;

&lt;h2 id=&quot;install-devkit&quot;&gt;Install DevKit&lt;/h2&gt;

&lt;p&gt;I only found this out after starting to install Jekyll, but Ruby gems that come with native
code need a compiler to build them with. On Linux and Mac, this is automatic because it’s almost
always “just there”, but for Windows we need compilers. I miss the auto-convenience of Perl and
Python which just found my Visual Studio installs and used them. I couldn’t figure out how to
get Ruby to do the same, and I suspect it’s hard-coded to use the MinGW suite.&lt;/p&gt;

&lt;p&gt;The DevKit download can be found on the &lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;ruby-installer.org&lt;/a&gt; page. I grabbed
the &lt;a href=&quot;http://dl.bintray.com/oneclick/rubyinstaller/DevKit-mingw64-32-4.7.2-20130224-1151-sfx.exe&quot;&gt;DevKit-mingw64-32&lt;/a&gt; installer that matched my Ruby install. It’s not
really an installer, it’s a self-unpacking archive. Unpack it to its permanent home - I have
a C:/Dev folder that I put development tools into, so it went into C:/Dev/RubyDevKit. Don’t
let it unpack to its default location, which is into a temp folder.&lt;/p&gt;

&lt;p&gt;Once you’ve unpacked it, you need to install it - I think all this does is write magic entries
into your Ruby folder. The default action should find your Ruby folder, but you can double-check
by looking at config.yml after you run dk.rb init.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; ruby dk.rb init
&amp;gt; ruby dk.rb install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that on one machine, DevKit didn’t install cleanly for some reason - e.g. gem install…
failed with a “install DevKit, please”. I rebooted and that didn’t fix it, but then I reinstalled
DevKit again (ruby dk.rb install), and this time it worked. I don’t know if the reboot was
necessary, but I have a vague memory of being prompted to reboot after installing Ruby on
a different machine. I’ll try to reproduce that at some point.&lt;/p&gt;

&lt;h2 id=&quot;install-jekyll&quot;&gt;Install Jekyll&lt;/h2&gt;

&lt;p&gt;Here’s where I diverged from what GitHub was suggesting, for two reasons. One, I just want to
use Jekyll to create my site, and I’ll commit the generated site to Git (and push to GitHub).
Two, I had a weird problem when I tried to follow the GitHub instructions, and rather than figure
it out, I went back to my original plan of “have a static site”.&lt;/p&gt;

&lt;p&gt;First, I installed Jekyll.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; gem install jekyll&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, I created a new Git repository and initialized it as a Jekyll-generated site.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; mkdir neurocline.github.io
&amp;gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;neurocline.github.io
&amp;gt; git init
&amp;gt; jekyll new .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;install-pygments-or-rouge&quot;&gt;Install Pygments or Rouge&lt;/h2&gt;

&lt;p&gt;Since I’m running Jekyll locally, I had a problem as soon as I started writing Markdown that
used the Liquid syntax highlighting; it didn’t work. A few seconds of Googling led me to
understand that I needed more modules.&lt;/p&gt;

&lt;p&gt;The gorilla is Pygments, which is Python-based, and has a Ruby wrapper already built in to
Jekyll. Since I am a Python user, this didn’t turn me off, so I just installed Pygments. This was
especially easy since I’m using a Python that has pip as part of the core system&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; python -m pip install pygments&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also had to add a line to my _config.yml file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cfg&quot; data-lang=&quot;cfg&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Build settings&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;markdown:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;kramdown&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;highlighter:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;pygments&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And frustratingly, even though the Pygments page said ‘shell’ was a style, there is no such
thing and I had to use ‘bash’.&lt;/p&gt;

&lt;h2 id=&quot;do-local-editing&quot;&gt;Do local editing&lt;/h2&gt;

&lt;p&gt;The standard workflow is to run a Jekyll server locally, then start editing content. Every
time you save, the file-watcher will pick up the changes and update the site. By default, your
site is viewed on localhost:4000.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; jekyll serve
Configuration file: C:/projects/github/neurocline.github.io/_config.yml
            Source: C:/projects/github/neurocline.github.io
       Destination: C:/projects/github/neurocline.github.io/_site
      Generating...
                    &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
  Please add the following to your Gemfile to avoid polling &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; changes:
    gem &lt;span class=&quot;s1&quot;&gt;&amp;#39;wdm&amp;#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;= 0.1.0&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; Gem.win_platform?
 Auto-regeneration: enabled &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;C:/projects/github/neurocline.github.io&amp;#39;&lt;/span&gt;
Configuration file: C:/projects/github/neurocline.github.io/_config.yml
    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.
      Regenerating: &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; file&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; changed at 2015-05-01 19:59:33
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;bake-a-site&quot;&gt;Bake a site&lt;/h2&gt;

&lt;p&gt;Since I’m not using GitHub’s Jekyll, I need to bake the site locally and commit file, then
push to GitHub. And that means a little trickery. Here’s one approach.&lt;/p&gt;

&lt;p&gt;First, I baked the site:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; jekyll build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, I pushed the sources for the site to a sources branch. GitHub wants to see the site itself in
a master branch, I want my sources in source control, so I “hide” it in a branch GitHub is not
looking at.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; git remote add origin git@ghosthub:neurocline/neurocline.git.io
&amp;gt; git checkout -b sources
&amp;gt; git add -A
&amp;gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;First commit of source&amp;quot;&lt;/span&gt;
&amp;gt; git push origin sources&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, I pushed the baked site itself to a master branch.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site
&amp;gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &amp;gt; .nojekyll
&amp;gt; git init
&amp;gt; git remote add origin git@ghosthub:neurocline/neurocline.git.io
&amp;gt; git add -A
&amp;gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll first build&amp;quot;&lt;/span&gt;
&amp;gt; git push origin master
&amp;gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, my site is live on GitHub.&lt;/p&gt;

&lt;p&gt;If you follow that, it looks a little weird, because I have two different repos both pointing to
the same remote repo. But that’s Git for you. This way, I don’t need to be copying files from one
place to another. It’s a little more extra work for setup, but the steady-state is easy.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;I’m pretty happy with the writing part now. I can edit in text and see results as often as I
want (by saving files and using the default file-watcher behavior). I have yet to add images or
to tweak or change the overall blog style, but that will happen.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyll-windows.juthilo.com/3-syntax-highlighting/&quot;&gt;Install a Syntax Highlighter&lt;/a&gt; from
&lt;a href=&quot;http://jekyll-windows.juthilo.com/&quot;&gt;Run Jekyll on Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/oneclick/rubyinstaller/wiki/Development-Kit&quot;&gt;Installing DevKit&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 01 May 2015 11:53:20 -0700</pubDate>
        <link>http://neurocline.github.io/jekyll/blog/2015/05/01/using-jekyll.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/jekyll/blog/2015/05/01/using-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>

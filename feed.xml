<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 07 Mar 2016 00:23:55 -0800</pubDate>
    <lastBuildDate>Mon, 07 Mar 2016 00:23:55 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/1-Build_Setting_Reference/build_setting_ref.html&quot;&gt;Xcode Build Setting Reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@porteneuve/mastering-git-submodules-34c65e940407#.xeztcwrmv&quot;&gt;Mastering Git submodules&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules&quot;&gt;7.11 Git Tools - Submodules&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ninja-build.org/&quot;&gt;Ninja&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://llvm.org/docs/CMake.html&quot;&gt;Building LLVM with CMake&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.monobjc.net/xcode-project-file-format.html&quot;&gt;Xcode Project File Format&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/&quot;&gt;JTC1/SC22/WG21 - Papers 2016 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/a/isocpp.org/forum/#!topic/sg14/uMgfM-ZKi7k&quot;&gt;Continuing thinking around p0235 packaging system for c++&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/a/isocpp.org/forum/#!forum/sg14&quot;&gt;SG14 - Game Dev and Low Latency&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.git-tower.com/blog/diff-tools-mac/&quot;&gt;Diff Tools on Mac OS X&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/olafvdspek/ctemplate&quot;&gt;ctemplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2548075/c-string-template-library&quot;&gt;C++ string template library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cantrip.org/rust-vs-c++.html&quot;&gt;Rust vs. C++: Fine-grained Performance&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Mar 2016 00:15:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/03/07/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/03/07/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://mvogt.wordpress.com/2014/04/04/apt-1-0/&quot;&gt;apt 1.0&lt;/a&gt;. Evidently apt was in beta all this time? apt is Debian’s high-level packaging tool, and stands for “A Package Tool”. dpkg is the package management
system itself. And then Aptitude and Synaptic are front-ends to apt itself. It’s turtles.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;Docset Direct Download Links&lt;/a&gt;
&lt;a href=&quot;https://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt; is an offline API documentation browser for OS X and iOS. Looks interesting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sunaku.github.io/dasht/man/man0/README.html&quot;&gt;dasht&lt;/a&gt; is a command-line version.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kapeli.com/docset_links&quot;&gt;Docset Direct Download Links&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://haneefmubarak.com/2016/02/25/assembly-optimizations-i-un-packing-structures/&quot;&gt;Assembly Optimizations I: (Un)Packing Structures&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2016/returning-multiple-values-from-functions-in-c/&quot;&gt;Returning multiple values from functions in C++&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developers.redhat.com/blog/2016/02/29/why-cstdlib-is-more-complicated-than-you-might-think/&quot;&gt;Why &amp;lt; cstdlib &amp;gt; is more complicated than you might think&lt;/a&gt;. Good article if you approach it from the point of view of “GNU C standard library” and not “any C Standard Library”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.codinghorror.com/we-hire-the-best-just-like-everyone-else/&quot;&gt;We Hire the Best, Just Like Everyone Else&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lambda-the-ultimate.org/node/5313&quot;&gt;Why not C++?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/docs/Introduction%20to%20type%20and%20resource%20safety.pdf&quot;&gt;A brief introduction to C++’s model for type- and resource-safety&lt;/a&gt;. Bjarne Stroustrup, Herb Sutter, Gabriel Dos Reis.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jeroenpelgrims.com/pushing-to-dokku-from-gitlab-ci/&quot;&gt;Pushing to Dokku from GitLab CI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joowani/dtags&quot;&gt;DTags - Directory Tags for Lazy Programmers.&lt;/a&gt;. I wish there was a good shell for Windows.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yrp604/rappel&quot;&gt;yrp604/rappel&lt;/a&gt;. A linux-based assembly REPL for x86, amd64, and armv7.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=IRTfhkiAqPw&quot;&gt;Object-Oriented Programming is Embarrassing: 4 Short Examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://llvm.linuxfoundation.org/index.php/Main_Page&quot;&gt;LLVMLinux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/322823/&quot;&gt;ext4 and data loss&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dranger.com/ffmpeg/&quot;&gt;An ffmpeg and SDL Tutorial&lt;/a&gt;. How to Write a Video Player in
Less Than 1000 Lines.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp&quot;&gt;Let’s code a TCP/IP stack, 1: Ethernet &amp;amp; ARP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lazyfoo.net/tutorials/SDL/index.php&quot;&gt;Beginning Game Programming v2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svpow.com/2016/03/04/sci-hub-is-a-scholarly-litmus-test/&quot;&gt;Sci-Hub is a scholarly litmus test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codersnotes.com/notes/cpp-rant-1/&quot;&gt;Ill-Advised C++ Rant, Part 1&lt;/a&gt; and &lt;a href=&quot;http://www.codersnotes.com/notes/cpp-rant-2/&quot;&gt;Ill-Advised C++ Rant, Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.archive.org/2016/03/04/saving-500-apple-ii-programs-from-oblivion/&quot;&gt;Saving 500 Apple II Programs from Oblivion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tj/luna&quot;&gt;luna&lt;/a&gt;. Luna is an expressive, minimalistic, elegant programming language implemented in C.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://trafficways.org/ascii/ascii.pdf&quot;&gt;The Evolution of Character Codes, 1874-1968&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://msm.runhello.com/p/1003&quot;&gt;No Compiler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://denninginstitute.com/pjd/GP/GP-site/welcome.html&quot;&gt;GREAT PRINCIPLES OF COMPUTING&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Mar 2016 08:33:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/03/06/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/03/06/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>C++ things to write</title>
        <description>&lt;p&gt;Write a C++ source highighter that uses Clang to identify the various
syntactic and semantic elements.&lt;/p&gt;

&lt;p&gt;Write a web template/blog engine in C++.&lt;/p&gt;

&lt;p&gt;Turn Clang into a two-pass compiler so that forward declarations aren’t
needed any more. Do templates make this impossible? Find out.&lt;/p&gt;

&lt;p&gt;Find a way to get rid of most/all of the undefined and unspecified
behavior in the C++ standard.&lt;/p&gt;

&lt;p&gt;Find all the usable C and C++ source in the world, catalog it, and make it
available for use.&lt;/p&gt;

&lt;p&gt;Solve text encoding.&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Mar 2016 11:30:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/03/03/things-to-write.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/03/03/things-to-write.html</guid>
        
        <category>programming</category>
        
        <category>design</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://robots.thoughtbot.com/the-magic-behind-configure-make-make-install&quot;&gt;The magic behind configure, make, make install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Configure_script&quot;&gt;configure script&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://airs.com/ian/configure/configure_toc.html&quot;&gt;The GNU configure and build system&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://marmelab.com/blog/2016/02/29/auto-documented-makefile.html&quot;&gt;Self-Documented Makefile&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=11195539&quot;&gt;discussion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nicholasjackson.github.io/microservices/go/building-and-testing-microservices-part1/&quot;&gt;0 to Microservice in 5 minutes with Go, go-microservice-template and Minke&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.iar.com/support/resources/articles/advanced-preprocessor-tips-and-tricks/&quot;&gt;Advanced preprocessor tips and tricks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=11198329&quot;&gt;Ask HN: Is it possible to live off technical writing?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://llogiq.github.io/2016/02/28/java-rust.html&quot;&gt;Comparing Rust and Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://failedevolution.blogspot.com/2015/10/stephen-hawking-confirms-problem-is.html&quot;&gt;Stephen Hawking confirms: The problem is Capitalism, not robots!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mirage.io/blog/introducing-functoria&quot;&gt;Introducing Functoria&lt;/a&gt;. MirageOS for microkernels/unikernels&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ilikebigbits.com/blog/2016/2/28/error-context-better-logging-with&quot;&gt;Error Context - a stack trace for data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pythontutor.com/&quot;&gt;VISUALIZE Python, Java, JavaScript, TypeScript, Ruby, C, and C++ programs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://makers.airware.com/open-source/this-blog/&quot;&gt;Airware - this blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.blog.pythonlibrary.org/2016/03/01/python-101-all-about-imports/&quot;&gt;Python 101: All about imports&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@bertrandom/unfundable-slack-bots-9369a75fdd#.nuomxx68y&quot;&gt;Unfundable Slack bots&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://eng.uber.com/go-geofence/&quot;&gt;HOW WE BUILT UBER ENGINEERING’S HIGHEST QUERY PER SECOND SERVICE USING GO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.gitkraken.com/&quot;&gt;GitKracken&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zachholman.com/posts/deploying-software&quot;&gt;How to Deploy Software&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Mar 2016 23:42:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/03/01/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/03/01/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>C++ Package Management notes</title>
        <description>&lt;p&gt;How should a package system for C++ work?&lt;/p&gt;

&lt;p&gt;Here’s one ideal&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;curl&amp;quot; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// this is a package&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// this is a system header&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurlGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Download file&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Download argv[1] into a std::string&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurlGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a real program, except for one small detail.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;curl&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In an ideal world, this is all you would need to use Curl in your program; no
downloading installing a Curl distribution, no adding of search path and linker
entries to a makefile or other build system artifact.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;CurlGet&lt;/code&gt; isn’t from the curl package, it’s my code. I separated it
out just to make it clearer. Here it is, for completeness’ sake. Put this together
with the code above and a compiler that supports packages, and you get this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WriteStdString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nmemb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nmemb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Add this new chunk to the string. Yes, ugly, writing into a string buffer.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurlGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// reserve enough for a moderate sized file&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;curl_global_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURL_GLOBAL_DEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl_easy_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;curl_easy_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CURLOPT_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;curl_easy_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CURLOPT_WRITEFUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteStdString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;curl_easy_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CURLOPT_WRITEDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;curl_easy_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CURLOPT_USERAGENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;packagedemo/1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl_easy_perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* should really check result, eh? */&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;curl_easy_cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;curl_global_cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In our current world, if you have a computer without Curl on it, and are not
running an operating system where Curl has been packaged up for you to grab,
you’re in for an hour to a day of finding Curl source, building it, and then
adding it to your program.&lt;/p&gt;

&lt;p&gt;So how can we get closer to this ideal world?&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Mar 2016 13:30:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/03/01/cpp-package-management-notes.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/03/01/cpp-package-management-notes.html</guid>
        
        <category>programming</category>
        
        <category>design</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Barycentric Coordinate Time</title>
        <description>&lt;p&gt;We have half of a better computer timestamp system. Barycentric Coordinate time, or TCB, is defined
as the SI second, duration of radiation periods of cesium centered at the spacetime coordinate of
the geocenter of the solar system at 1977 January 1, 0h 0m 32s.184 TAI; in other words, an atomic clock
centered here starting at the given time would count TCB time. This time was picked to provide a bridge
between current standards and TCB time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dl.yazdanpress.com/BOOKS/PHYSICS/Time_From_Earth_Rotation_to_Atomic_Physics(marked).pdf&quot;&gt;Time: from Earth Rotation to Atomic Physics&lt;/a&gt;, page 118.&lt;/p&gt;

&lt;p&gt;I further propose that for computer timestamps, we use integers of the duration of radiation periods
of cesium, which is precisely 9,192,631,770 ticks per second. There are transforms for general
relativity to treat this properly for any point in the solar system, and we should be able to
extend it beyond the solar system as we start travelling, without too much effort (relative to the
effort of actually travelling beyond the solar system, of course). A 96-bit integer can hold a comfortably
large range (273 billion years), and a 128-bit value would be able to date every event in the lifetime
of the universe, at least as we currently understand it,
A 64-bit value can only hold a timespan of 63 years at this tick rate, so that would be infeasible, although
maybe acceptable in specific use cases.&lt;/p&gt;

&lt;p&gt;Note that TCG, or Geocentric Coordinate Time, was also defined at this point, and there is a (admittedly nonlinear)
transformation between TCG and TCB. But we don’t want to be using TCG time, as this is Earth-centric, and
some software we are writing now will almost certainly be used other than on or around Earth.&lt;/p&gt;

&lt;p&gt;Also note that other clocks than cesium are being considered; if someday we switch to a higher-resolution clock,
there would be a simple linear transform, since almost certainly that system will hold onto the SI second.&lt;/p&gt;

&lt;p&gt;Finally, we will probably have Mars Time, Moon Time etc alongside Terrestrial Time, further complicating things
and thus further driving home the point that computer timestamps should switch to TCB time now.&lt;/p&gt;

&lt;p&gt;So, to summarize, a modern computer timestamp is&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a 128 bit value (96-bit is optional but could cover most time ranges)&lt;/li&gt;
  &lt;li&gt;zero at 1977 January 1, 0h 0m 32.184s&lt;/li&gt;
  &lt;li&gt;clock located at the geocenter of the solar system&lt;/li&gt;
  &lt;li&gt;tick count is 9,192,631,770 ticks/second&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a bridge from UTC to TAI to TCB. I don’t care at all about civil time, or rather I don’t want to be
measuring time events in civil time (calendars and the like). TCB is irrelevant of geographical concerns.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/International_Atomic_Time&quot;&gt;International Atomic Time&lt;/a&gt;, TAI time&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Geocentric_Coordinate_Time&quot;&gt;Geocentric Coordinate Time&lt;/a&gt;, TCG time&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Barycentric_Coordinate_Time&quot;&gt;Barycentric Coordinate Time&lt;/a&gt;, TCB time&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Feb 2016 17:32:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/22/barycentric-coordinate-time.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/22/barycentric-coordinate-time.html</guid>
        
        <category>programming</category>
        
        <category>design</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://nautil.us/issue/33/attraction/why-our-intuition-about-sea_level-rise-is-wrong&quot;&gt;Why Our Intuition About Sea-Level Rise Is Wrong&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2016-02-19-what-is-the-secure-enclave.html&quot;&gt;Friday Q&amp;amp;A 2016-02-19: What Is the Secure Enclave?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cockroachlabs.com/blog/what-can-we-learn-from-our-github-stars/&quot;&gt;What can we learn from our GitHub stars?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@ConsenSys/an-introduction-to-ipfs-9bba4860abd0#.n2zvl5up1&quot;&gt;An Introduction to IPFS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://techcrunch.com/2016/02/20/solving-the-h-1b-visa-problem/&quot;&gt;Solving The H-1B Visa Problem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pcottle.github.io/learnGitBranching/&quot;&gt;Learn Git Branching&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rogerdudler.github.io/git-guide/&quot;&gt;git - the simple guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://isocpp.org/files/papers/p0225r0.html&quot;&gt;Why I want Concepts, and why I want them sooner rather than later&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@cdixon/what-s-next-in-computing-e54b870b80cc#.m8xxvbouy&quot;&gt;What’s Next in Computing?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.privateinternetaccess.com/blog/2016/01/linux-networking-stack-from-the-ground-up-part-1/&quot;&gt;Linux networking stack from the ground up, part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://thewinnower.com/papers/now-i-am-become-doi-destroyer-of-gatekeeping-worlds&quot;&gt;Now I am become DOI, destroyer of gatekeeping worlds&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tacticalsecret.com/early-impacts-of-letsencrypt/&quot;&gt;Early Impacts of Let’s Encrypt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@pierreda/understanding-git-for-real-by-exploring-the-git-directory-1e079c15b807#.fn5tpm1ax&quot;&gt;Understanding git for real by exploring the .git directory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://infolab.stanford.edu/pub/cstr/reports/csl/tr/83/247/CSL-TR-83-247.pdf&quot;&gt;Maintaining the Time in a Distributed System&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Peng.pdf&quot;&gt;Large-scale Incremental Processing Using Distributed Transactions and Notifications&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cockroachlabs.com/blog/living-without-atomic-clocks/&quot;&gt;Living Without Atomic Clocks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://thewinnower.com/about&quot;&gt;The Winnower: About&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.clockss.org/clockss/Home&quot;&gt;The CLOCKSS Archive: A Trusted Community-Governed Archive&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.lockss.org/&quot;&gt;LOCKSS: Lots Of Copies Keep Stuff Safe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://preshing.com/20160222/a-resizable-concurrent-map/&quot;&gt;A Resizable Concurrent Map&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://morsmachine.dk/causalprof&quot;&gt;Causal Profiling for Go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.polygon.com/2016/2/22/11051686/golem-playstationvr-highwire-games&quot;&gt;A SEATTLE SUPERGROUP OF DEVELOPERS IS TRYING TO CRACK VR’S TRICKIEST PROBLEMS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mintomic.github.io/&quot;&gt;Mintomic: A Small, Portable Lock-Free API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/preshing/turf&quot;&gt;preshing/turf&lt;/a&gt;. Turf is a configurable C++ platform adapter for threads, atomics, mutexes and other concurrency mechanisms.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/preshing/junction&quot;&gt;preshing/junction&lt;/a&gt;. Concurrent data structures in C++.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Feb 2016 16:48:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/21/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/21/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Minimal Premake</title>
        <description>&lt;p&gt;This is part of a planned series of articles, discussing both usage of Premake and analysis of it (what is good
about Premake, what is bad), as well as usage and analysis of equivalent tools like CMake, SCons and Gyp.&lt;/p&gt;

&lt;p&gt;Premake is useful, and Premake 5 more so. With any tool, it’s important to understand it. But it’s also important
to know how to use it properly. The apocryphal legend about &lt;code&gt;make&lt;/code&gt; is that there is only one original
&lt;code&gt;Makefile&lt;/code&gt;, and all others are just edited copies of the ur-file. While not true in fact, it is true that
&lt;code&gt;make&lt;/code&gt; is complex and most people who use it don’t really understand what they are doing.&lt;/p&gt;

&lt;p&gt;If you don’t have a &lt;code&gt;premake&lt;/code&gt; binary on your system and in your path, grab a copy from here:
&lt;a href=&quot;https://premake.github.io/download.html&quot;&gt;https://premake.github.io/download.html&lt;/a&gt;. I strongly suggest Premake 5.0, which while
listed as alpha is still stable (Blizzard has been using it for the past 6 months). The examples here start
with Visual Studio, and then move on to XCode and Gmake.&lt;/p&gt;

&lt;h2 id=&quot;bare-skeleton&quot;&gt;Bare skeleton&lt;/h2&gt;

&lt;p&gt;Let’s look at Premake through the filter of “what is the simplest Premake file we can make?”. We’re going to
use it to build a single-file project. Here’s the layout for our working folder:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;test/
|-- premake-minimal.lua
|-- src/
    |-- main.cpp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our &lt;code&gt;main.cpp&lt;/code&gt; file looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the smallest &lt;code&gt;premake-minimal&lt;/code&gt; file; every line in here is necessary, as far as I can tell:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysolution&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Debug&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myproject&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ConsoleApp&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;src/main.cpp&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First off, indentation in Premake scripts is arbitrary; Premake scripts are just Lua scripts with predefined
behavior, and Lua scripts are agnostic to whitespace (think C, not Python). The indentation is chosen to
show meaning and ownership, but to Premake, a file with none of the above indentation would mean the same thing.
This is important to keep in mind for future features like &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All Premake scripts declare a single solution.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysolution&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The word &lt;code&gt;solution&lt;/code&gt; comes from its original Visual Studio
focus; supposedly, newer Premake versions are now preferring &lt;code&gt;workspace&lt;/code&gt;, with &lt;code&gt;solution&lt;/code&gt; as a synonym.
The name you give your solution is, while arbitrary, also practical: this is the name given to the generated
solution/workspace/makefile, and (where relevant), is also the name that shows up when you open your solution.&lt;/p&gt;

&lt;p&gt;Your Premake scripts must have one or more &lt;code&gt;configurations&lt;/code&gt;; Premake has no defaults.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Debug&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configurations are sets of build options that
can cut across targets. The name configuration comes from Visual Studio; Xcode also calls them configurations,
although I think that might be recent. In makefiles, configurations are a Premake-made-up concept.&lt;/p&gt;

&lt;p&gt;A solution contains one or more projects.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myproject&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Likewise, the word &lt;code&gt;project&lt;/code&gt; shows Visual Studio bias, but is a reasonable concept (for Visual Studio builds,
each &lt;code&gt;project&lt;/code&gt; section generates a corresponding .vcxproj file); other build systems might
call this a target. Like with solution, the name you give a project is both arbitrary and practical; any generated
project file (just for Visual Studio, as far as I know) will have this name, and when open in an editor, the project
will present this name.&lt;/p&gt;

&lt;p&gt;A project need a &lt;code&gt;kind&lt;/code&gt;, which declares what type of thing to build:
choices are &lt;code&gt;StaticLib&lt;/code&gt; for
static libraries, &lt;code&gt;SharedLib&lt;/code&gt; for shared libraries (called DLLs on Windows), &lt;code&gt;ConsoleApp&lt;/code&gt; for console applications,
and &lt;code&gt;WindowedApp&lt;/code&gt; for apps that run in a window (mostly a distinction for Windows and Mac OS X). Premake is
used for building code projects, and this shows up in the set of items for kind.&lt;/p&gt;

&lt;p&gt;Finally, a project has to reference files, or it does nothing. This is the one piece that is optional, we
could have made a project that has no source; but there’s little point to this. Note that we reference files relative to
where the premake script is found. In this case, we just have the single file &lt;code&gt;src/main.cpp&lt;/code&gt;, but this could be
an entire comma-separated list of files.&lt;/p&gt;

&lt;p&gt;Use premake to generate make system files from this script; the parameter &lt;code&gt;--file=&amp;lt;PREMAKE-SCRIPT&amp;gt;&lt;/code&gt; is optional
if your premake script has the default name, which for Premake 5 is &lt;code&gt;premake5.lua&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;C:&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;est&amp;gt; premake5.exe --file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;premake-minimal.lua vs2013&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create a Visual Studio 2013 project that you can open and compile. After building, you should see
output something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;test/
|-- bin/
    |-- Debug/
        |-- myproject.exe
        |-- myproject.ilk
|-- myproject.vcxproj
|-- mysolution.sdf
|-- mysolution.sln
|-- mysolution.v12.suo
|-- obj/
    |-- myproject.tlog/
    |-- myproject.log
    |-- main.obj
    |-- vc120.pdb
|-- premake-minimal.lua
|-- src/
    |-- main.cpp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will look slightly different if you use a different version of Visual Studio.&lt;/p&gt;

&lt;p&gt;It’s a little messy, but Premake has imposed some structure without us asking. In general, Premake tries to have
sensible defaults while letting you override them if you want or need to.&lt;/p&gt;

&lt;h2 id=&quot;simple-organization&quot;&gt;Simple organization&lt;/h2&gt;

&lt;p&gt;Of course, you would never make even a simple project this way. So what should we add?&lt;/p&gt;

&lt;p&gt;First, we can control where the generated project files go. The Premake directive is &lt;code&gt;location (&amp;lt;PATH&amp;gt;)&lt;/code&gt;; this
sets the base location for all generated output. Let’s place our generated project files in a &lt;code&gt;build&lt;/code&gt; folder
(foreshadowing: unless we specify otherwise, all compiler outputs will go here too).&lt;/p&gt;

&lt;p&gt;So we update our premake script to put generated files in this location:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysolution&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Debug&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myproject&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ConsoleApp&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;src/main.cpp&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and (after throwing away all previous artifacts so we don’t confuse ourselves), re-generate:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;C:&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;est&amp;gt; premake5.exe --file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;premake-minimal.lua vs2013&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After running this, you’ll see a &lt;code&gt;build/&lt;/code&gt; directory with files in it; I won’t list those files again, our
previous list suffices.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;test/
|-- build/
|-- premake-minimal.lua
|-- src/
    |-- main.cpp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As well as Premake-generated files, all the files that Visual Studio creates are now tucked away in this build folder.
A big advantage to doing this is that all build artifacts
are in a single folder that can be ignored when committing to source control, and can be removed in order to
facilitate a clean build.&lt;/p&gt;

&lt;h2 id=&quot;multiple-configurations&quot;&gt;Multiple configurations&lt;/h2&gt;

&lt;p&gt;If you try to debug with this project in Visual Studio, you’ll see Visual Studio complaining that it can’t find
the debug symbols for your program. Premake by default does not create projects that generate debug symbols. Let’s fix
that. The premake directive for this is &lt;code&gt;flags { &quot;Symbols&quot; }&lt;/code&gt;. The &lt;code&gt;flags&lt;/code&gt; keyword sets some Premake-specific
values. The &lt;code&gt;&quot;Symbols&quot;&lt;/code&gt; flag means “set up project to generate debug symbols”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysolution&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Debug&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myproject&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ConsoleApp&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;src/main.cpp&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Symbols&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, when we re-generate (throwing away our old &lt;code&gt;build/&lt;/code&gt; directory is not strictly necessary) and rebuild,
we’ll have debug symbols in our project.&lt;/p&gt;

&lt;p&gt;We can add a Release configuration easily enough. Let’s also set it up so that the Debug configuration generates debug
symbols, but the Release configuration does not. Also, we want the Release configuration to generated optimized code.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysolution&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Debug&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Release&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myproject&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ConsoleApp&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;src/main.cpp&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;configurations:Debug&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;_DEBUG&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
            &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Symbols&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;configurations:Release&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;NDEBUG&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
            &lt;span class=&quot;n&quot;&gt;optimize&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;On&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This introduces a new Premake feature called &lt;code&gt;filter&lt;/code&gt;; any settings that appear after &lt;code&gt;filter&lt;/code&gt; will only be
applied to the subset of builds that match the keywords in the filter. Our first filter, &lt;code&gt;configurations:Debug&lt;/code&gt;,
means that subsequent lines only apply to configuration &lt;code&gt;Debug&lt;/code&gt;. The &lt;code&gt;defines&lt;/code&gt; directive introduces a C
preprocessor define &lt;code&gt;_DEBUG&lt;/code&gt; into our debug configuration, and then the &lt;code&gt;flags { &quot;Symbols&quot; }&lt;/code&gt; directive turns
on generating of debug symbols just for our debug configuration.&lt;/p&gt;

&lt;p&gt;Filters stay in effect until removed or replaced. The way to remove a filter is to just “apply” the empty filter. At the
end of our block, you’ll see &lt;code&gt;filter {}&lt;/code&gt;. In our very short premake script, this is not needed, but it’s a good
practice to follow, because it will be essential in large premake scripts, especially ones that include other scripts.
The best way to visualize this is to remove all the indentation from your premake script. Now it’s clear that filters
are in effect until removed; the indentation is fooling your brain into thinking there is some sort of scope.&lt;/p&gt;

&lt;p&gt;Filters can replace other filters. That’s why we don’t bother resetting the filter before applying our second filter,
&lt;code&gt;filter &quot;configuration:Release&quot;&lt;/code&gt;. This just replaces the debug filter. And like before, our &lt;code&gt;NDEBUG&lt;/code&gt; symbol
is only defined for the release configuration. The directive &lt;code&gt;optimize &quot;On&quot;&lt;/code&gt; is how you tell Premake to do whatever
it takes to configure for optimized builds. This is the cross-platform and generic way; more complex projects may
wish to directly issue compiler flags, but that requires per-build-platform sections. We’ll get there eventually, but
not just yet.&lt;/p&gt;

&lt;p&gt;If you regenerate and inspect the generated project files, you’ll see that we now have two solution configurations,
Debug and Release; debug has debug symbols and does not have optimized code, whereas release does not have debug
symbols but has optimized code.&lt;/p&gt;

&lt;h2 id=&quot;multiple-source-files&quot;&gt;Multiple source files&lt;/h2&gt;

&lt;p&gt;The final thing we’re going to cover in our minimal Premake project is on specifying source files. While it is
possible to list every file in our &lt;code&gt;files&lt;/code&gt; directive, we can use wildcards, including recursing through
multiple layers of directories:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**.cpp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**.h&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**.c&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The new files line will add any .cpp, .h, or .c files found anywhere in the &lt;code&gt;src/&lt;/code&gt; directory. By default, Premake
will try to be nice and will create groupings in the generated projects to match the directory structure. As long as
you are disciplined and don’t keep stray files in your workspace, you may find you never need explicit listing of files
in the premake script. Note that the first level isn’t replicated in the project file - &lt;code&gt;main.cpp&lt;/code&gt; shows up at the top
level, and not inside a &lt;code&gt;src&lt;/code&gt; group. If you add more files and directories to your &lt;code&gt;src&lt;/code&gt; folder, you’ll see
those files put into groups named to match the directories.&lt;/p&gt;

&lt;p&gt;So, that’s it. There are the basics of Premake that will serve you for small to medium projects. You’ll find that it’s
far easier to write a quick Premake script than to manually construct a Visual Studio project. More importantly, this
also removes one small but important barrier to being cross-platform. Let’s copy our source files to a Mac, and grab
a Mac version of the premake binary.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;premake5 --file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;premake-minimal.lua xcode4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Success! We have a build/mine.xcodeproj that we can build and debug and run. And this is why people like using
Premake (or CMake, or Scons, or Gyp), because there are many projects that are cross-platform.&lt;/p&gt;

&lt;p&gt;And, for fun, we can generate a makefile project that is consumed by GNU Make (gmake). We’ll do this on the Mac,
although with a little tweaking, you could turn it into a makefile that Windows NMake could consume.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;premake5 --file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;premake-minimal.lua gmake&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And, if we look in our &lt;code&gt;build/&lt;/code&gt; directory, we’ll see a makefile named &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;identifying-boilerplate&quot;&gt;Identifying boilerplate&lt;/h2&gt;

&lt;p&gt;Boilerplate is a term that means “stuff I copy over and over again just to make the system happy”. In
general, we want a system that is as concise as possible, where everything I add is necessary and
unique to my project. This has to be balanced against the needs of syntax and semantics. Keywords like
“solution” aren’t boilerplate if they are necessary to declare some information that is needed.&lt;/p&gt;

&lt;p&gt;Looking at our minimal project, there is some boilerplate related to how we define debug and release
builds. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;NDEBUG&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Every C/C++ project I make that uses the standard C library needs to have &lt;code&gt;NDEBUG&lt;/code&gt; defined for
non-debug builds. And Microsoft long ago introduced a parallel construction, every debug build should
have &lt;code&gt;_DEBUG&lt;/code&gt; defined (I suppose they didn’t like &lt;code&gt;#ifndef NDEBUG&lt;/code&gt; as a guard).&lt;/p&gt;

&lt;p&gt;This is right on the edge of boilerplate, because Premake doesn’t have any idea of predefined meaning
for configurations, so how does Premake now that my config is debug or release? However, and also
looking at symbols and optimization, there are common idioms. Maybe we should have been able to
introduce all of them at once. This makes sense given that &lt;code&gt;optimize &quot;On&quot;&lt;/code&gt; itself is a collection
of predefined options for what “optimized” means.&lt;/p&gt;

&lt;p&gt;One way would have been to attach information to a configuration. Doing it in a filter is one way, but
verbose. What if we just told it when we declared the configurations.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Debug&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;debug&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Release&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;release&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And if the configuration name matches one of our sets (built-in or not), then we wouldn’t need to
specify this. In the above, I’m saying that the “debug” set is “#define _DEBUG, build debug symbols”,
and the “release” set is “#define NDEBUG, turn full optimization on”.&lt;/p&gt;

&lt;p&gt;This makes my small script even smaller, but more importantly it gets rid of duplicated code. The lines
above are likely to be seen, in one form or another, in every Premake script ever made. This is
a large part of what leads to copy/paste makefiles; a ton of common operations that need to be done,
so why not just copy it instead of re-write it. It’s just that copying is the poor man’s code re-use,
because errors and misunderstandings are just as easily propagated as best practices and required
structure.&lt;/p&gt;

&lt;h2 id=&quot;canonical-minimal-premake-script&quot;&gt;Canonical minimal Premake script&lt;/h2&gt;

&lt;p&gt;Here’s a commented version of the minimal premake script, usable as a standalone reference. Because this
is Lua, we can comment it, and we could even compose it as functions (which we would do for a very large
project).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- A solution is the top-level entity in Premake. In Visual Studio, this&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- maps to a Visual Studio solution file (.sln). In XCode, this maps&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- to an XCode workspace (.xcworkspace). In make, this is a makefile.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysolution&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- A solution has one or more configurations. The names of the configurations&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- are arbitrary and are strings that can be matched by filters to customize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- behavior. Each project is generated for each possible configuration.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Debug&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Release&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- The location specifies where Premake will put generated files. If not&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- specified, the default is the directory where the premake script lives.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- Non-absolute paths are relative to the premake script (and good practice&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- would be to avoid absolute paths in project scripts).&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- A project is the next-level entity in Premake; solutions contain one&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- or more projects. While this conceptually belongs to the solution, it&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- belongs to the solution only because solution is a singleton.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myproject&amp;quot;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;-- A project has a kind, which is the form of the generated output for&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- this project. There are four kinds: StaticLib, SharedLib, ConsoleApp,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- and WindowedApp (the last is unique to Windows and Mac OS X).&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ConsoleApp&amp;quot;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;-- A project has one or more source files in it. These can be enumerated&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- individually, or specified with wildcards. The &amp;#39;**&amp;#39; wildcard is used&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- to recurse through directories, not just to match in a single directory.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**.cpp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**.h&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**.c&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;-- filters can be used to apply settings to a subset of the configurations&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- and architectures. In this case, we are applying some settings to just&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- the debug configuration.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;configurations:Debug&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;_DEBUG&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
            &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Symbols&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;-- In this case, we are applying some settings to just the release&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- configuration&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;configurations:Release&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;NDEBUG&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
            &lt;span class=&quot;n&quot;&gt;optimize&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;On&amp;quot;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;-- A filter is in effect until the end of the file, or until it is replaced&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- with another filter. As a good engineering practice, we want to end a&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- filter as soon as we no longer need it; the way to do this is to say&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- &amp;quot;filter nothing&amp;quot;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;Unfortunately, Premake documentation is now disjoint. There was a major version change, but lots of useful
documentation was orphaned. Concepts were explained better in older documentation, you just need to be careful
because syntax and features have changed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://industriousone.com/premake/userguide&quot;&gt;Original User Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/premake/premake-4.x/wiki&quot;&gt;Premake 4.x User Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/premake/premake-core/wiki&quot;&gt;Premake 5.x User Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Likewise, the original home for Premake development was on the industriousone web site, but is now in GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/premake&quot;&gt;premake on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://premake.github.io/&quot;&gt;New Premake home page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://industriousone.com/&quot;&gt;industriousone&lt;/a&gt;. However, there are no links to Premake content, but Google searches
will show links to the old forums and help articles.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://industriousone.com/forums/premake&quot;&gt;Old forums for Premake&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!forum/premake-development&quot;&gt;Google Groups Premake forum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://industriousone.com/forums/premake/premake-cookbook&quot;&gt;Premake Cookbook&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Feb 2016 09:00:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/17/minimal-premake.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/17/minimal-premake.html</guid>
        
        <category>premake,</category>
        
        <category>build</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://urubu.jandecaluwe.com/&quot;&gt;Urubu, a micro CMS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/src-d/go-git&quot;&gt;src-d/go-git&lt;/a&gt;. A Git client library written in Go.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://appfs.rkeene.org/web/index&quot;&gt;AppFS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rdeltour.github.io/xmlprague2016-epub31/#1&quot;&gt;EPUB 3.1 Standard Update&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.idpf.org/epub/31/spec/epub-spec.html&quot;&gt;EPUB 3.1 Editor’s Draft&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2245962/is-there-an-alternative-for-flex-bison-that-is-usable-on-8-bit-embedded-systems/2336769#2336769&quot;&gt;Is there an alternative for flex/bison that is usable on 8-bit embedded systems?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/META_II&quot;&gt;META II&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/25049751/constructing-an-abstract-syntax-tree-with-a-list-of-tokens/25106688#25106688&quot;&gt;Constructing an Abstract Syntax Tree with a list of Tokens&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/31600121/without-using-eval-or-a-constructor-function-in-javascript-how-can-i-calculate/31621205#31621205&quot;&gt;Without using eval or a constructor function in Javascript , how can I calculate arithmetic in a given string&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5629981/question-about-visual-studio-sln-file-format&quot;&gt;Question about Visual Studio *.sln file format&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb165951.aspx&quot;&gt;Solution (.Sln) File&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codeproject.com/Reference/720512/List-of-Visual-Studio-Project-Type-GUIDs&quot;&gt;List of Visual Studio Project Type GUIDs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2911565/what-is-the-significance-of-projecttypeguids-tag-in-the-visual-studio-project-fi&quot;&gt;What is the significance of ProjectTypeGuids tag in the visual studio project file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://raph.es/blog/2011/04/targeting-platforms-in-visual-studio/&quot;&gt;Targeting Platforms In Visual Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://code4k.blogspot.com/2014/05/managing-multiple-platforms-in-visual.html&quot;&gt;Managing multiple platforms in Visual Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.spinthemoose.com/2013/05/05/parsing-vs-solution-files-with-sprache/&quot;&gt;Parsing VS Solution files with Sprache&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Feb 2016 23:57:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/16/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/16/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;Bell Labs (now part of Alcatel-Lucent) has published a book: The Future X Network: Enabling a New Digital Era (Oct 2015); author listed as Marcus Weldon, the Alcatel-Lucent CTO, but apparently the work of the entire group.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://broadbandworldforum.com/files/2015/09/Bell-labs-Future-X-Network-sample.pdf&quot;&gt;sample chapter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://readymag.com/BellLabs/415614/&quot;&gt;overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1498759262/ref=pd_luc_rh_qp_01_03_t_img_lh?ie=UTF8&amp;amp;psc=1&quot;&gt;Amazon link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://howardhinnant.github.io/&quot;&gt;HowardHinnant.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/81870/is-it-possible-to-print-a-variables-type-in-standard-c/20170989#20170989&quot;&gt;Is it possible to print a variable’s type in standard C++?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1487695/c-cross-platform-high-resolution-timer/5524138#5524138&quot;&gt;C++ Cross-Platform High-Resolution Timer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;IANA: Time Zone Database&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ietf.org/timezones/data/leap-seconds.list&quot;&gt;List of all leap seconds to date (early 2016)&lt;/a&gt;. There have been 27 leap seconds (all positive, none negative) from Jan 1972 to July 2015. At first, we were doing a leap second a year, but in the past 15 years, we’ve only had 4 of them. The responsible group is considering halting the issuing of leap seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_time&quot;&gt;Unix time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc6557&quot;&gt;RFC 6557: Procedures for Maintaining the Time Zone Database&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://web.mit.edu/2.75/resources/random/How%20Complex%20Systems%20Fail.pdf&quot;&gt;How Complex Systems Fail&lt;/a&gt;. From the medical profession, but very relevant to software.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.grymoire.com/Unix/Inodes.html&quot;&gt;Inodes - an Introduction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.linux.org/threads/intro-to-inodes.4130/&quot;&gt;Intro to Inodes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.linfo.org/inode.html&quot;&gt;Inode definition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.kubernetes.io/2016/02/sharethis-kubernetes-in-production.html&quot;&gt;ShareThis: Kubernetes In Production&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aeon.co/essays/generational-labels-are-lazy-useless-and-just-plain-wrong&quot;&gt;Against generations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bup/bup&quot;&gt;bup/bup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://octavore.com/posts/2016/02/15/distributing-go-apps-os-x&quot;&gt;How to Distribute Binaries for OS X Using Homebrew&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/linux/library/l-anatomy-ext4/&quot;&gt;Anatomy of ext4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://support.microsoft.com/en-us/kb/129574&quot;&gt;Time stamp changes with daylight savings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2532729/daylight-saving-time-and-time-zone-best-practices&quot;&gt;Daylight saving time and time zone best practices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wireshark.org/docs/wsug_html_chunked/ChAdvTimezones.html&quot;&gt;Wireshark: 7.6. Time Zones&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;ftp://pvictor.homeftp.net/public/Sci_Library/Phys%20Library/PPop_Popular-level/Jones%20T.%20%20Splitting%20the%20second%20-%20the%20story%20of%20atomic%20time%20(IOP,%202000)(202s).pdf&quot;&gt;Splitting the second: The Story of Atomic Time&lt;/a&gt;. A book on the making of atomic time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.twinsun.com/tz/tz-link.htm&quot;&gt;Sources for Time Zone and Daylight Saving Time Data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dubeiko.com/development/FileSystems/HFSPLUS/tn1150.html&quot;&gt;Technical Note TN1150: HFS Plus Volume Format&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nobius.org/~dbg/practical-file-system-design.pdf&quot;&gt;Practical File System Design with the Be File System&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hierarchical_File_System&quot;&gt;Hierarchical File System&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/docs/guides/working-with-different-filesystems/&quot;&gt;Node.js: Working with Different Filesystems&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3344.pdf&quot;&gt;Toward a Standard C++ ’Date’ Class&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/atemerev/skynet&quot;&gt;Skynet 1M concurrency microbenchmark&lt;/a&gt;. Go is fast, but .NET is faster, and RxJava is the fastest. Except on Linux?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://panthema.net/2009/cryptote/&quot;&gt;CryptoTE&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Feb 2016 15:31:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/14/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/14/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

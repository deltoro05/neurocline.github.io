<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 03 May 2015 12:21:12 -0700</pubDate>
    <lastBuildDate>Sun, 03 May 2015 12:21:12 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Quadratic voting</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/QuadraticVoting.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The influence of money in politics goes back thousands of years, and very likely longer. We
try to make institutions that can run properly, making good decisions. The American form
of government has done pretty well over the years, despite the influence of money (“buying votes”).&lt;/p&gt;

&lt;p&gt;Can we do better? Quadratic Voting is an attempt to do so. Basically, the cost of votes
goes up quadratically with the number of votes you cast. You can cast as many votes as
you want, but it will cost you.&lt;/p&gt;

&lt;p&gt;One of the coolest variants I heard, Quadratic Vote Buying, is quite simple: you can spend as
much money on votes as you want. All the voting money is returned equally to the whole voting
public (whether they voted or not). So, as an example, assume there are 10 voters, and I’m one
of them. Everyone except me casts 1 vote, and I cast 10 votes. My 10 votes cost me $100, and all
others pay $1 each for their 1 vote. At the end, each of us gets $10.90 returned. So I might
get my way, but you get my money to cushion the blow. And with a lot of voters, it’s still really
hard to get your way if it differs from the majority. In fact, that’s the point; in current systems
you can buy elections, in Quadratic Voting, it’s harder, but it’s allowed.&lt;/p&gt;

&lt;p&gt;I want to do my own explorations into this idea, but in the mean time, here are some
things you can read. Or the names you can Google include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Glen Weyl&lt;/li&gt;
  &lt;li&gt;Steven P. Lalley&lt;/li&gt;
  &lt;li&gt;Rory Sutherland&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first reference I saw to this was on Marginal Revolution, but it’s been around for
a while, I just missed hearing about it.&lt;/p&gt;

&lt;h3 id=&quot;articles&quot;&gt;Articles&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://ericposner.com/quadratic-voting/&quot;&gt;Quadratic Voting&lt;/a&gt;. Eric Posner piece written when
the Weyl/Lalley paper went up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://marginalrevolution.com/marginalrevolution/2015/01/my-thoughts-on-quadratic-voting-and-politics-as-education.html&quot;&gt;My thoughts on quadratic voting and politics as education&lt;/a&gt;.
Tyler Cowen weighs in on QV.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.spectator.co.uk/features/9512322/humans-are-doing-democracy-wrong-bees-are-doing-it-right/&quot;&gt;Humans are doing democracy wrong. Bees are doing it right&lt;/a&gt;. Article in the
Spectator on learning from bees when it comes to voting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://marginalrevolution.com/marginalrevolution/2015/05/square-dancing-bees-and-quadratic-voting.html&quot;&gt;Square Dancing Bees and Quadratic Voting&lt;/a&gt;. Article commenting on the Spectator article.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://freakonomics.com/2012/10/31/an-alternative-to-democracy/&quot;&gt;An Alternative to Democracy?&lt;/a&gt;. Freakonomics weighs in on Quadratic Voting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.slate.com/articles/news_and_politics/view_from_chicago/2013/06/new_york_s_bike_share_try_quadratic_vote_buying_to_figure_out_if_people.html&quot;&gt;The Good Way to Buy Votes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.law.uchicago.edu/node/16996&quot;&gt;Research Matters: Eric Posner on “Quadratic Vote Buying as Efficient Corporate Governance”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.overcomingbias.com/2015/01/collusion-in-quadratic-voting.html&quot;&gt;Collusion In Quadratic Voting&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=9477747&quot;&gt;Quadratic Voting - Hacker News&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.reddit.com/r/Economics/comments/34nn2r/quadratic_voting_an_economic_take_on_casting/&quot;&gt;Quadratic Voting - Reddit&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;papers&quot;&gt;Papers&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2003531&quot;&gt;Quadratic Voting&lt;/a&gt;. The 2014 paper
from Lalley and Weyl.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.valuewalk.com/2015/01/gauging-efficiency-quadratic-voting/&quot;&gt;Gauging the Efficiency of Quadratic Voting&lt;/a&gt;. Lalley and Weyl.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2343956&quot;&gt;Voting Squared: Quadratic Voting in Democratic Politics&lt;/a&gt;. Posner and Weyl.&lt;/p&gt;

&lt;h3 id=&quot;historical&quot;&gt;Historical&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://oll.libertyfund.org/titles/mandeville-the-fable-of-the-bees-or-private-vices-publick-benefits-2-vols&quot;&gt;The Fable of the Bees&lt;/a&gt;&lt;/em&gt;, Bernard Mandevill, 1714, 1732. Also see &lt;a href=&quot;http://en.wikipedia.org/wiki/The_Fable_of_the_Bees&quot;&gt;Wikipedia article&lt;/a&gt;. This  influenced Adam Smith and later John Maynard Keynes.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 May 2015 04:34:00 -0700</pubDate>
        <link>http://neurocline.github.io/politics/2015/05/03/quadratic-voting.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/politics/2015/05/03/quadratic-voting.html</guid>
        
        
        <category>politics</category>
        
      </item>
    
      <item>
        <title>Modernizing Emacs</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/ModernizeEmacs.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Emacs and Vi have several claims to fame - they are both some of the longest-running
active software tools in history, and one of the longest-running rivalries in software.&lt;/p&gt;

&lt;p&gt;Here is a heart-felt request from an Emacs user on changes that Emacs should adopt
to be more relevant in today’s world:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ergoemacs.org/emacs/modernization.html&quot;&gt;Modernization of Emacs (Simple Changes Emacs Should Adopt)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s worth reading. I think it was first written in 2006 and then updated in 2013. The first
part of the article rambles, but the FAQ is where the important bits are.&lt;/p&gt;

&lt;p&gt;My favorite part of the article was the reminder that the Lisp Machine keyboard that Emacs was
first written for didn’t just have a Meta key - it had:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hyper&lt;/li&gt;
  &lt;li&gt;Super&lt;/li&gt;
  &lt;li&gt;Meta&lt;/li&gt;
  &lt;li&gt;Control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Emacs used all those keys, and still supports super and hyper to this day. By default, Alt
on “modern” keyboards is the Meta key, but you can map keys to Hyper and Super if you want:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ergoemacs.org/emacs/emacs_hyper_super_keys.html&quot;&gt;Emacs: How to Define Super &amp;amp; Hyper Keys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Crazy.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 May 2015 03:51:00 -0700</pubDate>
        <link>http://neurocline.github.io/editor/2015/05/03/modernizing-emacs.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/editor/2015/05/03/modernizing-emacs.html</guid>
        
        
        <category>editor</category>
        
      </item>
    
      <item>
        <title>Git limits and the Linux repo</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/LinuxGit.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;According to Linus Torvald’s announcement about the Linux 4.0 release,
the Linux git repo now has over 4 million git objects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lkml.org/lkml/2015/4/12/178&quot;&gt;Ima Sheep&lt;/a&gt; from lkml.org&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Looking at just the statistics in git, this release is not
just when we cross half a million commits total, but also cross the 4
million git object limit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The sentence should be parsed as “we crossed the 4 million git objects line” instead of
reading that there is a maximum of 4 million objects. But even otherwise, since there
was no panic, we can see that 4 million objects in a repo is not cause for alarm.&lt;/p&gt;

&lt;p&gt;It’s important to note that there’s no real difference between small blobs and big
blobs in terms of most operations - getting history, creating branches and so on.
It’s also true that blobs as patches versus blobs as whole files is mostly irrelevant
too, except at the point where you are checking out a revision.&lt;/p&gt;

&lt;p&gt;So, Git can handle 4 million git objects in a repo. Let’s compare that to a large
game’s code base. Our big game will have about 250K files in it. Let’s say that each
file is modified an average of 10 times; that’s 2.5 million files. I also have access
to some large projects, so I’ll be looking into them to see how big they are, but
I think the last time I looked at a large repo, it was several million
file objects.&lt;/p&gt;

&lt;h3 id=&quot;addendum&quot;&gt;Addendum&lt;/h3&gt;

&lt;p&gt;The picture above is of the Linux kernel, from visualizations done by the
&lt;a href=&quot;https://code.google.com/p/gource/wiki/Screenshots&quot;&gt;Gource&lt;/a&gt; project.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 May 2015 18:28:00 -0700</pubDate>
        <link>http://neurocline.github.io/git/linux/2015/05/02/git-and-linux-repo.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/git/linux/2015/05/02/git-and-linux-repo.html</guid>
        
        
        <category>git</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Playing with fonts</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/HotType.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m playing with web fonts finally, starting with Google Fonts. At the moment,
the blog is set to use Old Standard TT, which has a certain charm for the body
text, but isn’t that great for titles.&lt;/p&gt;

&lt;p&gt;Other fonts I like from the Google Fonts set include Merriweather and Vollkorn,
although I’ll probably go boring and use Open Sans. Another choice is to use
PT Serif and PT Sans, as they were designed to go together. But then I’ll need
to figure out the CSS so I can have header fonts with a distinct type.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.com/fonts&quot;&gt;Google Fonts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/fonts/docs/getting_started&quot;&gt;Getting Started With Google Fonts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hellohappy.org/beautiful-web-type/&quot;&gt;Beautiful Web Type&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 May 2015 17:38:00 -0700</pubDate>
        <link>http://neurocline.github.io/html/blog/2015/05/02/playing-with-fonts.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/html/blog/2015/05/02/playing-with-fonts.html</guid>
        
        
        <category>html</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Font Awesome</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/FontAwesome.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is cool&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/&quot;&gt;Font Awesome&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an open-source and free icon font. It’s pretty easy to use, you add
the font-awesome directory to your project, reference the font-awesome stylesheet
from your page, and then just start adding characters in the font.&lt;/p&gt;

&lt;p&gt;It works well with Bootstrap 3, and you can either integrate Bootstrap yourself,
or start with the Jekyll-Bootstrap project. Or, just hand-add CSS and HTML
yourself.&lt;/p&gt;

&lt;p&gt;I added this to my &lt;code&gt;_includes/head.html&lt;/code&gt; template file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ &amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;font-awesome&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;font-awesome&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;prepend:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baseurl&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here’s a corny yet effective example:&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-refresh fa-4x fa-spin&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fa fa-refresh fa-4x fa-spin&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hope to have fun with this, in tasteful effective ways.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/icons/&quot;&gt;Font Awesome Icons&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 May 2015 15:56:00 -0700</pubDate>
        <link>http://neurocline.github.io/html/blog/2015/05/02/font-awesome.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/html/blog/2015/05/02/font-awesome.html</guid>
        
        
        <category>html</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Fun and useful HTML Entities</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/HtmlEntities.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sgml-rarr-html-rarr-xml-rarr-html5&quot;&gt;SGML → HTML → XML → HTML5&lt;/h1&gt;

&lt;p&gt;HTML Entities are still necessary in some cases, and useful all around.&lt;/p&gt;

&lt;p&gt;Some characters can’t be represented directly in HTML - the ‘&amp;lt;’ character,
for example, opens an HTML tag, so if you want this in HTML, you need to
use the HTML entity &lt;code&gt;&amp;amp;lt;&lt;/code&gt;. Other characters are impossible to type
on some keyboards, or only draw in specific fonts: the ‘→’ character,
which is the HTML entity &lt;code&gt;&amp;amp;arr;&lt;/code&gt;. Diacritical marks are another
reason to use entities.&lt;/p&gt;

&lt;p&gt;HTML entities have names that you can memorize. However, each HTML entity
has an Entity Number, and this is, not coincidentally, the Unicode
codepoint for the character. You can write HTML entities in decimal, or
you can write them in hexadecimal, which is how Unicode codepoints are
usually documented.&lt;/p&gt;

&lt;p&gt;Here’s my list of useful HTML Entities. The first 3 are the reserved
characters where you must use the HTML entity, the rest are just awkward
or impossible to type. And strictly speaking, ‘&amp;gt;’ is not reserved, it’s
just best to treat it that way, because there are many cases where it must
be written as an entity.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Character&lt;/th&gt;
      &lt;th&gt;Entity-name&lt;/th&gt;
      &lt;th&gt;Entity-number&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;amp;&lt;/td&gt;
      &lt;td&gt;&amp;amp;amp;&lt;/td&gt;
      &lt;td&gt;&amp;amp;#38;&lt;/td&gt;
      &lt;td&gt;ampersand&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;lt;&lt;/td&gt;
      &lt;td&gt;&amp;amp;lt;&lt;/td&gt;
      &lt;td&gt;&amp;amp;#60;&lt;/td&gt;
      &lt;td&gt;less-than&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;gt;&lt;/td&gt;
      &lt;td&gt;&amp;amp;gt;&lt;/td&gt;
      &lt;td&gt;&amp;amp;#62;&lt;/td&gt;
      &lt;td&gt;greater-than&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&amp;amp;nbsp;&lt;/td&gt;
      &lt;td&gt;&amp;amp;#160;&lt;/td&gt;
      &lt;td&gt;non-breaking space&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;←&lt;/td&gt;
      &lt;td&gt;&amp;amp;larr;&lt;/td&gt;
      &lt;td&gt;&amp;amp;#8592;&lt;/td&gt;
      &lt;td&gt;leftwards arrow&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;→&lt;/td&gt;
      &lt;td&gt;&amp;amp;rarr;&lt;/td&gt;
      &lt;td&gt;&amp;amp;#8594;&lt;/td&gt;
      &lt;td&gt;rightwards arrow&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;html-entities-you-should-not-use&quot;&gt;HTML Entities you should not use&lt;/h2&gt;

&lt;p&gt;Because many web developers were American or English, and because early
HTML support was somewhat primitive, the habit of using unusual characters
as separators developed.&lt;/p&gt;

&lt;p&gt;Don’t do it. Here’s a list of characters you should avoid using except
for their actual purpose.&lt;/p&gt;

&lt;h3 id=&quot;guillemets&quot;&gt;Guillemets&lt;/h3&gt;

&lt;p&gt;Characters: ‹ › « »&lt;/p&gt;

&lt;p&gt;These are punctuation marks in languages like French. However, they are often
misused either as button labels for forward and backward navigation, or as
separator characters in a breadcrumb navigation list.&lt;/p&gt;

&lt;p&gt;A French reader would use the latter two quotes to indicate speech:&lt;/p&gt;

&lt;p&gt;« Bonjour, Sally. » dit Charles.&lt;/p&gt;

&lt;p&gt;Imagine how confusing it is to see your quote marks used as some mysterious
and arcane symbol in a list. Don’t do it. Use arrow characters like ← and
→ instead, or some other appropriate character. Or, use SVG or icons.&lt;/p&gt;

&lt;p&gt;Fun trivia fact: Adobe originally got this wrong and called these guillemot.
Unfortunately, a guillemot is a species of seabird. Adobe noted their error
in the Postscript Language Reference, 3rd edition, 1999, but the harm was done,
and many English-speakers still refer to these by the incorrect name.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3schools.com/html/html_entities.asp&quot;&gt;HTML Entities (w3schools)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.w3.org/html5/html-author/charref&quot;&gt;Character Entity Reference Chart&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikibooks.org/wiki/Unicode/Character_reference/0000-0FFF&quot;&gt;Unicode character reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_Unicode_characters&quot;&gt;List of Unicode characters&lt;/a&gt; from Wikipedia.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://unicode.org/charts/&quot;&gt;Unicode 7.0 Character Code Charts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://unicode-table.com/en/&quot;&gt;Unicode table&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.danshort.com/HTMLentities/&quot;&gt;HTML Entities (danshort)&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 May 2015 14:40:00 -0700</pubDate>
        <link>http://neurocline.github.io/html/blog/2015/05/02/fun-and-useful-html-entities.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/html/blog/2015/05/02/fun-and-useful-html-entities.html</guid>
        
        
        <category>html</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>A Jekyll Workflow</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/JekyllWorkflow.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is my current Jekyll workflow.&lt;/p&gt;

&lt;p&gt;Since I update my blog from multiple computers, the first step is to sync with latest from GitHub:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; cd neurocline.github.io
&amp;gt; git fetch --all
&amp;gt; git rebase origin/sources sources
&amp;gt; cd _site
&amp;gt; git rebase origin/master master
&amp;gt; cd ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes, I almost always fetch instead of pull, because if I had forgotten I’d made local changes, I
don’t want a merge commit (even true when working in a group). That’s the reason for the rebase; I
could do &lt;code&gt;git merge --ff-only ...&lt;/code&gt; instead, which would either do a fast-forward or stop if
there are changes that need to be merged.&lt;/p&gt;

&lt;p&gt;Now that I’m up to date, I need to run a local jekyll server so I can preview what I’m doing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; jekyll serve --drafts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I use &lt;code&gt;--drafts&lt;/code&gt; because I invariably have one or more draft articles, and I won’t see them
otherwise.&lt;/p&gt;

&lt;p&gt;Now I edit posts. Currently I just do it the “hard” way, by typing everything; no help from rake
or the like. I expect I’ll get fancier as I write more.&lt;/p&gt;

&lt;p&gt;When I’m done for a bit, I stop the jekyll server, bake what I have, and commit:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[ctrl-C to stop server]
&amp;gt; jekyll build
&amp;gt; git add -A
&amp;gt; git commit -m &amp;quot;First cut of workflow post&amp;quot;
&amp;gt; git push origin sources
&amp;gt; cd _site
&amp;gt; git add -A
&amp;gt; git commit -m &amp;quot;First cut of workflow post&amp;quot;
&amp;gt; git push origin master
&amp;gt; cd ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And since all of this is repetitive, I’ll soon look into one of the systems that automates this
a little (I’ve seen hints of this), or I’ll write something myself.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 May 2015 12:15:00 -0700</pubDate>
        <link>http://neurocline.github.io/jekyll/blog/2015/05/02/jekyll-workflow.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/jekyll/blog/2015/05/02/jekyll-workflow.html</guid>
        
        
        <category>jekyll</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Generating Projects with Premake</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/Premake.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a goal - a cross-platform build system. It still doesn’t exist, and someday I’ll be
forced to make it. Until then, I keep trying things. One of those things is Premake.&lt;/p&gt;

&lt;p&gt;Premake is a cross-platform project generation system. So, while it’s not a build system, it
handles one of the hard parts, code. It uses a Lua scripting system; your build definition
files are Lua scripts with lots of predefined behavior handled by the Premake engine. So, like
SCons, you start off on familiar ground with a powerful language that has widespread usage.&lt;/p&gt;

&lt;p&gt;Unlike SCons, Premake is a C application. There are some positives - C code can run on almost
any system. But, you need to bootstrap Premake, because (of course) Premake is built with
Premake. This is only annoying when you start using Premake, then, like any self-hosting system,
you forget there was a time before self-compiling.&lt;/p&gt;

&lt;p&gt;Premake had a big re-architecture pass happen in 2014, and (as of this writing in May 2015) is
just now starting to shape up. The original developer, Kitware, had a strong Visual Studio bias,
which shows not just in the features in Premake, but that Xcode support is only just now
re-emerging. That said, Premake 5 is what you should be using.&lt;/p&gt;

&lt;p&gt;So, how do you get started with Premake?&lt;/p&gt;

&lt;h2 id=&quot;bootstrapping&quot;&gt;Bootstrapping&lt;/h2&gt;

&lt;p&gt;Prebuilt Premake binaries can be found on the &lt;a href=&quot;http://premake.github.io/download.html&quot;&gt;Premake Download&lt;/a&gt; site.&lt;/p&gt;

&lt;p&gt;Grab binaries as needed; even if you want to be building from source (e.g. adding features to
Premake), you’ll need at least one existing Premake version. Fortunately, Premake 5 can be
bootstrapped with Premake 4. When I went to grab a build in late April, the built Windows binary
was broken, but a nightly build worked.&lt;/p&gt;

&lt;p&gt;I’m going grab a latest &lt;a href=&quot;http://sourceforge.net/projects/premake/files/Premake/nightlies/premake-dev-windows.zip/download&quot;&gt;Windows build&lt;/a&gt;, and put the Premake binary in
&lt;code&gt;C:\Dev\premake5\premake5.exe&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;building-premake-from-source&quot;&gt;Building Premake from source&lt;/h2&gt;

&lt;p&gt;Premake source, along with the online manual, has moved to GitHub; see &lt;a href=&quot;https://github.com/premake/premake-core&quot;&gt;Premake on GitHub&lt;/a&gt;.
It’s very easy to build - clone the repo, run an existing premake, and then build from the generated
project:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; git clone git@github:premake/premake-core.git
&amp;gt; cd premake-core.git
&amp;gt; C:\Dev\premake5\premake5.exe vs2013
Building configurations...
Running action &amp;#39;vs2013&amp;#39;...
Generating Premake5.sln...
Generating Premake5.vcxproj...
Generating Premake5.vcxproj.filters...
Done.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, there is a Visual Studio 2013 solution in the root folder that you can open and
build, or use msbuild from the command-line to build from it. And once you start using Premake,
you’ll wonder why project files aren’t tucked away in a folder so that multiple .gitignore
statements aren’t required to handle all possibilities. We put generated projects in the build
folder, because that’s where all generated artifacts go.&lt;/p&gt;

&lt;p&gt;If you have never built Premake from the given repo before, or you’ve changed the Lua scripts,
there’s one final step to take, which is to embed the scripts in the executable. This copies
all the Lua scripts into a script.c file that’s then part of the binary.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt;c:\dev\premake5\premake5.exe embed
Running action &amp;#39;embed&amp;#39;...
Writing scripts.c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Premake will load the loose scripts from disk if they exist, and since a lot of the Premake
functionality is actually in the Lua scripts, this makes it easy to iterate quickly when adding
or updating Premake functionality. But in normal practice, it’s just the single binary that’s
distributed, hence the need for the embedding step.&lt;/p&gt;

&lt;h2 id=&quot;a-simple-premake-project&quot;&gt;A simple Premake project&lt;/h2&gt;

&lt;p&gt;Let’s make a Hello World program.&lt;/p&gt;

&lt;p&gt;No, that’s too simple. Let’s create a Visual Studio solution and project file for libgit2 (which uses
CMake).&lt;/p&gt;

&lt;p&gt;Get the libgit2 source from GitHub:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt;git clone git@github.com:libgit2/libgit2.git
cd libgit2.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now create a file named premake5.lua in the root folder of the libgit2 project, with this as the
contents:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;solution &amp;quot;Libgit2&amp;quot;
    configurations { &amp;quot;Debug&amp;quot; }
    location (&amp;quot;build&amp;quot;)

project &amp;quot;libgit2&amp;quot;
    targetname &amp;quot;libgit2&amp;quot;
    language &amp;quot;C&amp;quot;
    kind &amp;quot;StaticLib&amp;quot;
    location (&amp;quot;build/projects&amp;quot;)

    files
    {
        &amp;quot;**.c&amp;quot;, &amp;quot;**.h&amp;quot;
    }
    
    configuration &amp;quot;Debug&amp;quot;
        targetdir &amp;quot;build/bin/debug&amp;quot;
        defines { &amp;quot;_DEBUG&amp;quot;, &amp;quot;WIN32&amp;quot; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Why &lt;code&gt;premake5.lua&lt;/code&gt;? This is the default name for a premake config script in Premake5. You can
name it anything, but you’ll then need to pass that name on the command-line, because Premake5
isn’t going to try to guess.&lt;/p&gt;

&lt;p&gt;This is not a production-quality premake file. For one, it only targets Windows and Visual Studio,
and one of the main points of using Premake is that it is cross-platform. However, I want to build
up to that, but also to show that you can very quickly generate projects for any codebase.&lt;/p&gt;

&lt;p&gt;This won’t build, of course. I’m writing it blind without referencing the CMake script. But that’s
ok for now.&lt;/p&gt;

&lt;p&gt;Run Premake5 to generate a solution:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; C:\Dev\premake5\premake5.exe vs2013
Building configurations...
Running action &amp;#39;vs2013&amp;#39;...
Generating build/Libgit2.sln...
Generating build/projects/libgit2.vcxproj...
Generating build/projects/libgit2.vcxproj.filters...
Done.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you run this, you’ll see that a build folder has been created, and inside that build folder
is a Visual Studio solution and related project folder. All the source files are in that single
project.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt;dir build /s /b
build\Libgit2.sln
build\projects
build\projects\libgit2.vcxproj
build\projects\libgit2.vcxproj.filters&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you open the Libgit2.sln project, you’ll see it’s full of source and header files, arranged in
folders that mimic the source tree layout. This is the default behavior.&lt;/p&gt;

&lt;p&gt;If you try building, it will “work” for some degree of work - that is, it will start compiling, but
generate lots of errors because header files can’t be found.&lt;/p&gt;

&lt;p&gt;Let’s fix just the simplest error. The code expects a path to the include/ folder, because many of
the includes are of the form &lt;code&gt;#include &quot;git2/common.h&quot;&lt;/code&gt;. Add this section right after the
&lt;code&gt;files&lt;/code&gt; section in the premake5.lua file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;includedirs
{
    &amp;quot;../../include&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Re-run the &lt;code&gt;premake5.exe vs2013&lt;/code&gt; command. It will overwrite files in place, although if you’re
like me, you’ll just delete the whole build folder (always safe to do, since it’s generated). Now
open the project again.&lt;/p&gt;

&lt;p&gt;Important note: Premake generates paths relative to the lua file being executed. Even though
the project file ends up several levels deep in the build folder, your premake5.lua script
describes files relative to itself. So, since the &lt;code&gt;include/&lt;/code&gt; folder is at the same level
as our &lt;code&gt;premake5.lua&lt;/code&gt; file, we can just say &lt;code&gt;&quot;include&quot;&lt;/code&gt;. If you look in the project
file, you’ll see the actual include paths looks something like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;..\..\include;%(AdditionalIncludeDirectories)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s for reasons like this that using Premake even on a single platform can be a boost. If you’re
careful, your premake scripts will stay small and readable, and that can’t be said for large
programs with dozens of solutions and hundreds of project files. Simply making a small change to
a large hierarchy of projects (say, to add a define) can be time-consuming and error-prone. Yes,
you could attempt to use property sheets in modern versions of Visual Studio, or the equivalent
in other build systems.&lt;/p&gt;

&lt;p&gt;Or you can just write your projects in a far more readable form and generate them.&lt;/p&gt;

&lt;p&gt;I’ll return to Premake in future posts, as I lay out some best practices for using Premake on
both small and large projects. I’ll also be looking at the other contenders in this space, and
hypothesizing on what the “perfect” system would look like. For example, Premake5 is very
Windows-centric, and this makes for slightly confusing operation when trying to generate Xcode
projects, because Xcode uses different names for things, and even has slightly different behavior.&lt;/p&gt;

&lt;p&gt;More to follow.&lt;/p&gt;

</description>
        <pubDate>Sat, 02 May 2015 10:00:00 -0700</pubDate>
        <link>http://neurocline.github.io/premake/build/2015/05/02/generating-projects-with-premake.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/premake/build/2015/05/02/generating-projects-with-premake.html</guid>
        
        
        <category>premake</category>
        
        <category>build</category>
        
      </item>
    
      <item>
        <title>Using Jekyll for a blog</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/JekyllBlogging.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been unhappy with Wordpress for a while now - it’s slow, it’s cumbersome to add content,
and it’s riddled with insecurities. Despite not being a “web programmer”, I’ve decided it’s time
to go closer to the bare metal - and a blog is much more suited to a static site. This means I can
keep my blog in source control, which makes me much happier than using some CMS system. I decided
to try Jekyll, instead of writing my own. I may still write my own eventually; that’s what all
engineers seem to do, over time, to exert the most control.&lt;/p&gt;

&lt;p&gt;This has been interesting, because I’ve also managed to avoid using Ruby all these years; Perl and
then Python are what I’d used for “scripting” languages. I also decided to put it up as a GitHub
Pages site, since I of course was using Git for source control.&lt;/p&gt;

&lt;p&gt;So here’s the steps I followed, on a Windows machine, just to be contrary; the Web world prefers
Mac and Linux, and normally so do I. But at the time I wanted to restart my blog, I was on a
Windows 7 machine.&lt;/p&gt;

&lt;h2 id=&quot;install-ruby&quot;&gt;Install Ruby&lt;/h2&gt;

&lt;p&gt;For Windows, you’ll want to use a prebuilt installer from &lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;ruby-installer.org&lt;/a&gt;.
I picked &lt;a href=&quot;http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.1.6.exe&quot;&gt;rubyinstaller-2.1.6&lt;/a&gt; because I didn’t know what I was doing, and
there was a strong suggestion to use 2.1.x.&lt;/p&gt;

&lt;p&gt;I installed a 32-bit build because I’ve had issues with 64-bit Python and Perl in the past - not
all Perl modules or Python packages support 64-bit. So I just assumed the same for Ruby. Also, I’m
not yet writing large programs, so no need for 64-bit. I installed it into C:/Dev/Ruby21, just
because I try to do a minimal amount of organization.&lt;/p&gt;

&lt;h2 id=&quot;install-devkit&quot;&gt;Install DevKit&lt;/h2&gt;

&lt;p&gt;I only found this out after starting to install Jekyll, but Ruby gems that come with native
code need a compiler to build them with. On Linux and Mac, this is automatic because it’s almost
always “just there”, but for Windows we need compilers. I miss the auto-convenience of Perl and
Python which just found my Visual Studio installs and used them. I couldn’t figure out how to
get Ruby to do the same, and I suspect it’s hard-coded to use the MinGW suite.&lt;/p&gt;

&lt;p&gt;The DevKit download can be found on the &lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;ruby-installer.org&lt;/a&gt; page. I grabbed
the &lt;a href=&quot;http://dl.bintray.com/oneclick/rubyinstaller/DevKit-mingw64-32-4.7.2-20130224-1151-sfx.exe&quot;&gt;DevKit-mingw64-32&lt;/a&gt; installer that matched my Ruby install. It’s not
really an installer, it’s a self-unpacking archive. Unpack it to its permanent home - I have
a C:/Dev folder that I put development tools into, so it went into C:/Dev/RubyDevKit. Don’t
let it unpack to its default location, which is into a temp folder.&lt;/p&gt;

&lt;p&gt;Once you’ve unpacked it, you need to install it - I think all this does is write magic entries
into your Ruby folder. The default action should find your Ruby folder, but you can double-check
by looking at config.yml after you run dk.rb init.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; ruby dk.rb init
&amp;gt; ruby dk.rb install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that on one machine, DevKit didn’t install cleanly for some reason - e.g. gem install…
failed with a “install DevKit, please”. I rebooted and that didn’t fix it, but then I reinstalled
DevKit again (ruby dk.rb install), and this time it worked. I don’t know if the reboot was
necessary, but I have a vague memory of being prompted to reboot after installing Ruby on
a different machine. I’ll try to reproduce that at some point.&lt;/p&gt;

&lt;h2 id=&quot;install-jekyll&quot;&gt;Install Jekyll&lt;/h2&gt;

&lt;p&gt;Here’s where I diverged from what GitHub was suggesting, for two reasons. One, I just want to
use Jekyll to create my site, and I’ll commit the generated site to Git (and push to GitHub).
Two, I had a weird problem when I tried to follow the GitHub instructions, and rather than figure
it out, I went back to my original plan of “have a static site”.&lt;/p&gt;

&lt;p&gt;First, I installed Jekyll.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; gem install jekyll&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, I created a new Git repository and initialized it as a Jekyll-generated site.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; mkdir neurocline.github.io
&amp;gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;neurocline.github.io
&amp;gt; git init
&amp;gt; jekyll new .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;install-pygments-or-rouge&quot;&gt;Install Pygments or Rouge&lt;/h2&gt;

&lt;p&gt;Since I’m running Jekyll locally, I had a problem as soon as I started writing Markdown that
used the Liquid syntax highlighting; it didn’t work. A few seconds of Googling led me to
understand that I needed more modules.&lt;/p&gt;

&lt;p&gt;The gorilla is Pygments, which is Python-based, and has a Ruby wrapper already built in to
Jekyll. Since I am a Python user, this didn’t turn me off, so I just installed Pygments. This was
especially easy since I’m using a Python that has pip as part of the core system&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; python -m pip install pygments&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also had to add a line to my _config.yml file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Build settings
markdown: kramdown
highlighter: pygments&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And frustratingly, even though the Pygments page said ‘shell’ was a style, there is no such
thing and I had to use ‘bash’.&lt;/p&gt;

&lt;h2 id=&quot;do-local-editing&quot;&gt;Do local editing&lt;/h2&gt;

&lt;p&gt;The standard workflow is to run a Jekyll server locally, then start editing content. Every
time you save, the file-watcher will pick up the changes and update the site. By default, your
site is viewed on localhost:4000.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; jekyll serve
Configuration file: C:/projects/github/neurocline.github.io/_config.yml
            Source: C:/projects/github/neurocline.github.io
       Destination: C:/projects/github/neurocline.github.io/_site
      Generating...
                    done.
  Please add the following to your Gemfile to avoid polling for changes:
    gem &amp;#39;wdm&amp;#39;, &amp;#39;&amp;gt;= 0.1.0&amp;#39; if Gem.win_platform?
 Auto-regeneration: enabled for &amp;#39;C:/projects/github/neurocline.github.io&amp;#39;
Configuration file: C:/projects/github/neurocline.github.io/_config.yml
    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.
      Regenerating: 1 file(s) changed at 2015-05-01 19:59:33
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;bake-a-site&quot;&gt;Bake a site&lt;/h2&gt;

&lt;p&gt;Since I’m not using GitHub’s Jekyll, I need to bake the site locally and commit file, then
push to GitHub. And that means a little trickery. Here’s one approach.&lt;/p&gt;

&lt;p&gt;First, I baked the site:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; jekyll build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, I pushed the sources for the site to a sources branch. GitHub wants to see the site itself in
a master branch, I want my sources in source control, so I “hide” it in a branch GitHub is not
looking at.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; git remote add origin git@ghosthub:neurocline/neurocline.git.io
&amp;gt; git checkout -b sources
&amp;gt; git add -A
&amp;gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;First commit of source&amp;quot;&lt;/span&gt;
&amp;gt; git push origin sources&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, I pushed the baked site itself to a master branch.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site
&amp;gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &amp;gt; .nojekyll
&amp;gt; git init
&amp;gt; git remote add origin git@ghosthub:neurocline/neurocline.git.io
&amp;gt; git add -A
&amp;gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll first build&amp;quot;&lt;/span&gt;
&amp;gt; git push origin master
&amp;gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, my site is live on GitHub.&lt;/p&gt;

&lt;p&gt;If you follow that, it looks a little weird, because I have two different repos both pointing to
the same remote repo. But that’s Git for you. This way, I don’t need to be copying files from one
place to another. It’s a little more extra work for setup, but the steady-state is easy.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;I’m pretty happy with the writing part now. I can edit in text and see results as often as I
want (by saving files and using the default file-watcher behavior). I have yet to add images or
to tweak or change the overall blog style, but that will happen.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyll-windows.juthilo.com/3-syntax-highlighting/&quot;&gt;Install a Syntax Highlighter&lt;/a&gt; from
&lt;a href=&quot;http://jekyll-windows.juthilo.com/&quot;&gt;Run Jekyll on Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/oneclick/rubyinstaller/wiki/Development-Kit&quot;&gt;Installing DevKit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://joshualande.com/jekyll-github-pages-poole/&quot;&gt;How I Created a Beautiful and Minimal Blog Using Jekyll, Github Pages, and poole&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 01 May 2015 11:53:20 -0700</pubDate>
        <link>http://neurocline.github.io/jekyll/blog/2015/05/01/using-jekyll.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/jekyll/blog/2015/05/01/using-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>

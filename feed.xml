<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 04 Jan 2016 07:21:58 -0800</pubDate>
    <lastBuildDate>Mon, 04 Jan 2016 07:21:58 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Book scanners</title>
        <description>&lt;p&gt;I think making and using a book scanner is in my future. I’m already at the point where I
throw away books because I can’t store them for the far future where someone will care
(e.g. early computer books). And I don’t want to re-buy thousands of books to have them
in electronic format, nor do I trust ANY of the current e-book vendors for longevity (which needs
to be measured in decades to centuries).&lt;/p&gt;

&lt;p&gt;So, something like this&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.diybookscanner.org/&quot;&gt;DIY Book Scanner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;which has a huge community around it. There’s even a semi-commercial builder, &lt;a href=&quot;http://tenrec.builders/&quot;&gt;Tenrec Builders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arstechnica.com/gadgets/2013/02/diy-book-scanning-is-easier-than-you-think/&quot;&gt;How we built a DIY book scanner with speeds of 150 pages per minute&lt;/a&gt;, article from 2013 on experience with the Reetz scanner kit.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.atiz.com/&quot;&gt;Atiz&lt;/a&gt; is a commercial company selling book scanners. No idea on price, will find out soon.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.noisebridge.net/&quot;&gt;Noisebridge&lt;/a&gt; is a hackerspace in San Francisco (16th &amp;amp; Mission); one of their groups is &lt;a href=&quot;https://www.noisebridge.net/wiki/Digital_Archivists&quot;&gt;Digital Archivists&lt;/a&gt;. Will be checking this out next Wednesday night.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Jan 2016 22:27:00 -0800</pubDate>
        <link>http://neurocline.github.io/reading/2016/01/02/book-scanners.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/reading/2016/01/02/book-scanners.html</guid>
        
        <category>books</category>
        
        <category>scanner</category>
        
        
        <category>reading</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://pdos.csail.mit.edu/6.828/2012/xv6.html&quot;&gt;Xv6, a simple Unix-like teaching operating system&lt;/a&gt;. Still Unix-like, but freshly written for teaching purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.theglobeandmail.com/news/national/article24073928.ece/BINARY/World+Happiness+Report.pdf&quot;&gt;World Happiness Report 2015&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wdm0006/git-pandas&quot;&gt;git-pandas&lt;/a&gt;. Turns github stats into Pandas frames. Saw this from &lt;a href=&quot;http://www.willmcginnis.com/2015/12/25/git-pandas-v0-0-5-coverage-py-risk/&quot;&gt;GIT-PANDAS V0.0.5: COVERAGE.PY, RISK, AND MORE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wdm0006/gitnoc&quot;&gt;gitnoc&lt;/a&gt;. UI for git-pandas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://opencorporates.com/&quot;&gt;OpenCorporates&lt;/a&gt;. Claims to be the largest open database of companies in the world.&lt;/p&gt;

&lt;p&gt;Let’s Build A Simple Interpreter. &lt;a href=&quot;http://ruslanspivak.com/lsbasi-part1/&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;http://ruslanspivak.com/lsbasi-part2/&quot;&gt;Part 2&lt;/a&gt; … &lt;a href=&quot;http://ruslanspivak.com/lsbasi-part7/&quot;&gt;Part 7&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/awslabs/aws-shell&quot;&gt;aws-shell&lt;/a&gt;. An integrated shell for working with the AWS CLI.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nficano/gendo&quot;&gt;gendo&lt;/a&gt;. Lightweight Slackbot framework.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cs.brown.edu/courses/cs173/2012/book/&quot;&gt;Programming Languages: Application and Interpretation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codeupstart.com/project/build-kickstarter-with-python-and-flask&quot;&gt;Build Kickstarter with Python and Flask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tldr-pages.github.io/&quot;&gt;TLDR pages&lt;/a&gt;. Interesting but needs a lot of content.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tutorialspoint.com/codingground.htm&quot;&gt;Online terminals and IDEs&lt;/a&gt;. Write (simple?) code online.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/bishboria/8326b17bbd652f34566a&quot;&gt;Direct links to free Springer books (pdf versions)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/elemental/Elemental&quot;&gt;Elemental&lt;/a&gt;. A modern C++ library for distributed-memory dense and sparse-direct linear algebra and optimization.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://os.phil-opp.com/&quot;&gt;Writing an OS in Rust&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://link.springer.com/&quot;&gt;Springer Link&lt;/a&gt;. Books older than 10 years old are free to download? Talk about a big turnaround. This makes Springer suddenly not all that evil after all.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://r-statistics.co/ggplot2-Tutorial-With-R.html&quot;&gt;How to make any plot in ggplot2?&lt;/a&gt;. Nice cheat sheet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.gnu.org/software/libmicrohttpd/tutorial.html&quot;&gt;libmicrohttpd tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.scottfrees.com/getting-your-c-to-the-web-with-node-js&quot;&gt;Getting your C++ to the Web with Node.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://reports-archive.adm.cs.cmu.edu/anon/anon/usr/ftp/usr0/ftp/scan/CMU-CS-70-fisher.pdf&quot;&gt;Control Structures for Programming Languages&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Dec 2015 21:35:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/12/28/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/12/28/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://apple.stackexchange.com/questions/193368/what-is-the-rootless-feature-in-el-capitan-really/208185#208185&quot;&gt;No dtrace in Mac OS X El Capitan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://qz.com/580859/the-most-misleading-charts-of-2015-fixed/&quot;&gt;The most misleading charts of 2015, fixed&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@kelseyhightower/12-fractured-apps-1080c73d481c#.2gzkmzowv&quot;&gt;12 Fractured Apps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pmarchive.com/how_to_hire_the_best_people.html&quot;&gt;How to hire the best people you’ve ever worked with&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codewords.recurse.com/issues/five/why-do-neural-networks-think-a-panda-is-a-vulture&quot;&gt;How to trick a neural network into thinking a panda is a vulture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.regehr.org/archives/1287&quot;&gt;The Problem with Friendly C&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.schneier.com/blog/archives/2015/12/using_law_again.html&quot;&gt;Using Law Against Technology&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://compilers.iecc.com/crenshaw/&quot;&gt;Let’s Build a Compiler, by Jack Crenshaw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.indiana.edu/~dyb/pubs/nano-jfp.pdf&quot;&gt;A Nanopass Framework for Compiler Education&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.engr.mun.ca/~theo/Misc/exp_parsing.htm&quot;&gt;Parsing Expressions by Recursive Descent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nautil.us/issue/31/stress/what-i-learned-from-losing-200-million&quot;&gt;What I Learned from Losing $200 Million&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://goshawkdb.io/features.html&quot;&gt;Goshawk DB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nytimes.com/2015/12/13/books/review/antony-beevors-ardennes-1944.html?WT.mc_id=2015-KWP-AUD_DEV&amp;amp;WT.mc_ev=click&amp;amp;ad-keywords=AUDDEVREMARK&amp;amp;kwp_0=78766&amp;amp;kwp_4=421282&amp;amp;kwp_1=242392&quot;&gt;Antony Beevor’s ‘Ardennes 1944’&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://salmanarif.bitbucket.org/visual/index.html&quot;&gt;VisUAL - A Highly Visual ARM emulator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arxiv.org/abs/1512.06808&quot;&gt;Game Theory (Open Access textbook with 165 solved exercises)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://llvm.org/docs/tutorial/&quot;&gt;Kaleidoscope: Implementing a Language with LLVM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf&quot;&gt;An Incremental Approach to Compiler Construction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@nickgerleman/the-bkd-tree-da19cf9493fb#.o9v5jjc15&quot;&gt;The Bkd Tree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=10783219&quot;&gt;Ask HN: Books you read in 2015&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tuhs.org/Archive/PDP-11/Distributions/research/McIlroy_v0/UnixEditionZero.txt&quot;&gt;The UNIX Time-Sharing System&lt;/a&gt;. Early draft of UNIX manual.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/112O-Q_XrbrU1I4P-oiLCN9u86Qg_BYBdcDsmh7Pn9Nw/mobilebasic&quot;&gt;[External] Optimizing C++ Const Objects in LLVM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.cloudflare.com/whats-inside-net-http-socket-late-binding-in-the-go-standard-library/&quot;&gt;What’s inside net/http? Late binding in the Go standard library&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Dec 2015 21:39:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/12/24/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/12/24/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Some notes on Go</title>
        <description>&lt;h1 id=&quot;gopath-and-source-on-your-hard-disk&quot;&gt;GOPATH and source on your hard disk&lt;/h1&gt;

&lt;p&gt;This is the thing that’s most annoying me about Go. Many of its proscriptive choices
are neutral to me, but dictating how your source code is laid on on the hard disk
is harder to work with.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;go&lt;/code&gt; tool finds files in relation to the &lt;code&gt;$GOPATH&lt;/code&gt; environment variable,
and really wants to see a strucure like this at the root of &lt;code&gt;$GOPATH&lt;/code&gt; (using one
of my recent projects as an example)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bin/
pkg/
src/
  github.com/
    catalog/
      ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See &lt;a href=&quot;https://golang.org/doc/code.html&quot;&gt;How to Write Go Code&lt;/a&gt; for the official explanation.&lt;/p&gt;

&lt;p&gt;On the other hand, I have been organizing projects on my hard disk thematically, and
partially by origin. And large projects (say, 1000 files and up), tend to develop
their own internal organization.&lt;/p&gt;

&lt;p&gt;I like some of the thoughts behind the Go structure. I’ve always preferred systems where
generated files lived outside of your source files; source files come from source control,
and generated files are mostly temporaries. And many programming environments and languages
make this difficult. In the Go world, your source is all inside &lt;code&gt;src/&lt;/code&gt;, your intermediate
files are in &lt;code&gt;pkg/&lt;/code&gt;, and your output binaries are in &lt;code&gt;bin/&lt;/code&gt;. Of course, that’s a
little limiting, but I can work in it.&lt;/p&gt;

&lt;p&gt;One choice is to keep changing &lt;code&gt;$GOPATH&lt;/code&gt;. It “points to your workspace”, but there’s no
reason you need just the one workspace. I’m at the point where I’m seriously considering
this approach. Since I don’t use an IDE at the moment for Go code, however, this means that
I need to remember to set &lt;code&gt;$GOPATH&lt;/code&gt; each time I create a terminal window. This would be
necessary if I worked on large Go programs, or on dozens at the same time. A single &lt;code&gt;bin/&lt;/code&gt;
location would be a problem. The Go docs seem to recommend against this, see
&lt;a href=&quot;https://github.com/golang/go/wiki/GOPATH&quot;&gt;GOPATH&lt;/a&gt; from the &lt;a href=&quot;https://github.com/golang/go/wiki&quot;&gt;Go Wiki&lt;/a&gt;.
I suspect this is advice bourne from working on lots of small programs, though.&lt;/p&gt;

&lt;p&gt;There is one big reason to use multiple &lt;code&gt;$GOPATH&lt;/code&gt; hierarchies, and that’s when using &lt;code&gt;go get&lt;/code&gt;.
While Go will search among multiple paths for files, &lt;code&gt;go get&lt;/code&gt; will download new files into
exactly one location.&lt;/p&gt;

&lt;p&gt;But there are other problems I’m wrestling with. I have some multi-language repositories. So
I either relocate everything to suit Go, or I checkout the repo multiple times on the disk, or
I use a symlink. The symlink approach is awkward, the multiple checkout is confusing (editing
files in the wrong place is easy), and relocating everything to suit Go is very Go-centric.&lt;/p&gt;

&lt;h1 id=&quot;relative-and-absolute-go-paths&quot;&gt;Relative and absolute Go paths&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;go&lt;/code&gt; tool really likes absolute paths, and by absolute I mean paths that are relative
to the &lt;code&gt;$GOPATH&lt;/code&gt; root.&lt;/p&gt;

&lt;p&gt;If you use absolute paths to build, then your built output goes in the &lt;code&gt;bin/&lt;/code&gt; folder. If
you use relative paths to build, then your built output goes next to the source. While that
doesn’t sound bad, it also has implications for any &lt;code&gt;import&lt;/code&gt; statements in your source.
Relative imports are forbidden if you use an absolute path to start. And if you have relative
source imports (which are nice and readable and convenient), then you must use a relative
path to trigger the build.&lt;/p&gt;

&lt;p&gt;Given this plus the above, it sounds like the only sane choice is to build via relative path.
I note that some projects do this: &lt;a href=&quot;https://github.com/Netflix/rend&quot;&gt;Netflix/rend&lt;/a&gt; must be
built via relative paths.&lt;/p&gt;

&lt;h1 id=&quot;versioning-and-go-source&quot;&gt;Versioning and Go source&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; is useful, to a point. It can automatically fetch source packages for you.&lt;/p&gt;

&lt;p&gt;What you don’t get is control over a version. And this is going to be important to let build
servers automatically get and build projects, at least without a ton of pain.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://0x74696d.com/posts/go-get-considered-harmful/&quot;&gt;GO GET CONSIDERED HARMFUL&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://golang.org/&quot;&gt;Golang.org&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://golang.org/doc/articles/go_command.html&quot;&gt;About the go command&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://golang.org/cmd/go/&quot;&gt;Command go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://golang.org/doc/effective_go.html&quot;&gt;Effective Go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.golang.org/package-names&quot;&gt;Package names&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.golang.org/third-party-libraries-goprotobuf-and&quot;&gt;Third-party libraries: goprotobuf and beyond&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 21 Dec 2015 16:02:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/12/21/some-notes-on-go.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/12/21/some-notes-on-go.html</guid>
        
        <category>programming</category>
        
        <category>go</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Hugo, a static website engine in Go</title>
        <description>&lt;p&gt;Jekyll is beginning to annoy me, so I’ve been looking for alternatives other than “write my own”
(which is, admittedly, still appealing). There’s one written in Go&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo: A Fast &amp;amp; Modern Static Website Engine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks like it would be trivial for me to switch or to try it out, so I’m going to do so.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Dec 2015 16:02:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/12/21/hugo-a-static-website-engine-in-go.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/12/21/hugo-a-static-website-engine-in-go.html</guid>
        
        <category>blog</category>
        
        <category>hugo</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://ipxe.org/&quot;&gt;iPXE - open source boot firmware&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.redpill-linpro.com/sysadvent/2015/12/18/stateless-osd-servers.html&quot;&gt;Stateless OSD servers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.thenewatlantis.com/publications/why-the-arabic-world-turned-away-from-science&quot;&gt;Why the Arabic World Turned Away from Science&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.theguardian.com/world/2015/dec/17/the-mystery-of-indias-deadly-exam-scam&quot;&gt;The mystery of India’s deadly exam scam&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ai.stanford.edu/~nilsson/QAI/qai.pdf&quot;&gt;THE QUEST FOR ARTIFICIAL INTELLIGENCE: A HISTORY OF IDEAS AND ACHIEVEMENTS
&lt;/a&gt;. The caps are from the paper, not me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!msg/flow-based-programming/iaKhbABJ9fw/XlrMf-dnBgAJ&quot;&gt;Unix and Flow Based Programming&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.meltingasphalt.com/a-codebase-is-an-organism/&quot;&gt;A Codebase is an Organism&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://queue.acm.org/detail.cfm?ref=rss&amp;amp;id=2856460&quot;&gt;A Purpose-built Global Network: Google’s Move to SDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://parseplatform.github.io/&quot;&gt;Parse: Open Source Hub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arstechnica.com/information-technology/2015/12/rsync-net-zfs-replication-to-the-cloud-is-finally-here-and-its-fast/&quot;&gt;rsync.net: ZFS Replication to the cloud is finally here—and it’s fast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tip.golang.org/cmd/go/#hdr-Vendor_Directories&quot;&gt;Command go&lt;/a&gt;. Go 1.6 has vendor directories. It’s a step. It was in 1.5 as an experiment &lt;a href=&quot;https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit&quot;&gt;oGo 1.5 Vendor Experiment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arstechnica.com/information-technology/2014/01/bitrot-and-atomic-cows-inside-next-gen-filesystems/&quot;&gt;Bitrot and atomic COWs: Inside “next-gen” filesystems&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pr1ntf.xyz/windowsunderbhyve.html&quot;&gt;Running Windows under FreeBSD’s bhyve&lt;/a&gt;. bhyve is the FreeBSD hypervisor. This is pretty cool.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://artint.info/html/ArtInt.html&quot;&gt;Artificial Intelligence: Foundations of Computational Agents&lt;/a&gt;. Book, University Cambridge Press, 2010, David Poole and Alan Macworth.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codewords.recurse.com/issues/five/what-restful-actually-means&quot;&gt;What RESTful actually means&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Elements-Computing-Systems-Building-Principles/dp/0262640686/&quot;&gt;The Elements of Computing Systems: Building a Modern Computer from First Principles&lt;/a&gt;. A book to recommend to people.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.cloudflare.com/why-its-harder-to-forge-a-sha-1-certificate-than-it-is-to-find-a-sha-1-collision/&quot;&gt;Why it’s harder to forge a SHA-1 certificate than it is to find a SHA-1 collision&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Dec 2015 13:26:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/12/19/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/12/19/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>End-end Principle and Fate-Sharing</title>
        <description>&lt;p&gt;The End-End Principle and Fate-Sharing are sometimes confused with each other.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mercury.lcs.mit.edu/~jnc/tech/end_end.html&quot;&gt;Will The Real “End-End Principle” Please Stand Up?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.reed.com/dpr/locus/Papers/EndtoEnd.html&quot;&gt;END-TO-END ARGUMENTS IN SYSTEM DESIGN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ccr.sigcomm.org/archive/1995/jan95/ccr-9501-clark.pdf&quot;&gt;The Design Philosophy of the DARPA Internet Protocols&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3724.txt&quot;&gt;RFC 3724, The Rise of the Middle and the Future of End-to-End: Reflections on the Evolution of the Internet Architecture&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Dec 2015 18:09:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/12/18/end-end-principle.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/12/18/end-end-principle.html</guid>
        
        <category>software</category>
        
        <category>engineering</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://techblog.netflix.com/2015/11/linux-performance-analysis-in-60s.html&quot;&gt;Linux Performance Analysis in 60,000 Milliseconds&lt;/a&gt;, from Netflix blog.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ourworldindata.org/data/growth-and-distribution-of-prosperity/gdp-growth-over-the-very-long-run/&quot;&gt;GDP Growth over the Very Long Run&lt;/a&gt;. GDP per person over the last 2000 years.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://google.github.io/styleguide/cppguide.html&quot;&gt;Google C++ Style Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rumpkernel/wiki/wiki/Tutorial:-Building-Rumprun-Unikernels&quot;&gt;Tutorial: Building Rumprun Unikernels&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/MaximAbramchuck/awesome-interviews&quot;&gt;Awesome Interviews&lt;/a&gt;. Curated list of lists of interview questions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.conan.io/&quot;&gt;Conan&lt;/a&gt;. C++ package manager (descendent of Biicode)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/postgres/postgres/tree/master/src/backend/regex&quot;&gt;Implementation notes about Henry Spencer’s regex library&lt;/a&gt; from Postgres source code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tillett.info/2015/08/30/ideas-are-not-cheap/&quot;&gt;Ideas are not cheap&lt;/a&gt;. OK. Hmm. I agree with the sentiment, but not his direction. He’s hoping that good ideas don’t need lots of work, or need to go up against tremendous opposition or inertia, or … most of the things that are the reason that good ideas exist that are unimplemented. Worth reading if only to react against.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.dbms2.com/2015/04/16/notes-on-indexes-and-index-like-structures/&quot;&gt;Notes on indexes and index-like structures&lt;/a&gt;. A little pompous but maybe this guy is allowed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jandrewrogers.com/2015/05/27/metrohash/&quot;&gt;MetroHash: Faster, Better Hash Functions&lt;/a&gt;. This also comes across as ridiculously arrogant, but again, maybe it’s deserved.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.pvk.ca/Blog/2015/11/29/retrospective-on-binary-search-and-on-compression-slash-compilation/&quot;&gt;Retrospective on Binary Search and Comp{ress,ilat}ion&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Dec 2015 22:26:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/12/05/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/12/05/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://libmill.org/index.html&quot;&gt;libmill&lt;/a&gt;: Go-style concurrency in C. &lt;a href=&quot;https://github.com/sustrik/libmill&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nanomsg.org/&quot;&gt;nanomsg&lt;/a&gt; and &lt;a href=&quot;https://github.com/nanomsg/nanomsg&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mistune.readthedocs.org/en/latest/&quot;&gt;mistune&lt;/a&gt; is a markdown parser in Python, &lt;a href=&quot;https://github.com/lepture/mistune&quot;&gt;Github repo&lt;/a&gt; here.&lt;/p&gt;

&lt;p&gt;Oh yeah, and &lt;a href=&quot;https://readthedocs.org/&quot;&gt;ReadTheDocs&lt;/a&gt; itself is starting a small revolution.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Nov 2015 12:06:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/11/20/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/11/20/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>C++ functions</title>
        <description>&lt;p&gt;The subroutine is the original programming innovation, introduced in 1952
(see &lt;a href=&quot;http://www.laputan.org/pub/papers/wheeler&quot;&gt;The Use of Sub-routines in Programmes&lt;/a&gt;).
Before subroutines, we used to program by writing the whole
program in a single block of code. Libraries were just collections of snippets;
we copied lines of code from libraries and inserted them in place in program.&lt;/p&gt;

&lt;p&gt;In C++, we call these functions, and we have a variety of function types to
choose from.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;plain functions&lt;/li&gt;
  &lt;li&gt;pointer to function&lt;/li&gt;
  &lt;li&gt;class member functions&lt;/li&gt;
  &lt;li&gt;functors, operator()&lt;/li&gt;
  &lt;li&gt;pointer to member function&lt;/li&gt;
  &lt;li&gt;template functions&lt;/li&gt;
  &lt;li&gt;lambda expressions&lt;/li&gt;
  &lt;li&gt;inline functions&lt;/li&gt;
  &lt;li&gt;constexpr functions&lt;/li&gt;
  &lt;li&gt;bind expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all of these, a function has the same basic definition: a name, a list of zero or
more parameters, a return type, and a body. Functions are invoked through the call
operator, which is a pair of parentheses. The return type doesn’t get or need a name,
because it is only operated on anonymously, through a return statement.&lt;/p&gt;

&lt;h2 id=&quot;plain-old-function&quot;&gt;Plain old function&lt;/h2&gt;

&lt;p&gt;There is the original kind of function, inherited from C, and still relevant today.
It takes one or more parameters, and can return a value (which could be
a reference or an efficient move of a value, and not just a copy of a value).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;augend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;augend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In C++, functions can be overloaded on number and type of parameter, but not on
return type: originally, overloading worked because C++ did name mangling
to encode types into the function name, and the return type was not part
of the name-mangling.&lt;/p&gt;

&lt;p&gt;OK, yes, it still works that way today, but there’s no real need. We’re smart
people, and we could do overloading without needing name mangling.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;complex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can overload on integral types that have promotion rules, but this
can be tricky. You can declare the functions, and they’ll get called, but
unless you master the promotion rules, you can end up with situations
where the wrong overload is called.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; (int)&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; (short)&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// this prints &amp;quot;0 (short)&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this prints &amp;quot;1 (int)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;pointer-to-function&quot;&gt;Pointer to function&lt;/h2&gt;

&lt;p&gt;A function definition matches a function name to a function body. Further
use of that function name in a call operator results in calling the function
body in that definition.&lt;/p&gt;

&lt;p&gt;Just like we can have pointers to data types, we can have pointers to
function types, assign bodies to pointers, and then invoke bodies through
pointers.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;funcptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pfact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// a pointer to a function&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pfact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pfact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;amp; is allowed but not required&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pfact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pfact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// dereference is allowed but not required&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The C++11 &lt;code&gt;decltype&lt;/code&gt; keyword can come in handy when declaring function
pointers. Since &lt;code&gt;decltype&lt;/code&gt; returns the exact function type, we need to add a &lt;code&gt;*&lt;/code&gt;
to declare a pointer:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pfact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// copy function signature from factorial&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;class-member-function&quot;&gt;Class member function&lt;/h2&gt;

&lt;p&gt;Classes can have members that are functions. These behave almost exactly
like plain old functions, except that each function has an automatic
first parameter called “this” that is the pointer to the object. And
inside the body of class member functions, the this is implicit; if
name lookup finds a class member function or variable, the this pointer
is applied automatically.&lt;/p&gt;

&lt;p&gt;Here we have a memoizing factorial implemented as a class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Factorial&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printfact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Factorial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;factorial of %d is %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While the results are still out on object-oriented programming itself, the
idea of structured programming is still running strong, and classes without
inheritance are a form of structured programming.&lt;/p&gt;

&lt;h2 id=&quot;functors-with-operator&quot;&gt;Functors with operator()&lt;/h2&gt;

&lt;p&gt;The call operator can be overloaded. When it is overloaded, this creates
a functor, a function-like object. The main advantage of functors is
state, and we often use this pattern in callbacks.&lt;/p&gt;

&lt;p&gt;Consider the classic C style callback.&lt;/p&gt;

&lt;h2 id=&quot;template-function&quot;&gt;Template function&lt;/h2&gt;

&lt;p&gt;There is the C++ template function, which is still just a function
that can take parameterized types. It can return parameterized types as well,
although you can’t overload on just return type.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.llvm.org/2009/12/dreaded-two-phase-name-lookup.html&quot;&gt;The Dreaded Two-Phase Name Lookup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2012/02/06/dependent-name-lookup-for-c-templates&quot;&gt;Dependent name lookup for C++ templates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/356950/c-functors-and-their-uses&quot;&gt;C++ Functors - and their uses&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Nov 2015 10:48:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2015/11/17/c++-functions.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2015/11/17/c++-functions.html</guid>
        
        <category>c++</category>
        
        <category>programming</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Things Are Obvious</title>
    <description>Answers to some of the world&#39;s questions
</description>
    <link>http://neurocline.github.io/</link>
    <atom:link href="http://neurocline.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 04 Feb 2016 19:08:40 -0800</pubDate>
    <lastBuildDate>Thu, 04 Feb 2016 19:08:40 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Experimenting with modules in C++</title>
        <description>&lt;p&gt;There is a proposal to add modules to the C++ standard.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4465.pdf&quot;&gt;A Module System for C++ (Revision 3)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This builds on a much earlier proposal in 2006 by Daveed Vandevoorde&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2073.pdf&quot;&gt;Modules in C++&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Microsoft has done an early implementation in Visual Studio 2015 Update 1 (because the authors of the
new module proposal package work at Microsoft)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/vcblog/2015/12/03/c-modules-in-vs-2015-update-1/&quot;&gt;C++ Modules in VS 2015 Update 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m not terribly excited about some parts of their proposal and implementation. But I should play with it. So. I will play with it.
Update to come.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3596147/c-modules-why-were-they-removed-from-c0x-will-they-be-back-later-on&quot;&gt;C++ Modules - why were they removed from C++0x? Will they be back later on?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2869.html&quot;&gt;State of C++ Evolution (Post San Francisco 2008)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://clang.llvm.org/docs/Modules.html&quot;&gt;Clang 3.9 - Modules&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lambda-the-ultimate.org/node/4649&quot;&gt;A module system for the C family&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=RwdQA0pGWa4&quot;&gt;CppCon 2015: Gabriel Dos Reis “Large Scale C++ with Modules: What You Should Know”&lt;/a&gt; and &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/talks/Large-Scale-C%2B%2B-With-Modules.pdf&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://llvm.org/devmtg/2012-11/Gregor-Modules.pdf&quot;&gt;Modules&lt;/a&gt; and &lt;a href=&quot;http://llvm.org/devmtg/2012-11/videos/Gregor-Modules.mp4&quot;&gt;video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kennykerr.ca/2015/12/03/getting-started-with-modules-in-c/&quot;&gt;Getting Started with Modules in C++&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Feb 2016 17:05:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/04/experimenting-with-modules-in-cpp.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/04/experimenting-with-modules-in-cpp.html</guid>
        
        <category>C++</category>
        
        <category>standard</category>
        
        <category>modules</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Formatting code</title>
        <description>&lt;p&gt;A long time ago, I was looking into writing a parser that treated comments and whitespace
as first-class citizens; not in the language grammar, but because I wanted to write
code formatters that handled comments more gracefully. It looks like the Go team ran
into this when making &lt;code&gt;go fmt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://talks.go-zh.org/2015/gofmt-en.slide#1&quot;&gt;The Cultural Evolution of gofmt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The notes in Robert Griesemer’s presentation mention doing stuff ad-hoc and TBD to make
it more integrated with the AST. And that’s what I had been considering - there’s the grammar
for generating code, and then there’s the grammar for the meaning that the source code
itself conveys, which includes where comments are “attached” to code.&lt;/p&gt;

&lt;p&gt;And on a related note, and also in &lt;code&gt;go fmt&lt;/code&gt;, tab stops are a royal pain in the ass.
It’s much better to think of tab stops at the semantic level and not at the implementation
level of “go to fixed tab stop”. This is a proposal from 10 years ago to do exactly that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nickgravgaard.com/elastic-tabstops/&quot;&gt;Elastic Tabstops&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s interesting how problems can live for years and years, and keep coming up sporadically,
and never actually be “solved”. It’s getting close to the time where this needs to be solved.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Feb 2016 16:55:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/04/formatting-code.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/04/formatting-code.html</guid>
        
        <category>code</category>
        
        <category>formatting</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Can we get rid of make?</title>
        <description>&lt;p&gt;Roughly congruent with the development of C and Unix, the &lt;code&gt;make&lt;/code&gt; build automation tool
was invented (originally created in 1976 by Stuart Feldman). Make replaced ad-hoc build
shell scripts that accompanied each program’s source.&lt;/p&gt;

&lt;p&gt;As wonderful as Make was originally, it has a number of flaws:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the syntax is cumbersome for all but trivial programs, and virtually unworkable for large ones (most make files are copied from other make files).&lt;/li&gt;
  &lt;li&gt;there is no standard; many different make programs, all with incompatible features and syntax&lt;/li&gt;
  &lt;li&gt;make is very tied to Unix and sh&lt;/li&gt;
  &lt;li&gt;recursive make is very slow, but non-recursive make on large programs is nearly infeasible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The standardization part is not quite true - POSIX did finally standardize the basic features and
function of Make, but it was too little and too late. And there is GNU Make which is widely used,
and the standard on Linux and Mac OS X.&lt;/p&gt;

&lt;p&gt;Go tried to get rid of the need for make by putting simple build feature support into the language
itself. However, I notice that any reasonable-sized Go program comes with a Makefile, at least on
Linux and Mac OS X. And this is not from inertial - the makefiles are absolutely necessary, because
large programs are never just all code in a single language.&lt;/p&gt;

&lt;p&gt;I’m not even counting the true sin of Make, which was to cause Autotools to need to be invented. Autotools
is the true plague on the land. We’ll talk about that another time.&lt;/p&gt;

&lt;p&gt;How can we improve the state of the art in building software? More and more, the world is polyglot, which
implies the need for something like Make, but we’re also turning back away from a platform monoculture.
The things we can count on that cross platforms at the moment are a handful of widely used programming
languages, chief among them being C and C++; there is no platform or architecture I know of that’s in use
that doesn’t have a C compiler, and usually at least a GCC target.&lt;/p&gt;

&lt;p&gt;First, we can reduce the problem space, by chipping away at both ends.&lt;/p&gt;

&lt;p&gt;I know I slightly disparaged Go, but it has succeeded in removing the need for Make and Makefiles for
the vast majority of Go programs. And, Makefiles for large Go programs are much simpler than they would
otherwise be. Go is close, and is gaining features that might get it to 100%. More languages should embed
features that make building single-language code bases automatic, regardless of their size.&lt;/p&gt;

&lt;p&gt;On the high end, we do need something that cuts across languages. We should not expect C to add features
to facilitate mixing with D or Rust or Lua or SQL. So it does seem like we need something like Make. But
if we remove the need for Make on the low end, maybe we can design a new system that can be widely used
from the start. All previous Make incarnations were targeted at a single platform, whether “Unix” in
general or a specific flavor of Unix (or Windows, or Solaris, etc). But that was before the 2000s and
the true flowering of open source. Nowadays, a properly designed program that is widely compatible from
the start has a chance of taking off.&lt;/p&gt;

&lt;p&gt;One huge issue to tackle is going to be interoperability with IDEs. We should never require the use of
an IDE, but on the other hand many programmers prefer to use one. And there will never be the one true
IDE to rule them all (the last attempt, Eclipse, failed miserably). We’ve seen a few attempts to do this;
SCons, CMake and Premake spring to mind. Each took a slightly different path; CMake attempts to just directly
replace Make but have an option for IDE project file generation, whereas Premake just flat-out defines
“make me a project file” as its mission. Partially, you can look at Premake as an attempt to turn Makefiles
into assembly language; you describe your project in a much higher-level fashion, and Premake creates a
Makefile for you (or a Visual Studio project, or an XCode project, or anything you can find a generator for).&lt;/p&gt;

&lt;p&gt;Of course, this comes with a cost. Premake just can’t do most of what Make can do, and CMake’s main claim
against Make is that it’s a lot more cross-platform (it can do a lot of what Make can do, but is very
cumbersome to use even on moderately sized projects). Likewise, SCons, written in Python, can run on almost
anything that can run Python, but for all of that isn’t terribly cross-platform, and is a lot slower than
the alternatives to boot.&lt;/p&gt;

&lt;p&gt;But SCons and Premake were based on a great idea. You write their scripts in a high-level programming
language; for SCons, you can write arbitrary Python code to do make tasks, and for Premake you write
in Lua. Both are far more productive for any but trivial build tasks compared to Make. Any Make replacement
should follow this trend. The challenge for SCons is that you need a Python install to use SCons. On
the other hand, someone has to build a compatible Premake or CMake binary for you. CMake has more
uptake in the Unix-like world, and Premake is easier to use in a Windows world.&lt;/p&gt;

&lt;p&gt;Another advance in the world since Make was invented was the idea of packaging systems. Again, this is an
orthogonal problem that we’re going to defer solving, but you want your build system to work very well
with package systems of all kinds. There are legitimate reasons for multiple packaging systems. For example,
computer languages are available on essentially all platforms, so those languages need a packaging system
that crosses all platforms. But platforms all have many languages that can be used on them, so a platform
needs a polyglot package system that crosses all languages. All this means is that our build system has
to be able to handle arbitrary package systems, depending on the use case.&lt;/p&gt;

&lt;p&gt;And we need our build system to work well with package systems, because we’ve long since gone past the point
where any group writes all its own code. It’s not just standard libraries, we all use each others’ source
very heavily. A build system that cannot interoperate with a package system means that we’ll need to develop
custom tools, or do things manually, and neither of these things scales. And again, while you can probably see
where I’m going with this, I’m going to come back to “just Make” for now.&lt;/p&gt;

&lt;p&gt;So we’re getting a little closer here. We want something that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;defers a lot of ordinary building to the language&lt;/li&gt;
  &lt;li&gt;lets you write arbitrary complex build tasks in a good high-level language&lt;/li&gt;
  &lt;li&gt;is available for every possible platform and architecture&lt;/li&gt;
  &lt;li&gt;works with any package system&lt;/li&gt;
  &lt;li&gt;treats IDEs as first-class citizens&lt;/li&gt;
  &lt;li&gt;adds basically zero overhead to the build process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is my take on things&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We need the language support ASAP in C/C++. Fortunately, both Clang and GCC are open source, and a
concerted effort could make this happen quickly (Microsoft is an outlier but maybe there’s a way
to now leverage open source with them).&lt;/li&gt;
  &lt;li&gt;The “available anywhere” bit means I want this delivered itself as source and built as a binary (by
itself, bootstrapped with some even more widely available system), and thus available anywhere. At the
moment, this means it’s written in C or C++.&lt;/li&gt;
  &lt;li&gt;The “is available anywhere” means that we want our Make program part of every operating system.
This is feasible for Linux and Mac OS X, would require some lobbying for Microsoft (self-interest
should help here), and then everyone else would be motivated to provide it.&lt;/li&gt;
  &lt;li&gt;The “write makefiles in a high level language” is a little more fluid. No C or C++ compiler is yet
interactive enough to write build instructions in C/C++. But we’re closer than you might think, especially
if we can get some more language support. Something like Lua would be the next runner up, since the
Make program could easily contain a Lua interpreter (it’s small). Python, Perl, Ruby are all large and
we would not want to embed them, and if not embedded, then there is a dependency in order to build.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m going to stop here for now. It’s an ambitious goal, but not really that big. The next step is
a plan and a loose design.&lt;/p&gt;

&lt;p&gt;This is possible. Time to move past the 1970s, folks.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Make_(software)&quot;&gt;Make&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Makefile&quot;&gt;Makefile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jpospisil.com/2014/03/16/replacing-make-with-ninja.html&quot;&gt;Replacing Make with Ninja&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.bfitz.us/?p=2099&quot;&gt;A LIST OF MAKE SYSTEMS&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 20:35:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/02/can-we-get-rid-of-make.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/02/can-we-get-rid-of-make.html</guid>
        
        <category>make</category>
        
        <category>build</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://coreos.com/blog/building-minimal-containers-with-quay-kubernetes-wercker.html&quot;&gt;Building and deploying minimal containers on Kubernetes with Quay.io and wercker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mesosphere.com/blog/2015/11/18/dcos-time-series-demo/&quot;&gt;WE BUILT AN APP IN 3 DAYS USING DCOS, KUBERNETES, KAFKA AND MORE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/backchannel/has-deepmind-really-passed-go-adc85e256bec#.9ia2jkh6j&quot;&gt;Go, Marvin Minsky, and the Chasm that AI Hasn’t Yet Crossed&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://codeblocks.org/&quot;&gt;Code::Blocks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://io2015codelabs.appspot.com/codelabs/gRPC#1&quot;&gt;Building a gRPC service with Node.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.stavros.io/posts/microservices-cargo-cult/&quot;&gt;The microservices cargo cult&lt;/a&gt;. Ignore the article, copy the blog style.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brandur.org/golang-packages&quot;&gt;Package Management in Go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;go generate&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.golang.org/generate&quot;&gt;Generating code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://godoc.org/golang.org/x/tools/cmd/stringer&quot;&gt;Command stringer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.gopheracademy.com/advent-2015/reducing-boilerplate-with-go-generate/&quot;&gt;Reducing boilerplate with go generate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/jmhodges/a50ab84b13c2cd791571&quot;&gt;Generating protobuf Go files with &lt;code&gt;go generate&lt;/code&gt; and a vendored protobuf package (specifically, vendored with godep).&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Generic programming in Go using “go generate”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ncw/gotemplate&quot;&gt;Go templates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://willowtreeapps.com/blog/go-generate-your-database-code/&quot;&gt;Go Generate Your Database Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.ralch.com/tutorial/golang-code-generation/&quot;&gt;Golang code generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;generics in Go&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://clipperhouse.github.io/gen/&quot;&gt;gen (v4)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cheekybits/genny&quot;&gt;genny - Generics for Go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/droundy/gotgo&quot;&gt;Gotgo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bouk.co/blog/idiomatic-generics-in-go/&quot;&gt;Idiomatic Generics in Go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joeshaw/gengen&quot;&gt;gengen - A generics code generator for Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://www.onebigfluke.com/2014/04/gos-power-is-in-emergent-behavior.html&quot;&gt;Go’s power is in emergent behavior&lt;/a&gt;. Although he meant orthogonality.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cbednarski.com/articles/makefiles-for-everyone/&quot;&gt;Makefiles for Everyone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://typeplate.com/&quot;&gt;Typeplate&lt;/a&gt; - a “typographic starter kit”.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 11:40:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/02/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/02/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Organizing Go source code part 2</title>
        <description>&lt;p&gt;There are a handful of rules in Go that directly affect how the source code in your project is laid out.&lt;/p&gt;

&lt;p&gt;When using the &lt;code&gt;go&lt;/code&gt; tool:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all the files in a directory must be in the same package&lt;/li&gt;
  &lt;li&gt;all the files in a package must be in the same directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;go&lt;/code&gt; tool, when iterating, assumes that all files in a directory are in the same package. You’ll get a compile
error otherwise. When told to target a specific file, this is not the case, but this is not the normal usage of
the &lt;code&gt;go&lt;/code&gt; tool. And from this consequence, all the files in a package need to be in the same directory.&lt;/p&gt;

&lt;p&gt;One consequence of this is for executables - things you run. In Go, this is package main with func main().
This means that the top-level source for each executable should be in its own directory even if a single file, and must
be in its own directory if multiple files. In other words,
if you have a suite of programs built from one source base, then you’ll have something like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;nx&quot;&gt;binaries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;binary1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;binary2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;package1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;subpkg1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;subpkg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;package2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is no language-level mandate that all the files in a package are in the same directory - this is a tooling
issue. On the other hand, it is the standard tooling at the moment.&lt;/p&gt;

&lt;p&gt;Of course, this is not precisely true. Build constraints can prevent some files from being seen as part
of a package. And test code is not in the same package; files ending in _test.go often are in a package
*_test, and you’ll see this code pulling in the directory it’s in as a package.&lt;/p&gt;

&lt;h1 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;/h1&gt;

&lt;p&gt;Kubernetes, &lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;https://github.com/kubernetes/kubernetes&lt;/a&gt;, is the largest Go
program I know of outside of the Go suite itself, at 460,000 lines as of this writing.&lt;/p&gt;

&lt;p&gt;The basic source layout is this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API/protocol (swagger, in json) in &lt;code&gt;api&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;binaries (package main) in &lt;code&gt;cmd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;build scripts in &lt;code&gt;hack&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;packages in &lt;code&gt;pkg&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;external source in &lt;code&gt;Godeps&lt;/code&gt; (uses &lt;code&gt;godep&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;manually imported external source in &lt;code&gt;thirdparty&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source uses a short URL http://k8s.io that redirects to http://kubernetes.io. Does this further redirect
to https://github.com/kubernetes/? I’m not sure how that would work, though, unless you clone from k8s.io and not Github. In any event, there is a set of scripts in hack that are used to build and run Kubernetes from source.
See http://www.sebastien-han.fr/blog/2015/07/01/build-kubernetes-from-source/ for quick note on building.&lt;/p&gt;

&lt;p&gt;This uses &lt;code&gt;godep&lt;/code&gt;, as most big projects are currently doing - it vendors external source into a
Godeps directory and rewrites your source to use the vendored paths.&lt;/p&gt;

&lt;p&gt;There is a contrib folder that is the remnants of Kubernetes components that aren’t part of the core system. These moved to their own repo.&lt;/p&gt;

&lt;h1 id=&quot;openshift-origin&quot;&gt;OpenShift Origin&lt;/h1&gt;

&lt;p&gt;Origin, &lt;a href=&quot;https://github.com/openshift/origin&quot;&gt;https://github.com/openshift/origin&lt;/a&gt;, is fairly large - as of
this writing, it is 257,000 lines of Go code (ignoring whitespace and comment lines).&lt;/p&gt;

&lt;p&gt;The basic source layout is this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API/protocol (swagger, in json) in &lt;code&gt;api&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;main binaries (package main) in &lt;code&gt;cmd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;external source in &lt;code&gt;Godeps&lt;/code&gt; (uses &lt;code&gt;godep&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;build scripts in &lt;code&gt;hack&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;tool binaries in &lt;code&gt;tools&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The build scripts in Kubernetes and Origin look similar. Not surprising, since OpenShift is built on top
of Docker and Kubernetes.&lt;/p&gt;

&lt;h1 id=&quot;cockroachdb&quot;&gt;CockroachDb&lt;/h1&gt;

&lt;p&gt;CockroachDb, &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;https://github.com/cockroachdb/cockroach&lt;/a&gt;, at 130,000 lines of code, is the largest Go program I’ve seen (outside of the Go tools themselves) that has no
substantial dependencies on other software.&lt;/p&gt;

&lt;p&gt;The main binary is at the root of the repo - &lt;code&gt;main.go&lt;/code&gt;. There are a handful of other binaries in
a simulation directory, a handful of tools in the cmd directory, and a stray simulation file in the gossip
directory.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build system in &lt;code&gt;build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;command-line suite in &lt;code&gt;cli&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repo is fairly flat, all the major components are at the top level; there is no src or pkg directory.&lt;/p&gt;

&lt;h1 id=&quot;docker&quot;&gt;Docker&lt;/h1&gt;

&lt;p&gt;Docker, &lt;a href=&quot;https://github.com/docker/docker&quot;&gt;https://github.com/docker/docker&lt;/a&gt;, is also fairly large,
at 100,000 lines of Go code. It follows the Go 1.5 vendor method of doing external code.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API expressed in Go code in &lt;code&gt;api&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;add-ons (not part of the core) in &lt;code&gt;contrib&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;main binary in &lt;code&gt;docker&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;build scripts in &lt;code&gt;hack&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;packages in &lt;code&gt;pkg&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;external source in &lt;code&gt;vendor&lt;/code&gt; (uses Go 1.5+)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;etcd&quot;&gt;etcd&lt;/h1&gt;

&lt;p&gt;Medium sized at 60K lines of code.&lt;/p&gt;

&lt;p&gt;Main binary at the root of the repo. Build scripts in the root of the repo. Big packages in directories at the root of the repo.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go client library for etcd in &lt;code&gt;client&lt;/code&gt; (standalone package used by third party clients)&lt;/li&gt;
  &lt;li&gt;main binary &lt;code&gt;etcdmain&lt;/code&gt; (main.go in root just calls into etcdmain)&lt;/li&gt;
  &lt;li&gt;external source in &lt;code&gt;Godeps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;packages in &lt;code&gt;pkg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 01 Feb 2016 11:26:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/02/01/organizing-go-source-code.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/02/01/organizing-go-source-code.html</guid>
        
        <category>go</category>
        
        <category>programming</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Middleman static content generator</title>
        <description>&lt;p&gt;Hmm, this looks interesting&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://middlemanapp.com/&quot;&gt;Middleman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing I’ve been realizing is that I don’t just want a blog, I want something that can do a blog, and
do books, and do reference material.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Feb 2016 07:50:00 -0800</pubDate>
        <link>http://neurocline.github.io/blog/2016/02/01/middleman-static-content.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/blog/2016/02/01/middleman-static-content.html</guid>
        
        <category>blog</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;Lots of reading this weekend. This should keep you busy for a month of nights. At least.&lt;/p&gt;

&lt;p&gt;Good series of articles on “what can we learn from Linux design”. The comments on some of the articles are better even than the articles.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/411845/&quot;&gt;Ghosts of Unix Past: a historical search for design patterns&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/412131/&quot;&gt;Ghosts of Unix past, part 2: Conflated designs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/414618/&quot;&gt;Ghosts of Unix past, part 3: Unfixable designs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/416494/&quot;&gt;Ghosts of Unix past, part 4: High-maintenance designs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Older series from the same author:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/336224/&quot;&gt;Linux kernel design patterns - part 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/336255/&quot;&gt;Linux kernel design patterns - part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/336262/&quot;&gt;Linux kernel design patterns - part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://cepr.net/documents/publications/no-vacation-update-2013-05.pdf&quot;&gt;No-Vacation Nation Revisited&lt;/a&gt;. It’s a little biased in terms of intent (there’s a thesis), but it collects a lot of data on vacation and leave across the richer part of the world.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.vox.com/2015/7/27/9038829/automation-myth&quot;&gt;The automation myth&lt;/a&gt;. The tag line is “Robots aren’t taking your jobs— and that’s the problem”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.vox.com/2016/1/28/10860830/y-combinator-basic-income&quot;&gt;Why a bunch of Silicon Valley investors are suddenly interested in universal basic income&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dubeyko.com/development/FileSystems/NTFS/ntfsdoc.pdf&quot;&gt;http://dubeyko.com/development/FileSystems/NTFS/ntfsdoc.pdf&lt;/a&gt;. From the authors of the Linux NTFS filesystem, not Microsoft. Alas. Maybe the new Microsoft will see benefit to releasing documentation that’s accurate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://grayscale-research.org/new/pdfs/NTFS%20forensics.pdf&quot;&gt;NTFS Forensics: A Programmers View of Raw Filesystem Data Extraction&lt;/a&gt;. NTFS on-disk layouts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.opensource.apple.com/source/zip/zip-6/unzip/unzip/proginfo/extra.fld&quot;&gt;extra.fld&lt;/a&gt;. All the ZIP file extension fields known (to the Info-ZIP project, anyway).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tldp.org/HOWTO/Software-Building-HOWTO.html&quot;&gt;Building and Installing Software Packages for Linux&lt;/a&gt;. Getting a bit old (this is from 1999), but still mostly relevant.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.linuxfromscratch.org/&quot;&gt;Linux From Scratch&lt;/a&gt;. Build a Linux distribution from scratch. Requires access to an existing Linux system. Good source of low-level details on Linux.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://divan.github.io/posts/go_concurrency_visualize/&quot;&gt;Visualizing Concurrency in Go&lt;/a&gt;. This is awesome.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.botlibre.org/&quot;&gt;Bot Libre!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pbhogan/Signals&quot;&gt;Signals&lt;/a&gt;. Billed as “A lightweight “signals and slots” implementation using fast delegates.”. From 2004, and slightly updated in 2009.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rsos.royalsocietypublishing.org/content/3/1/150292&quot;&gt;Do online social media cut through the constraints that limit the size of offline social networks?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zl-lang.org/&quot;&gt;ZL&lt;/a&gt;. Interesting. Basically C++ with Scheme-style hygienic macros.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nothings/stb/blob/master/docs/other_libs.md&quot;&gt;Other single-file public-domain/open source libraries with minimal dependencies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dchichkov/curious-namespace-trick/wiki/Curious-Namespace-Trick&quot;&gt;Curious Namespace Trick&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://danluu.com/perf-tracing/&quot;&gt;The limitations of sampling profilers today, with glimpses of tracing tools from the future&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://joearms.github.io/2016/01/26/The-Unintentional-Side-Effects-of-a-Bad-Concurrency-Model.html&quot;&gt;The Unintentional side-effects of a bad concurrency model&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://joearms.github.io/2016/01/28/A-Badass-Way-To-Connect-Programs-Together.html&quot;&gt;A Badass Way to Connect Programs Together&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/google/seesaw&quot;&gt;Seesaw v2&lt;/a&gt;. Load balancer written in Go.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.dwheeler.com/autotools/&quot;&gt;Introduction to the Autotools (autoconf, automake, and libtool)&lt;/a&gt;. I’m not suggesting Autotools is good, it’s the opposite. It’s time to study everything so we can learn and grow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.etalabs.net/compare_libcs.html&quot;&gt;Comparison of C/POSIX standard library implementations for Linux&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Jan 2016 12:49:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/31/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/31/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Understanding Go: structs, methods, interfaces</title>
        <description>&lt;p&gt;Go has a simple-looking object system that is just different enough from the C++ side
of things to cause mental model problems in experienced engineers starting out in Go.&lt;/p&gt;

&lt;p&gt;Go has two kinds of types: structs and interfaces. Structs are concrete types, interfaces
are abstract types. Go is a strongly-typed language - even types that are synonyms are
distinct types.&lt;/p&gt;

&lt;h1 id=&quot;structs-and-methods&quot;&gt;Structs and methods&lt;/h1&gt;

&lt;p&gt;When we restrict things to just structs and methods, there are few surprises. Let’s look at a very simple example.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;opening the hatch\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you run this, you get&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;opening the hatch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code&gt;Open&lt;/code&gt; is a method with a pointer receiver, taking a pointer
to a instance of type &lt;code&gt;Hatch&lt;/code&gt;. Although we create a pointer that is
nil, the variable still has a type: (&lt;code&gt;*Hatch&lt;/code&gt;). We can thus call the method
&lt;code&gt;Open&lt;/code&gt;; it gets a nil pointer, but we don’t use that pointer in our code,
so we don’t crash.&lt;/p&gt;

&lt;p&gt;If we change the method to take a value receiver&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;opening the hatch\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;then we will crash if we try to run this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;panic: runtime error: invalid memory address or nil pointer dereference
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;signal 0xc0000005 &lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x1 &lt;span class=&quot;nv&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0 &lt;span class=&quot;nv&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x401074&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

goroutine &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;running&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:
main.main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        ./gotest/m.go:7 +0x34
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;status 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There’s a simple reason, Go has a
courtesy dereference so that a pointer-to-object can be used to invoke
a method with a value receiver, and obviously if you try to dereference
nil, you’ll crash.&lt;/p&gt;

&lt;p&gt;Let’s look at this further. Methods are just functions with an implicit
first parameter that is the receiver object. These are equivalent in functionality and
probably equivalent in code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// regular function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The compiler is just matching up type signatures for receivers, not for full parameter
lists; this is why Go claims it does not support overloading. In the context of how
methods work, it is doing overloading, but just on the receiver type signature.&lt;/p&gt;

&lt;p&gt;For methods, think of the struct type as being open to
having methods added to it via type matching. Each method we write is only good for one
specific type. A concrete type is the union of the struct
and the methods for that struct; the difference between Go and C++ is that in Go, anyone
can add to the methods for a struct type.&lt;/p&gt;

&lt;p&gt;When we have value receivers, the method gets a copy of the object. When we have pointer
receivers, the method gets a copy of the pointer, but both pointers lead to the same object.
Also note that we can’t have both - there is no overloading in Go, either for function
parameter signatures nor for receiver signatures.&lt;/p&gt;

&lt;p&gt;Keep that in mind as we look at the four permutations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;value type, value receiver&lt;/li&gt;
  &lt;li&gt;pointer type, value receiver&lt;/li&gt;
  &lt;li&gt;value type, pointer receiver&lt;/li&gt;
  &lt;li&gt;pointer type, pointer receiver&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;value-type-value-receiver&quot;&gt;value type, value receiver&lt;/h3&gt;

&lt;p&gt;When we have a value sent to a value receiver, it’s bland.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Go method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// equivalent to&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;pointer-type-pointer-receiver&quot;&gt;pointer type, pointer receiver&lt;/h3&gt;

&lt;p&gt;When we have a pointer sent to a pointer receiver, it’s as boring as the first case.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Go method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// equivalent to&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;value-type-pointer-receiver&quot;&gt;value type, pointer receiver&lt;/h3&gt;

&lt;p&gt;When we have a value sent to a pointer receiver, we need to manufacture a pointer. This
works most of the time, but we can’t always take the address of a value - for example,
the number 42 is a constant and has no storage we can get the address of.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Go method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// equivalent to&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;pointer-type-value-receiver&quot;&gt;pointer type, value receiver&lt;/h3&gt;

&lt;p&gt;When we send a pointer to a value receiver, we have to dereference the pointer.
That makes sense, and that’s why we can get a panic that would not happen with pointer
receivers.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Go method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// equivalent to&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that last line - we dereference the pointer to get the value, so that we can copy
it when we call the function. If we have a nil pointer, we’ll get an exception at this point.&lt;/p&gt;

&lt;h1 id=&quot;interfaces&quot;&gt;Interfaces&lt;/h1&gt;

&lt;p&gt;Interfaces are abstract types. There is no storage. They are best thought of as contracts. However,
you can have a value of interface type, or a pointer of interface type. Kind of.&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Jan 2016 14:39:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/28/go-structs-methods-interfaces.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/28/go-structs-methods-interfaces.html</guid>
        
        <category>go</category>
        
        <category>programming</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Recent links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/visualfc/goqt&quot;&gt;GoQt&lt;/a&gt;. Go language bindings to &lt;a href=&quot;http://www.qt.io/&quot;&gt;Qt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://universesandbox.com/&quot;&gt;Universe Sandbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hunch.net/?p=224&quot;&gt;All Models of Learning have Flaws&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4415.pdf&quot;&gt;Simple Contracts for C++&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jan 2016 13:50:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/24/recent-links.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/24/recent-links.html</guid>
        
        <category>links</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Go code patterns</title>
        <description>&lt;p&gt;Go facilitates casual concurrency through the ease of creating goroutines and communicating with channels.&lt;/p&gt;

</description>
        <pubDate>Sun, 24 Jan 2016 13:50:00 -0800</pubDate>
        <link>http://neurocline.github.io/dev/2016/01/24/go-code-patterns.html</link>
        <guid isPermaLink="true">http://neurocline.github.io/dev/2016/01/24/go-code-patterns.html</guid>
        
        <category>go</category>
        
        <category>programming</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>
